using System.Dynamic;
using Newtonsoft.Json;
using System.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using DocumentFormat.OpenXml.Spreadsheet;
using SpreadsheetLight;
using System.Threading;
using System.Threading.Tasks;

namespace ROP_Informe
{
    public partial class Pruebas : System.Web.UI.Page
    {
        public static Boolean paralelo;
        public static int reintentar;
        public static int items;

        int COL_DATA_FECHA_DOC = 0;
        int COL_DATA_FECHA_CAPITULO = 1;
        int COL_DATA_CAPITULO = 2;
        int COL_DATA_TIPO_CAPITULO = 3;
        //int COL_DATA_MOVIMIENTO = 4;
        int COL_DATA_ITEM = 5;
        int COL_DATA_TIPO_ITEM = 6;
        int COL_DATA_COEFICIENTE_NUEVO = 7;
        int COL_DATA_COEFICIENTE_USADO = 8;
        int COL_DATA_CANTIDAD = 9;
        int COL_DATA_EURO_DIA = 10;
        int COL_DATA_DURACION_ESTIMADA = 11;
        int COL_DATA_IMPORTE_ALQUILER = 12;
        int COL_DATA_IMPORTE_VENTA = 13;
        int COL_DATA_IMPORTE_VENTA_SERVICIO = 14;
        int COL_DATA_IMPORTE_VENTA_PRODUCTO = 15;
        //int COL_DATA_CANTIDAD_DIAS = 16;
        int COL_DATA_FECHA = 17;
        int COL_DATA_PRECIO = 18;
        int COL_DATA_PRECIO_ORIGINAL = 19;
        int COL_DATA_PRECIO_CAMBIO = 20;
        int COL_DATA_PRECIO_CORRECION_NUEVO = 21;
        int COL_DATA_PRECIO_CORRECION_USADO = 22;
        int COL_DATA_FECHA_CAMBIO = 23;
        int COL_DATA_CAMBIO = 24;
        int COL_DATA_TIPO = 25;
        int COL_DATA_SUPERFICIE = 26;
        int COL_DATA_COSTE_SUPERFICIE = 27;
        int COL_DATA_PRECIO_CONSUMIBLE = 28;
        int COL_DATA_PRECIO_NO_CONSUMIBLE = 29;
        int COL_DATA_TAX_CONSUMIBLE = 30;
        int COL_DATA_IMPORTE_TAX = 31;
        int COL_DATA_AJUSTE = 32;
        int COL_DATA_AJUSTE_TAX_CONSUMIBLE = 33;
        //int COL_DATA_CANTIDAD_DIAS_NO_TAX = 34;
        int COL_DATA_IMPORTE_NO_TAX_DIAS_DESDE = 35;
        int COL_DATA_IMPORTE_NO_TAX_DIAS_HASTA = 36;
        int COL_DATA_TAX_NO_CONSUMIBLE = 37;
        int COL_DATA_IMPORTE_NO_TAX = 38;
        int COL_DATA_GASTO_VARIABLE = 39;
        int COL_DATA_IMPORTE_GASTO_VARIABLE = 40;
        int COL_DATA_GASTO_FIJO_BU = 41;
        int COL_DATA_IMPORTE_GASTO_FIJO_BU = 42;
        int COL_DATA_GASTO_FIJO_CENTRAL = 43;
        int COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL = 44;
        //int COL_DATA_FECHA_CALCULADA = 45;
        int COL_DATA_ALQUILER_ENTREGA = 46;
        int COL_DATA_ALQUILER_DEVOLUCION = 47;
        int COL_DATA_ALQUILER_ENTREGA_NAVIERA = 48;
        int COL_DATA_ALQUILER_DEVOLUCION_NAVIERA = 49;
        int COL_DATA_ALQUILER_CLASIFICAR_REPARAR_DIRECTO = 50;
        int COL_DATA_ALQUILER_CLASIFICAR_REPARAR_INDIRECTO = 51;
        int COL_DATA_ALQUILER_CLASIFICAR_DIRECTO = 52;
        int COL_DATA_ALQUILER_CLASIFICAR_INDIRECTO = 53;
        int COL_DATA_ALQUILER_REPARAR_DIRECTO = 54;
        int COL_DATA_ALQUILER_REPARAR_INDIRECTO = 55;
        int COL_DATA_ALQUILER_GASTOS_PATIO = 56;
        int COL_DATA_VENTAS_ENTREGA = 57;
        int COL_DATA_VENTAS_DEVOLUCION = 58;
        int COL_DATA_VENTAS_ENTREGA_NAVIERA = 59;
        int COL_DATA_VENTAS_DEVOLUCION_NAVIERA = 60;
        int COL_DATA_VENTAS_CLASIFICAR_REPARAR_DIRECTO = 61;
        int COL_DATA_VENTAS_CLASIFICAR_REPARAR_INDIRECTO = 62;
        int COL_DATA_VENTAS_CLASIFICAR_DIRECTO = 63;
        int COL_DATA_VENTAS_CLASIFICAR_INDIRECTO = 64;
        int COL_DATA_VENTAS_REPARAR_DIRECTO = 65;
        int COL_DATA_VENTAS_REPARAR_INDIRECTO = 66;
        int COL_DATA_VENTAS_GASTOS_PATIO = 67;
        int COL_DATA_PRECIO_GASTOS_PATIO = 68;

        public static string WSDominio = "";
        public static string WSUsuario = "";
        public static string WSContrasena = "";

        public static DataTable dtIdiomas = new DataTable();
        public static string idioma = "";
        
        string nombreInforme;
       
        //List<string> listaArticulosSinFicha = new List<string>();
        //List<string> listaArticulosPedido = new List<string>();
        //List<DateTime> listaFechasPedido = new List<DateTime>();
        //List<string> listaOfertas = new List<string>();
        //List<DateTime> listaFechasOferta = new List<DateTime>();

        DateTime horaFechaBase_1 = default(DateTime);
        TimeSpan horaFechaBase_2 = default(TimeSpan);
        DateTime horaPrecios_1 = default(DateTime);
        TimeSpan horaPrecios_2 = default(TimeSpan);
        DateTime horaDatosConfigurados_3 = default(DateTime);
        TimeSpan horaDatosConfigurados_4 = default(TimeSpan);
        DateTime horaFechaOferta_1 = default(DateTime);
        TimeSpan horaFechaOferta_2 = default(TimeSpan);

        public static string datosGenerales = "";

         // Estructura para pintar el árbol 
        public string inicioJson = "[";
        public string finJson = "]";
        public string inicioCabecera = "{";
        public string finCabecera = "}";
        public string finCabeceraSiguiente = "},";
        public string cabecera = "  \"Concepto\": \"__CAPITULO__\"," +
                                  "  \"Importe\": \"__importeCapitulo__\"," +
                                  "  \"%\": \"__porcentajeCapitulo__\"," +
                                  "  \"colorEncabezado\": \"__color__\"";

        public string inicioHijo = ",\"hijo\": [";
        public string finHijo = "}]";

        public string primerHijo = "           {" +
            "               \"Concepto\": \"__CAPITULO__\"," +
            "               \"Importe\": \"__importeCapitulo__\"," +
            "               \"%\": \"__porcentajeCapitulo__\"," +
            "               \"colorEncabezado\": \"__color__\"";
        public string siguienteHijo = "}" +
            "           ,{" +
            "               \"Concepto\": \"__CAPITULO__\"," +
            "               \"Importe\": \"__importeCapitulo__\"," +
            "               \"%\": \"__porcentajeCapitulo__\"," +
            "               \"colorEncabezado\": \"__color__\"";


        // estructura para manejar los valores del árbol
        public int dtValores_ETIQUETA = 0;
        public int dtValores_CONCEPTO = 1;
        public int dtValores_IMPORTE = 2;
        public int dtValores_PORCENTAJE = 3;

        public string datosJson = "[]";

        protected override void OnLoad(EventArgs e)
        {
            Page.Title = "INFORME ROP";
            base.OnLoad(e);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                //cmbProductosFechas.Items.Clear();

                string usuario = User.Identity.Name.ToString() + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();
                if (usuario == "")
                    usuario = "diana" + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();

                WSDominio = Environment.ExpandEnvironmentVariables(ConfigurationManager.AppSettings["WSDomain"]);
                WSUsuario = Environment.ExpandEnvironmentVariables(ConfigurationManager.AppSettings["WSUser"]);
                WSContrasena = Environment.ExpandEnvironmentVariables(ConfigurationManager.AppSettings["WSPassword"]);

                lblpopup.Visible = false;
                nombreInforme = "";
                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                //dataTiempos.Visible = false;
                dataDatos.Visible = false;
                dataResultados.Visible = false;
                datosGenerales = "";
              
                lblVersion.Visible = false;
                cmbVersion.Visible = false;
                validarUsuario();

                // idioma
                conexiones.crearConexion();
                conexiones.comando = conexiones.conexion.CreateCommand();
                conexiones.comando.CommandText = "sp_ROP_EtiquetasConsulta";
                conexiones.comando.CommandTimeout = 240000;
                conexiones.comando.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adaptadorIdioma = new SqlDataAdapter(conexiones.comando);
                adaptadorIdioma.Fill(dtIdiomas);
                adaptadorIdioma.Dispose();
                conexiones.comando.Dispose();
                conexiones.conexion.Close();
                conexiones.conexion.Dispose();

                datosConfiguradosProcesar();
                //dtValores = new System.Data.DataTable();
                idioma = "ESPAÑOL";
                modificarEtiquetas();
            }
        }

        private void datosConfiguradosProcesar()
        {
            
            try
            {
                txtParalelo.InnerText = "";
                txtpaquete.InnerText = "";
                txtReintentar.InnerText = "";
                paralelo = false;
                items = 0;
                reintentar = 0;

                conexiones.crearConexion();
                conexiones.consulta = "ROP_DatosConfiguracionProcesar";
                conexiones.comando = new SqlCommand(conexiones.consulta, conexiones.conexion);
                conexiones.comando.CommandType = CommandType.StoredProcedure;
                SqlDataReader dr = conexiones.comando.ExecuteReader();
                if (dr.HasRows)
                {
                    dr.Read();
                    if (dr.GetBoolean(0))
                    {
                        txtParalelo.InnerText = "Verdadero";
                        paralelo = true;
                    }
                    else
                    {
                        txtParalelo.InnerText = "False";
                        paralelo = false;
                    }
                    txtpaquete.InnerText = dr.GetInt32(1).ToString();
                    items = dr.GetInt32(1);
                    txtReintentar.InnerText = dr.GetInt32(2).ToString();
                    reintentar = dr.GetInt32(2);
                }
                dr.Close();
                conexiones.conexion.Close();
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Validar usuario // " + ex.Message;
            }
        }

        private void validarUsuario()
        {
            try
            {
                bool elegirVersion = false;
                string usuario = User.Identity.Name.ToString();
                if (usuario == "")
                    usuario = "diana";

                if (usuario.IndexOf('\\') > 0)
                    usuario = usuario.Split('\\')[1];

                conexiones.crearConexion();
                conexiones.consulta = "sp_ROP_ConfiguracionUsuarioConsulta";
                conexiones.comando = new SqlCommand(conexiones.consulta, conexiones.conexion);
                conexiones.comando.CommandType = CommandType.StoredProcedure;

                SqlParameter parametroUsuario = new SqlParameter("@usuario", SqlDbType.NVarChar, 100);
                parametroUsuario.Value = usuario;
                conexiones.comando.Parameters.Add(parametroUsuario);
                SqlDataReader dr = conexiones.comando.ExecuteReader();
                if (dr.HasRows)
                {
                    dr.Read();
                    elegirVersion = dr.GetBoolean(6);
                }
                dr.Close();
                conexiones.conexion.Close();

                if (elegirVersion)
                {
                    rellenarCombosVersion();
                    lblVersion.Visible = true;
                    cmbVersion.Visible = true;
                }
                else
                {
                    lblVersion.Visible = false;
                    cmbVersion.Visible = false;
                }
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Validar usuario // " + ex.Message;
            }
        }

        private void rellenarCombosVersion()
        {
            try
            {
                string versionActual = "";

                cmbVersion.Items.Clear();
                cmbVersion.Items.Add(new ListItem { Text = "", Value = "-1" });

                conexiones.crearConexion();
                conexiones.consulta = "sp_ROP_ConfiguracionGeneralVersionesConsulta";
                conexiones.comando = new SqlCommand(conexiones.consulta, conexiones.conexion);
                conexiones.comando.CommandType = CommandType.StoredProcedure;
                SqlDataReader dr = conexiones.comando.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        //cmbVersion.Items.Add(dr.GetString(0));
                        cmbVersion.Items.Add(new ListItem { Text = dr.GetString(1), Value = dr.GetInt32(0).ToString() });
                        if (dr.GetBoolean(2))
                            versionActual = dr.GetString(1).ToString();
                    }
                }
                conexiones.conexion.Close();
                cmbVersion.Text = "";  //versionActual;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Rellenar combo versión // " + ex.Message;
            }
        }

        protected void imgSpain_Click(object sender, EventArgs e)
        {
            idioma = "ESPAÑOL";
            modificarEtiquetas();
        }

        protected void imgCatalonia_Click(object sender, EventArgs e)
        {
            idioma = "CATALAN";
            modificarEtiquetas();
        }

        protected void imgUnited_Click(object sender, EventArgs e)
        {
            idioma = "INGLES";
            modificarEtiquetas();
        }

        protected void modificarEtiquetas()
        {
            try
            {
                DataRow[] filaEncontrada;

                filaEncontrada = dtIdiomas.Select("ETQ_Control = 'lblVersion'");
                foreach (DataRow filaValor in filaEncontrada)
                {
                    if (idioma == "ESPAÑOL")
                        lblVersion.Text = Convert.ToString(filaValor["ETQ_TextoCastellano"]);
                    if (idioma == "CATALAN")
                        lblVersion.Text = Convert.ToString(filaValor["ETQ_TextoCatalan"]);
                    if (idioma == "INGLES")
                        lblVersion.Text = Convert.ToString(filaValor["ETQ_TextoIngles"]);
                }

                filaEncontrada = dtIdiomas.Select("ETQ_Control = 'btnBuscarInformacion'");
                foreach (DataRow filaValor in filaEncontrada)
                {
                    if (idioma == "ESPAÑOL")
                        btnBuscarInformacion.Text = Convert.ToString(filaValor["ETQ_TextoCastellano"]);
                    if (idioma == "CATALAN")
                        btnBuscarInformacion.Text = Convert.ToString(filaValor["ETQ_TextoCatalan"]);
                    if (idioma == "INGLES")
                        btnBuscarInformacion.Text = Convert.ToString(filaValor["ETQ_TextoIngles"]);
                }
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Modificar etiquetas // " + ex.Message;
            }
        }

        protected DataTable localizarPreciosArticulos(string empresa, string delegacion, string articulos, string moneda, string articulosCambio, string ficha, string usuario)
        {
            string tipo = "";
            SqlDataAdapter adaptadorArticulos;
            System.Data.DataTable dtArticulosLPA = new System.Data.DataTable();
            string strConexion;
            SqlConnection conexion;
            try
            {
                horaPrecios_1 = DateTime.Now;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "sp_ROP_ConfiguracionNivel4Consulta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                SqlDataReader dr = comando.ExecuteReader();
                if (dr.HasRows)
                {
                    dr.Read();
                    tipo = Convert.ToString(dr["CFGNVL4_Valor"]);
                }
                dr.Close();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "sp_ROP_ConfiguracionNivel4Consulta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //SqlDataReader dr = conexiones.comando.ExecuteReader();
                //if (dr.HasRows)
                //{
                //    dr.Read();
                //    tipo = Convert.ToString(dr["CFGNVL4_Valor"]);
                //}
                //dr.Close();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_PreciosArticulos";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                if (delegacion == "")
                    comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                else
                    comando.Parameters.AddWithValue("@delegacion", delegacion);
                comando.Parameters.AddWithValue("@articulos", articulos);
                comando.Parameters.AddWithValue("@moneda", moneda);
                comando.Parameters.AddWithValue("@articulosCambio", articulosCambio);
                if (ficha == "")
                    comando.Parameters.AddWithValue("@ficha", DBNull.Value);
                else
                    comando.Parameters.AddWithValue("@ficha", ficha);
                if (tipo == "")
                    comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                else
                    comando.Parameters.AddWithValue("@fechaCambio", tipo);
                comando.Parameters.AddWithValue("@usuario", usuario);
                adaptadorArticulos = new SqlDataAdapter(comando);
                adaptadorArticulos.Fill(dtArticulosLPA);
                adaptadorArticulos.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //if (delegacion == "")
                //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulos);
                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", articulosCambio);
                //if (ficha == "")
                //    conexiones.comando.Parameters.AddWithValue("@ficha", DBNull.Value);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@ficha", ficha);
                //if (tipo == "")
                //    conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@fechaCambio", tipo);
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);

                //adaptadorArticulos = new SqlDataAdapter(conexiones.comando);
                //adaptadorArticulos.Fill(dtArticulosLPA);
                //adaptadorArticulos.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                horaPrecios_2 = DateTime.Now.Subtract(horaPrecios_1);
                return dtArticulosLPA;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR localizar precios articulos // " + ex.Message + " // " + articulos;
                return dtArticulosLPA;
            }
        }

        protected DataTable gastosPatio(string empresa, string articulos, DateTime fecha, string moneda, string usuarioSQL)
        {
            SqlDataAdapter adaptadorArticulos;
            System.Data.DataTable dtArticulosLPA = new System.Data.DataTable();
            string strConexion;
            SqlConnection conexion;

            try
            {
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_GastosPatio";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@articulos", articulos);
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@fecha", fecha);
                comando.Parameters.AddWithValue("@monedaFicha", moneda);
                comando.Parameters.AddWithValue("@usuario", usuarioSQL);
                adaptadorArticulos = new SqlDataAdapter(comando);
                adaptadorArticulos.Fill(dtArticulosLPA);
                adaptadorArticulos.Dispose();
                conexiones.comando.Dispose();
                conexiones.conexion.Close();
                conexiones.conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_GastosPatio";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulos);
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@fecha", fecha);
                //conexiones.comando.Parameters.AddWithValue("@monedaFicha", moneda);
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuarioSQL);
                //adaptadorArticulos = new SqlDataAdapter(conexiones.comando);
                //adaptadorArticulos.Fill(dtArticulosLPA);
                //adaptadorArticulos.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                return dtArticulosLPA;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR gastos patio // " + ex.Message + " // " + articulos;
                return dtArticulosLPA;
            }
        }

        protected DataTable gastosOficina(string empresa, string masterObra, DateTime fecha, string moneda, int mesPresupuestoValido, decimal porcentajeGastoAdmministrativoVariable, decimal porcentajeGastoComercialVariable)
        {
            SqlDataAdapter adaptadorGastos;
            System.Data.DataTable dtGastosOficina = new System.Data.DataTable();
            string strConexion;
            SqlConnection conexion;

            try
            {
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_GastosOficina";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@masterObra", masterObra);
                comando.Parameters.AddWithValue("@fecha_base", fecha);
                comando.Parameters.AddWithValue("@currency", moneda);
                comando.Parameters.AddWithValue("@new_budget_month", mesPresupuestoValido);
                comando.Parameters.AddWithValue("@porcentajeGastoPersonalAdmministrativoVariable", porcentajeGastoAdmministrativoVariable);
                comando.Parameters.AddWithValue("@porcentajeGastoPersonalComercialVariable", porcentajeGastoComercialVariable);
                adaptadorGastos = new SqlDataAdapter(comando);
                adaptadorGastos.Fill(dtGastosOficina);
                adaptadorGastos.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_GastosOficina";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@masterObra", masterObra);
                //conexiones.comando.Parameters.AddWithValue("@fecha_base", fecha);
                //conexiones.comando.Parameters.AddWithValue("@currency", moneda);
                //conexiones.comando.Parameters.AddWithValue("@new_budget_month", mesPresupuestoValido);
                //conexiones.comando.Parameters.AddWithValue("@porcentajeGastoPersonalAdmministrativoVariable", porcentajeGastoAdmministrativoVariable);
                //conexiones.comando.Parameters.AddWithValue("@porcentajeGastoPersonalComercialVariable", porcentajeGastoComercialVariable);
                //adaptadorGastos = new SqlDataAdapter(conexiones.comando);
                //adaptadorGastos.Fill(dtGastosOficina);
                //adaptadorGastos.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                return dtGastosOficina;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR gastos oficina // " + ex.Message;
                return dtGastosOficina;
            }
        }

        protected DataTable gastosFijos(string empresa, string masterObra, DateTime fecha, string moneda, int mesPresupuestoValido, decimal porcentajeGastoAdmministrativoVariable, decimal porcentajeGastoComercialVariable, decimal @coeficienteGastosFijosAlquilerVenta)
        {
            SqlDataAdapter adaptadorGastos;
            System.Data.DataTable dtGastosFijos = new System.Data.DataTable();
            string strConexion;
            SqlConnection conexion;

            try
            {
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_GastosFijos";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@masterObra", masterObra);
                comando.Parameters.AddWithValue("@fecha_base", fecha);
                comando.Parameters.AddWithValue("@currency", moneda);
                comando.Parameters.AddWithValue("@new_budget_month", mesPresupuestoValido);
                comando.Parameters.AddWithValue("@porcentajeGastoPersonalAdmministrativoVariable", porcentajeGastoAdmministrativoVariable);
                comando.Parameters.AddWithValue("@porcentajeGastoPersonalComercialVariable", porcentajeGastoComercialVariable);
                comando.Parameters.AddWithValue("@coeficienteGastosFijosAlquilerVenta", coeficienteGastosFijosAlquilerVenta);
                adaptadorGastos = new SqlDataAdapter(comando);
                adaptadorGastos.Fill(dtGastosFijos);
                adaptadorGastos.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_GastosFijos";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@masterObra", masterObra);
                //conexiones.comando.Parameters.AddWithValue("@fecha_base", fecha);
                //conexiones.comando.Parameters.AddWithValue("@currency", moneda);
                //conexiones.comando.Parameters.AddWithValue("@new_budget_month", mesPresupuestoValido);
                //conexiones.comando.Parameters.AddWithValue("@porcentajeGastoPersonalAdmministrativoVariable", porcentajeGastoAdmministrativoVariable);
                //conexiones.comando.Parameters.AddWithValue("@porcentajeGastoPersonalComercialVariable", porcentajeGastoComercialVariable);
                //conexiones.comando.Parameters.AddWithValue("@coeficienteGastosFijosAlquilerVenta", coeficienteGastosFijosAlquilerVenta);

                //adaptadorGastos = new SqlDataAdapter(conexiones.comando);
                //adaptadorGastos.Fill(dtGastosFijos);
                //adaptadorGastos.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                return dtGastosFijos;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR gastos fijos // " + ex.Message;
                return dtGastosFijos;
            }
        }

        protected void salvarIndicencia(string empresa, string tipo, string item, string incidencia)
        {
            try
            {
                string strConexion;
                SqlConnection conexion;

                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_IncidenciasAlta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@tipo", tipo);
                comando.Parameters.AddWithValue("@item", item);
                comando.Parameters.AddWithValue("@incidencia", incidencia);
                comando.ExecuteNonQuery();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_IncidenciasAlta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@tipo", tipo);
                //conexiones.comando.Parameters.AddWithValue("@item", item);
                //conexiones.comando.Parameters.AddWithValue("@incidencia", incidencia);
                //conexiones.comando.ExecuteNonQuery();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR salvar incidencia // " + ex.Message;
            }
        }

        protected void localizarVersion(DateTime fecha)
        {
            string strConexion;
            SqlConnection conexion;
            try
            {
                lblVersionUtilizada.Text = "";
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "sp_ROP_ConfiguracionUtilizar";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fecha);
                SqlDataReader dr = comando.ExecuteReader();
                if (dr.HasRows)
                {
                    dr.Read();
                    lblVersionUtilizada.Text = "Usada: " + Convert.ToString(dr["CFG_Version"]);
                }
                dr.Close();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "sp_ROP_ConfiguracionUtilizar";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fecha);
                //SqlDataReader dr = conexiones.comando.ExecuteReader();
                //if (dr.HasRows)
                //{
                //    dr.Read();
                //    lblVersionUtilizada.Text = "Usada: " + Convert.ToString(dr["CFG_Version"]);
                //}
                //dr.Close();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR localizar versión // " + ex.Message;
            }
        }

        //protected decimal localizarCambio(DateTime fecha, string moneda)
        //{
        //    decimal cambio = 1;

        //    try
        //    {
        //        conexiones.crearConexion();
        //        conexiones.comando = conexiones.conexion.CreateCommand();
        //        conexiones.comando.CommandText = "sp_ROP_CambioMoneda";
        //        conexiones.comando.CommandTimeout = 240000;
        //        conexiones.comando.CommandType = CommandType.StoredProcedure;
        //        conexiones.comando.Parameters.AddWithValue("@fecha", fecha);
        //        conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
        //        if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
        //            conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
        //        else
        //            conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
        //        SqlDataReader dr = conexiones.comando.ExecuteReader();
        //        if (dr.HasRows)
        //        {
        //            dr.Read();
        //            cambio = Convert.ToDecimal(dr["EXCHRATE"]);
        //        }
        //        dr.Close();
        //        conexiones.comando.Dispose();
        //        conexiones.conexion.Close();
        //        conexiones.conexion.Dispose();
        //        return cambio;
        //    }
        //    catch (Exception ex)
        //    {
        //        lblMensajeError.Visible = true;
        //        lblMensajeError.Text = "ERROR localizar cambio // " + ex.Message;
        //        return cambio;
        //    }
        //}

        protected DataTable localizarPaneles(DateTime fecha)
        {
            SqlDataAdapter adaptadorPaneles;
            System.Data.DataTable dtPaneles = new System.Data.DataTable();

            try
            {
                SqlConnection conexion;
                string strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "sp_ROP_ConfiguracionPanelesConsulta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fecha);

                adaptadorPaneles = new SqlDataAdapter(comando);
                adaptadorPaneles.Fill(dtPaneles);
                adaptadorPaneles.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "sp_ROP_ConfiguracionPanelesConsulta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fecha);

                //adaptadorPaneles = new SqlDataAdapter(conexiones.comando);
                //adaptadorPaneles.Fill(dtPaneles);
                //adaptadorPaneles.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                return dtPaneles;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR localizar paneles // " + ex.Message;
                return dtPaneles;
            }
        }

        protected DataTable localizarEstadoArticulos(string usuarioSQL, string articulos)
        {
            SqlDataAdapter adaptadorArticulos;
            System.Data.DataTable dtArticulosEstado = new System.Data.DataTable();

            try
            {
                SqlConnection conexion;
                string strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;
                comando = conexion.CreateCommand();
                comando.CommandText = "sp_ROP_EstadoArticulos";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@usuario", usuarioSQL);
                comando.Parameters.AddWithValue("@articulos", articulos);
                adaptadorArticulos = new SqlDataAdapter(comando);
                adaptadorArticulos.Fill(dtArticulosEstado);
                adaptadorArticulos.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "sp_ROP_EstadoArticulos";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuarioSQL);
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulos);
                //adaptadorArticulos = new SqlDataAdapter(conexiones.comando);
                //adaptadorArticulos.Fill(dtArticulosEstado);
                //adaptadorArticulos.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                return dtArticulosEstado;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "ERROR localizar estado articulos // " + ex.Message;
                return dtArticulosEstado;
            }
        }

        protected void fechaOferta(ref DateTime fechaPrecios, string empresa, string idOferta)
        {
            try
            {
                horaFechaOferta_1 = DateTime.Now;
                System.Collections.IEnumerator enumerator_1;

                tablaOfertas.CallContext contexto_1 = new tablaOfertas.CallContext();
                contexto_1.Company = empresa;

                tablaOfertas.QueryCriteria criterio_1 = new tablaOfertas.QueryCriteria();
                criterio_1.CriteriaElement = new tablaOfertas.CriteriaElement[1];

                criterio_1.CriteriaElement[0] = new tablaOfertas.CriteriaElement();
                criterio_1.CriteriaElement[0].FieldName = "QuotationId";
                criterio_1.CriteriaElement[0].DataSourceName = "SalesQuotationMasterTable";
                criterio_1.CriteriaElement[0].Operator = tablaOfertas.Operator.Equal;
                criterio_1.CriteriaElement[0].Value1 = idOferta;

                tablaOfertas.SalesQuotationsServiceClient proxy_1 = new tablaOfertas.SalesQuotationsServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                tablaOfertas.AxdSalesQuotations axdTablaOfertas_1 = proxy_1.find(contexto_1, criterio_1);
                if (axdTablaOfertas_1.SalesQuotationMasterTable is null)
                {
                    proxy_1.Close();
                }
                else
                {
                    enumerator_1 = axdTablaOfertas_1.SalesQuotationMasterTable.GetEnumerator();

                    while (enumerator_1.MoveNext())
                    {
                        tablaOfertas.AxdEntity_SalesQuotationMasterTable axdEntity_SalesQuotationMasterTable = (tablaOfertas.AxdEntity_SalesQuotationMasterTable)enumerator_1.Current;

                        if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                            fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value);
                        break;
                    }
                    proxy_1.Close();
                }
                horaFechaOferta_2 = DateTime.Now.Subtract(horaFechaOferta_1);
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "fechaOferta // "  + ex.Message;
            }
        }

        protected void fechaBaseFichaArticulo(ref List<string> listaOfertas, ref List<DateTime> listaFechasOferta, ref List<string> listaArticulosPedido, ref List<DateTime> listaFechasPedido, string empresa, string obraID, int diasDiferencia, int diasRestar)
        {
            string whereGo = "";
            bool datosIniciales = false;
            System.Collections.IEnumerator enumerator_1;
            string pedidos = "";
            string pedido = "";
            int lineaCapitulo;
            int numeroArticulos = 0;
            DateTime fechaArticulo;
            DateTime fechaOfertaPedido;
            SqlDataReader dr;

            try
            {
                horaFechaBase_1 = DateTime.Now;
                fechaArticulo = new DateTime();

                tablaPedidos.CallContext contexto_1 = new tablaPedidos.CallContext();
                contexto_1.Company = empresa;

                tablaPedidos.QueryCriteria criterio_1 = new tablaPedidos.QueryCriteria();
                criterio_1.CriteriaElement = new tablaPedidos.CriteriaElement[1];

                criterio_1.CriteriaElement[0] = new tablaPedidos.CriteriaElement();
                criterio_1.CriteriaElement[0].FieldName = "ObraId";
                criterio_1.CriteriaElement[0].DataSourceName = "SalesTable";
                criterio_1.CriteriaElement[0].Operator = tablaPedidos.Operator.Equal;
                criterio_1.CriteriaElement[0].Value1 = obraID;

                tablaPedidos.SalesOrdersServiceClient proxy_1 = new tablaPedidos.SalesOrdersServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                whereGo = " - proxy - ";
                tablaPedidos.AxdSalesOrders axdtablaPedidos_1 = proxy_1.find(contexto_1, criterio_1);
                if (axdtablaPedidos_1.SalesTable is null)
                {
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO HAY PEDIDOS";
                    proxy_1.Close();

                    SqlConnection conexion;
                    string strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                    conexion = new SqlConnection(strConexion);
                    conexion.Open();
                    SqlCommand comando;
                    comando = conexion.CreateCommand();
                    comando.CommandText = "ROP_FechaBaseConsulta";
                    comando.CommandTimeout = 240000;
                    comando.CommandType = CommandType.StoredProcedure;
                    comando.Parameters.AddWithValue("@empresa", empresa);
                    comando.Parameters.AddWithValue("@obra", obraID);
                    dr = comando.ExecuteReader();

                    //conexiones.crearConexion();
                    //conexiones.comando = conexiones.conexion.CreateCommand();
                    //conexiones.comando.CommandText = "ROP_FechaBaseConsulta";
                    //conexiones.comando.CommandTimeout = 240000;
                    //conexiones.comando.CommandType = CommandType.StoredProcedure;
                    //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                    //conexiones.comando.Parameters.AddWithValue("@obra", obraID);
                    //dr = conexiones.comando.ExecuteReader();
                    if (dr.HasRows)
                    {
                        while (dr.Read())
                        {
                            fechaOfertaPedido = new DateTime();
                            // fecha oferta
                            if (!datosIniciales && !String.IsNullOrEmpty(dr["QuotationDate"].ToString()))
                            {
                                listaOfertas.Add(obraID);
                                listaFechasOferta.Add(Convert.ToDateTime(dr["QuotationDate"].ToString()));
                                datosIniciales = true;
                            }

                            // fecha pedido
                            if (listaArticulosPedido.Contains(dr["ProductId"].ToString()))
                            {
                                // calcular la fecha para esta artículo
                                fechaArticulo = new DateTime();
                                if (!String.IsNullOrEmpty(dr["QuotationDate"].ToString()))
                                {
                                    if (fechaOfertaPedido != new DateTime() && !String.IsNullOrEmpty(dr["SalesOrderDate"].ToString()))
                                    {
                                        if (Math.Abs(Convert.ToDateTime(dr["SalesOrderDate"].ToString()).Subtract(fechaOfertaPedido).Days) > diasDiferencia)
                                        {
                                            fechaArticulo = Convert.ToDateTime(dr["SalesOrderDate"].ToString()).AddDays((-1) * diasRestar);
                                        }
                                        else
                                        {
                                            fechaArticulo = fechaOfertaPedido;
                                        }
                                    }
                                    else
                                    {
                                        if (!String.IsNullOrEmpty(dr["SalesOrderDate"].ToString()))
                                        {
                                            fechaArticulo = Convert.ToDateTime(dr["SalesOrderDate"].ToString());
                                        }
                                    }
                                }
                                else
                                {
                                    fechaArticulo = Convert.ToDateTime(dr["SalesOrderDate"].ToString());
                                }

                                if (fechaArticulo != new DateTime())
                                {
                                    numeroArticulos = listaArticulosPedido.FindIndex(x => x.Equals(dr["ProductId"].ToString()));
                                    if (numeroArticulos >= 0)
                                        if (listaFechasPedido.ElementAt(numeroArticulos) > Convert.ToDateTime(dr["SalesOrderDate"].ToString()))
                                            listaFechasPedido[numeroArticulos] = Convert.ToDateTime(dr["SalesOrderDate"].ToString());
                                }
                            }
                        }
                    }
                    dr.Close();
                    conexiones.comando.Dispose();
                    conexiones.conexion.Close();
                    conexiones.conexion.Dispose();
                }
                else
                {
                    whereGo = " - enumerator - ";
                    enumerator_1 = axdtablaPedidos_1.SalesTable.GetEnumerator();

                    while (enumerator_1.MoveNext())
                    {
                        whereGo = " - enumerator 2 - ";
                        tablaPedidos.AxdEntity_SalesTable AxdEntity_SalesTable = (tablaPedidos.AxdEntity_SalesTable)enumerator_1.Current;
                        whereGo = " - pedidos - ";

                        if (AxdEntity_SalesTable.SalesStatus.ToString().ToUpper() != tablaPedidos.AxdEnum_SalesStatus.Canceled.ToString().ToUpper())
                        {
                            if (!datosIniciales && !String.IsNullOrEmpty(AxdEntity_SalesTable.QuotationId))
                            {
                                whereGo = " - recoge datos - ";
                                fechaOfertaPedido = new DateTime();
                                fechaOferta(ref fechaOfertaPedido, empresa, AxdEntity_SalesTable.QuotationId.ToString());
                                listaOfertas.Add(AxdEntity_SalesTable.QuotationId.ToString());
                                listaFechasOferta.Add(fechaOfertaPedido);
                                datosIniciales = true;
                            }

                            pedidos = pedidos + " - " + AxdEntity_SalesTable.SalesId.ToString();
                            pedido = AxdEntity_SalesTable.SalesId.ToString();
                            tablaPedidos.AxdEntity_SalesLine[] axdEntity_SalesQuotationTables = AxdEntity_SalesTable.SalesLine;
                            tablaPedidos.AxdEntity_SalesLine axdEntity_SalesQuotationTable;

                            fechaOfertaPedido = new DateTime();

                            if (!String.IsNullOrEmpty(AxdEntity_SalesTable.QuotationId))
                            {
                                if (!listaOfertas.Contains(AxdEntity_SalesTable.QuotationId.ToString()))
                                {
                                    // llamada una sóla vez
                                    //fechaOferta(ref fechaOfertaPedido, AxdEntity_SalesTable.QuotationId.ToString());
                                    //listaOfertas.Add(AxdEntity_SalesTable.QuotationId.ToString());
                                    //listaFechasOferta.Add(fechaOfertaPedido);
                                }
                                else
                                {
                                    numeroArticulos = listaOfertas.FindIndex(x => x.Equals(AxdEntity_SalesTable.QuotationId.ToString()));
                                    if (numeroArticulos >= 0)
                                        fechaOfertaPedido = listaFechasOferta[numeroArticulos];
                                }
                            }

                            if (axdEntity_SalesQuotationTables is null)
                            {

                            }
                            {
                                for (lineaCapitulo = 0; lineaCapitulo < axdEntity_SalesQuotationTables.Length; lineaCapitulo++)
                                {
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[lineaCapitulo];
                                    if (listaArticulosPedido.Contains(axdEntity_SalesQuotationTable.ItemId.ToString()))
                                    {
                                        // calcular la fecha para esta artículo
                                        fechaArticulo = new DateTime();

                                        if (!String.IsNullOrEmpty(AxdEntity_SalesTable.QuotationId))
                                        {
                                            if (fechaOfertaPedido != new DateTime() && axdEntity_SalesQuotationTable.CreatedDateTime.ToString().Length > 0)
                                            {
                                                if (Math.Abs(Convert.ToDateTime(AxdEntity_SalesTable.CreatedDateTime.Value).Subtract(fechaOfertaPedido).Days) > diasDiferencia)
                                                {
                                                    fechaArticulo = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value).AddDays((-1) * diasRestar);
                                                }
                                                else
                                                {
                                                    fechaArticulo = fechaOfertaPedido;
                                                }
                                            }
                                            else
                                            {
                                                if (axdEntity_SalesQuotationTable.CreatedDateTime.ToString().Length > 0)
                                                {
                                                    fechaArticulo = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            fechaArticulo = Convert.ToDateTime(AxdEntity_SalesTable.CreatedDateTime.Value);
                                        }

                                        if (fechaArticulo != new DateTime())
                                        {
                                            numeroArticulos = listaArticulosPedido.FindIndex(x => x.Equals(axdEntity_SalesQuotationTable.ItemId.ToString()));
                                            if (numeroArticulos >= 0)
                                                if (listaFechasPedido.ElementAt(numeroArticulos) > fechaArticulo)
                                                    listaFechasPedido[numeroArticulos] = fechaArticulo;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    proxy_1.Close();
                }
                horaFechaBase_2 = DateTime.Now.Subtract(horaFechaBase_1);
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = obraID + " // fechaBaseFichaArticulo // " + whereGo + " // " + ex.Message;
            }
        }

        protected void calcularCodigosTransporte(ref string codigosTransporte, string empresa, string delegacion)
        {
            string strConexion;
            strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
            SqlConnection conexion;
            SqlDataAdapter adaptador;
            System.Data.DataTable dtTabla = new System.Data.DataTable();
            SqlCommand comando;

            conexion = new SqlConnection(strConexion);
            conexion.Open();
            comando = conexion.CreateCommand();
            comando.CommandText = "sp_ROP_ConfiguracionTransporteSubfamilia";
            comando.CommandTimeout = 240000;
            comando.CommandType = CommandType.StoredProcedure;
            comando.Parameters.AddWithValue("@empresa", empresa);
            if (delegacion != "")
                comando.Parameters.AddWithValue("@delegacion", delegacion);
            else
                comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
            dtTabla = new System.Data.DataTable();
            adaptador = new SqlDataAdapter(comando);
            adaptador.Fill(dtTabla);
            adaptador.Dispose();
            comando.Dispose();
            conexion.Close();
            conexion.Dispose();
            for (int i = 0; i < dtTabla.Rows.Count; i++)
            {
                codigosTransporte = codigosTransporte + dtTabla.Rows[i]["ProductId"].ToString() + "|";
            }
        }

        protected void calcularOferta(ref DataTable dtResultados, int cual, string empresa, string numero)
        {
            DataRow oItemResultados;
            DateTime hora_1 = default(DateTime);
            TimeSpan hora_2 = default(TimeSpan);
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DateTime horaProcesar_1 = default(DateTime);
            TimeSpan horaProcesar_2 = default(TimeSpan);
            string dondeVa = "";

            try
            {
                string usuario="";
                var guid = Guid.NewGuid();
                var justNumbers = new String(guid.ToString().Where(Char.IsDigit).ToArray());
                var seed = int.Parse(justNumbers.Substring(0, 4));
                var rnd = new Random(seed);
                //Random rnd = new Random(10);
                int numeroRandom;

                string codigosTransporte = "";
                DataRow filaValores;
              
                List<string> listaArticulosSinFicha = new List<string>();
                List<string> listaArticulosPedido = new List<string>();
                List<DateTime> listaFechasPedido = new List<DateTime>();
                List<string> listaOfertas = new List<string>();
                List<DateTime> listaFechasOferta = new List<DateTime>();

                hora_1 = DateTime.Now;

                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();

                SqlConnection conexion;

                SqlDataAdapter adaptador;
                System.Data.DataTable dtTabla = new System.Data.DataTable();
                SqlCommand comando;

                DateTime horaTotal_1 = default(DateTime);
                TimeSpan horaTotal_2 = default(TimeSpan);
               
                string moneda = "";
                string masterObra = "";
                decimal total;

                DataTable dtArticulosPaneles;

                SqlDataAdapter adaptadorDatosConfiguracion;
                System.Data.DataTable dtDatosConfiguracion;

                List<int> listaBonificacionesDesde = new List<int>();
                List<int> listaBonificacionesHasta = new List<int>();
                List<decimal> listaBonificacionesValor = new List<decimal>();
                
                decimal pesoArticulo = 0;
                decimal kilometros = 0;
                decimal cambio = 1;
                bool hayTR001 = false;
                bool existeTR001 = false;
                bool esVenta = false;
                int lineasBonificacion;
                int duracion = 0;
                int diasCalculados = 0;
                int diasMultiplicar = 0;
                int diasDesdeTaxNoConsumible = 0;
                int diasHastaTaxNoConsumible = 0;
                int diasTaximetroNoConsumibleCalcular = 0;
                decimal importeAlquilerGastosFijosBU = 0;
                decimal importeAlquilerGastosFijosCentrales = 0;
                decimal importeCosteBonificacionTaximetroConsumible = 0;
             
                string tipoServicio = "";
                string tituloCapitulo = "";
    
                System.Data.DataTable dtValores;
                dtValores = new System.Data.DataTable();
                dtValores.Columns.Add("ETIQUETA");
                dtValores.Columns.Add("CONCEPTO");
                dtValores.Columns.Add("IMPORTE");
                dtValores.Columns.Add("PORCENTAJE");

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();

                DataTable dtTaximetro;
                dtTaximetro = new DataTable();
                dtTaximetro.Columns.Add("FECHA DOC");
                dtTaximetro.Columns.Add("FECHA CAPITULO");
                dtTaximetro.Columns.Add("CAPITULO");
                dtTaximetro.Columns.Add("TIPO CAPITULO");
                dtTaximetro.Columns.Add("MOVIMIENTO");
                dtTaximetro.Columns.Add("ITEM");
                dtTaximetro.Columns.Add("NUEVO/USADO");
                dtTaximetro.Columns.Add("COEF. NUEVO");
                dtTaximetro.Columns.Add("COEF. USADO");
                dtTaximetro.Columns.Add("CANTIDAD");
                dtTaximetro.Columns.Add("EURO/UD/DIA");
                dtTaximetro.Columns.Add("DURACION ESTIMADA");
                dtTaximetro.Columns.Add("FACT ALQUILER");
                dtTaximetro.Columns.Add("FACT TOTAL VENTA");
                dtTaximetro.Columns.Add("FACT VENTA SERVICIO");
                dtTaximetro.Columns.Add("FACT VENTA PRODUCTO");
                dtTaximetro.Columns.Add("CANTIDAD DIAS");
                dtTaximetro.Columns.Add("FECHA PS");
                dtTaximetro.Columns.Add("PS/UD");
                dtTaximetro.Columns.Add("PS/UD ORIGINAL");
                dtTaximetro.Columns.Add("PRECIO CAMBIO");
                dtTaximetro.Columns.Add("PS Corrección N");
                dtTaximetro.Columns.Add("PS Corrección U");
                dtTaximetro.Columns.Add("FECHA CAMBIO");
                dtTaximetro.Columns.Add("CAMBIO");
                dtTaximetro.Columns.Add("TIPO ARTICULO");
                dtTaximetro.Columns.Add("SUPERFICIE");
                dtTaximetro.Columns.Add("COSTE SUPERFICIE");
                dtTaximetro.Columns.Add("PRECIO CONSUMIBLE");
                dtTaximetro.Columns.Add("PRECIO NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("IMPORTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("% AJUSTE");
                dtTaximetro.Columns.Add("AJUSTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("CANTIDAD DIAS TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS DESDE TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS HASTA TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("GASTO VARIABLE");
                dtTaximetro.Columns.Add("IMPORTE GASTO VARIABLE");
                dtTaximetro.Columns.Add("GASTO FIJO BU");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO BU");
                dtTaximetro.Columns.Add("GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("FECHA_CALCULADA");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER GASTOS PATIO");
                dtTaximetro.Columns.Add("VENTA ENTREGA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION");
                dtTaximetro.Columns.Add("VENTA ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA GASTOS PATIO");
                dtTaximetro.Columns.Add("PRECIO GASTOS PATIO");
                dtTaximetro.Columns.Add("FECHA PRECIO GASTOS PATIO");

                // gastos variables oficina
                int mesPresupuestoValido = 0;
                decimal porcentajeGastoAdmministrativoVariable = 0;
                decimal porcentajeGastoComercialVariable = 0;
                decimal porcentajeMaximoTotalFacturacion = 0;
                System.Data.DataTable dtDatosGastosOficina;
                System.Data.DataTable dtGastosOficina = new System.Data.DataTable();
                dtGastosOficina.Columns.Add("CAPITULO");
                dtGastosOficina.Columns.Add("ITEM");
                dtGastosOficina.Columns.Add("MES PRESUPUESTO VALIDO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO COMERCIAL");
                dtGastosOficina.Columns.Add("PORCENTAJE MAXIMO TOTAL FACTURACON");
                dtGastosOficina.Columns.Add("TOTAL ANUAL");
                dtGastosOficina.Columns.Add("TOTAL ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("VAR ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("GASTOS ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("TOTAL COMERCIAL");
                dtGastosOficina.Columns.Add("VAR COMERCIAL");
                dtGastosOficina.Columns.Add("GASTOS COMERCIAL");
                dtGastosOficina.Columns.Add("TOTAL FACTURACION");
                dtGastosOficina.Columns.Add("MAX FACTURACION");
                dtGastosOficina.Columns.Add("IMPORTE");
                dtGastosOficina.Columns.Add("COSTE DT");
                dtGastosOficina.Columns.Add("GASTOS DT");
                //decimal totalAnual = 0;
                //decimal totalAdministrativo = 0;
                //decimal varAdministrativo = 0;
                //decimal totalComercial = 0;
                //decimal varComercial = 0;
                //decimal costeDT = 0;
                //int preciosEnCero = 0;

                // gastos variables patio
                decimal clasificarRepararDirecto;
                decimal clasificarRepararIndirecto;
                decimal clasificarDirecto;
                decimal clasificarIndirecto;
                decimal repararDirecto;
                decimal repararIndirecto;
                decimal entrega = 0;
                decimal devolucion = 0;
                decimal naviera = 0;
                decimal precioGastosPatio = 0;

                decimal pesoCapitulo = 0;
                decimal pesoTotal = 0;
                decimal coeficienteNuevo = 0;
                decimal coeficienteUsado = 0;
                decimal coeficienteUsar = 0;
                //decimal coeficienteMixto = 0;
                string tipoArticulo = "";
                decimal porcentajeCosteMaterialNuevo = 0;
                decimal costeFenolicoNuevoEstandar = 0;
                decimal costeFenolicoNuevoEspecial = 0;

                decimal importeCosteMaterialNuevo = 0;
                decimal importeCosteMaterialFenolico = 0;

                DateTime fechaPrecio = DateTime.Now;
                decimal gastosFijosBUAlquiler = 0;
                decimal gastosFijosBUVenta = 0;
                decimal gastosFijosCentralesAlquiler = 0;
                decimal gastosFijosCentralesVenta = 0;

                bool metersInvoicing = false;
                string productType = "";
                bool calcularPorSuperficie = false;
                decimal superficie = 0;
                decimal costeSuperficie = 0;
                string articulosConfiguracion = "";
                decimal taximetroNoConsumible = 0;
                decimal taximetroConsumible = 0;
                decimal bonificacionTaximetroConsumible = 0;
                decimal precioTaximetroNoConsumible = 0;
                decimal precioTaximetroConsumible = 0;
                string tabla = "";
                string IDCapitulo = "";
                string campo = "";
                int dias = 0;
                int diasxMes = 0;
                int diasDiferencia = 0;
                int diasRestar = 0;
                DateTime fechaPrecios;
                bool hayPrecio = false;
                bool primeraVez = true;
                int lineaCapitulo;
                int lineaProducto;
                System.Data.DataTable dtArticulos;
                System.Data.DataTable dtGastosPatio;
                DataRow[] filaEncontrada;
                DataRow[] filaEncontradaFenolico;
                string articulos = "";
                string articulosCambio = "";
                decimal precioCoste = 0;

                decimal importeGastosPatioEntregaDevolucionVentas = 0;
                decimal importeGastosPatioEntregaDevolucionAlquiler = 0;
                decimal importeGastosPatioClasificacionReparacionAlquiler = 0;

                decimal importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                decimal importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;

                decimal importeFacturacionAlquilerCapitulos = 0;
                decimal importeCosteTaximetroNoConsumibleCapitulos = 0;
                decimal importeCosteTaximetroConsumibleCapitulos = 0;
                decimal importeCosteBonificacionTaximetroConsumibleCapitulos = 0;
                decimal importeFacturacionVentaCapitulos = 0;
                decimal importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeFacturacionVentFenolicoNuevoCapitulos = 0;
                decimal importeFacturacionVentaUneCifCapitulos = 0;
                decimal importeFacturacionVentaMontajesCapitulos = 0;
                decimal importeFacturacionVentaProductoCapitulos = 0;
                decimal importeCosteVentaCapitulos = 0;
                decimal importeGastosFijosBUVentaCapitulos = 0;
                decimal importeGastosFijosBUAlquilerCapitulos = 0;
                decimal importeGastosFijosCentralesVentaCapitulos = 0;
                decimal importeGastosFijosCentralesAlquilerCapitulos = 0;
                decimal importeFacturacionVentaOtrosServiciosCapitulos = 0;
                decimal importeCosteVentaOtrosServiciosCapitulos = 0;

                decimal importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;

                decimal importeCosteVentaFenolicoNuevoCapitulos = 0;
                decimal importeCosteVentaNuevoCapitulos = 0;
                decimal importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                decimal importeCosteVentaUneCifCapitulos = 0;
                decimal importeGastosVariablesVentaUneCifCapitulos = 0;
                decimal importeGastosFijosBUVentaUneCifCapitulos = 0;
                decimal importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                decimal importeCosteVentaMontajesCapitulos = 0;
                decimal importeGastosVariablesVentaMontajesCapitulos = 0;
                decimal importeGastosFijosBUVentaMontajesCapitulos = 0;
                decimal importeGastosFijosCentralesVentaMontajesCapitulos = 0;

                tablaOfertas.AxdEntity_SalesQuotationTable[] axdEntity_SalesQuotationTables;
                tablaOfertas.AxdEntity_SalesQuotationTable axdEntity_SalesQuotationTable;
                tablaOfertas.AxdEntity_SalesQuotationLine[] axdEntity_SalesQuotationLines;
                tablaOfertas.AxdEntity_SalesQuotationLine axdEntity_SalesQuotationLine;

                lblVersionUtilizada.Text = "";
                imgWarning.Visible = true;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";
              
                horaTotal_1 = DateTime.Now;
                System.Collections.IEnumerator enumerator_1;
                fechaPrecios = new DateTime();

                // CABECERA
                decimal importeAlquiler = 0;
                decimal importeVenta = 0;
                decimal importePorte = 0;
                decimal importePorte_TR001 = 0;
                decimal importeCosteTaximetroNoConsumible = 0;
                decimal importeCosteTaximetroConsumible = 0;
                decimal importeCosteVenta = 0;
                decimal importeCostePorte = 0;
                decimal importeMargenAlquiler = 0;
                decimal importeMargenVenta = 0;
               
                numeroRandom = rnd.Next();
                numeroRandom = rnd.Next();
                usuario = User.Identity.Name.ToString() + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();
                if (User.Identity.Name.ToString() == "")
                    usuario = "diana" + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();


                horaLlamada_1 = DateTime.Now;
                dondeVa = "SalesQuotationMasterTable";
                tablaOfertas.CallContext contexto_1 = new tablaOfertas.CallContext();
                contexto_1.Company = empresa;

                tablaOfertas.QueryCriteria criterio_1 = new tablaOfertas.QueryCriteria();
                criterio_1.CriteriaElement = new tablaOfertas.CriteriaElement[1];

                criterio_1.CriteriaElement[0] = new tablaOfertas.CriteriaElement();
                criterio_1.CriteriaElement[0].FieldName = "QuotationId";
                criterio_1.CriteriaElement[0].DataSourceName = "SalesQuotationMasterTable";
                criterio_1.CriteriaElement[0].Operator = tablaOfertas.Operator.Equal;
                criterio_1.CriteriaElement[0].Value1 = numero;

                tablaOfertas.SalesQuotationsServiceClient proxy_1 = new tablaOfertas.SalesQuotationsServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;
                tablaOfertas.AxdSalesQuotations axdTablaOfertas_1 = proxy_1.find(contexto_1, criterio_1);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                horaProcesar_1 = DateTime.Now;
                if (axdTablaOfertas_1.SalesQuotationMasterTable is null)
                {
                    proxy_1.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO se ha encontrado la oferta indicada";
                    return;
                }
                else
                {
                    enumerator_1 = axdTablaOfertas_1.SalesQuotationMasterTable.GetEnumerator();
                    dtArticulos = new System.Data.DataTable();
                    dtGastosPatio = new System.Data.DataTable();
                   
                    while (enumerator_1.MoveNext())
                    {
                        dondeVa = "Oferta";
                        tablaOfertas.AxdEntity_SalesQuotationMasterTable axdEntity_SalesQuotationMasterTable = (tablaOfertas.AxdEntity_SalesQuotationMasterTable)enumerator_1.Current;
                        datosGenerales = axdEntity_SalesQuotationMasterTable.QuotationId + " / " + axdEntity_SalesQuotationMasterTable.CustAccount + " / " + axdEntity_SalesQuotationMasterTable.QuotationName + " / " + axdEntity_SalesQuotationMasterTable.MasterObrasId + " // " + axdEntity_SalesQuotationMasterTable.CostCenter + " // " + axdEntity_SalesQuotationMasterTable.CurrencyCode;

                        codigosTransporte = "";
                        calcularCodigosTransporte(ref codigosTransporte, empresa, axdEntity_SalesQuotationMasterTable.Delegation);

                        moneda = axdEntity_SalesQuotationMasterTable.CurrencyCode;
                        masterObra = axdEntity_SalesQuotationMasterTable.MasterObrasId ;

                        if (axdEntity_SalesQuotationMasterTable.SalesRental.ToString().ToUpper() == "SALES")
                            esVenta = true;
                        else
                            esVenta = false;

                        dondeVa = "Recuperar versión a aplicar";
                        localizarVersion(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        // DATOS PANELES
                        dtArticulosPaneles = new DataTable();
                        dtArticulosPaneles = localizarPaneles(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        // DATOS CONFIGURACION
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                        comando = conexion.CreateCommand();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                        comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                        adaptador.Fill(dtTabla);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();
                        dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                        {
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "DÍAS POR MES")
                                diasxMes = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                                diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                                diasRestar = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                                mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                                porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                                porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                                porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);

                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosCentralesAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosCentralesAlquiler = Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100;
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                        }

                        //dondeVa = "Recuperar datos configuracion";
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        //if (cmbVersion.SelectedValue == "")
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        //dr = conexiones.comando.ExecuteReader();

                        //if (dr.HasRows)
                        //{
                        //    while (dr.Read())
                        //    {
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "DÍAS POR MES")
                        //            diasxMes = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                        //            diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                        //            diasRestar = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));

                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                        //            mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                        //            porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                        //            porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                        //            porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);

                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosFijosBUAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosFijosBUVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosFijosBUAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosFijosBUVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosFijosCentralesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosFijosCentralesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosFijosCentralesAlquiler = Convert.ToDecimal(dr["Valor"]) / 100;
                        //                gastosFijosCentralesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //    }
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();

                        // DATOS COSTE TRANSPORTE
                        dondeVa = "Recuperar datos transporte ";
                        decimal valorCostePorte = 0;
                        decimal margenPorte = 0;

                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@unidadMedida", null);
                        //conexiones.comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        //dr = conexiones.comando.ExecuteReader();
                        //if (dr.HasRows)
                        //{
                        //    dr.Read();
                        //    kilometros = Convert.ToDecimal(dr["medida"]);
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();
                       
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@unidadMedida", null);
                        comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        if (dtTabla.Rows.Count > 0)
                            kilometros = Convert.ToDecimal(dtTabla.Rows[0]["medida"]);

                        dondeVa = "Salió de conversion transporte";

                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        //if (kilometros <= 120)
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", "<= 120");
                        //else
                        //    if (kilometros >= 120)
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", "> 120");
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        //if (cmbVersion.SelectedValue == "")
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        //conexiones.comando.Parameters.AddWithValue("@monedaA", moneda);
                        //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                        //dr = conexiones.comando.ExecuteReader();
                        //if (dr.HasRows)
                        //{
                        //    dr.Read();
                        //    dondeVa = "Hay datos transporte " + empresa + " / " + axdEntity_SalesQuotationMasterTable.Delegation.ToString() + " / " + kilometros.ToString();

                        //    valorCostePorte = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //    margenPorte = Convert.ToDecimal(dr["Margen"]) / 100;
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();

                        dondeVa = "ROP_DatosConfiguracionTransporte";
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        if (kilometros <= 120)
                            comando.Parameters.AddWithValue("@distancia", "<= 120");
                        else
                            if (kilometros >= 120)
                            comando.Parameters.AddWithValue("@distancia", "> 120");
                        else
                            comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        comando.Parameters.AddWithValue("@monedaA", moneda);
                        comando.Parameters.AddWithValue("@usuario", usuario);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        dondeVa = "ROP_DatosConfiguracionTransporte salio";
                        if (dtTabla.Rows.Count > 0)
                        {
                            dondeVa = "ROP_DatosConfiguracionTransporte valorCostePorte";
                            valorCostePorte = (Convert.ToDecimal(dtTabla.Rows[0]["Valor"]) / 100);
                            dondeVa = "ROP_DatosConfiguracionTransporte Margen";
                            margenPorte = Convert.ToDecimal(dtTabla.Rows[0]["Margen"]) / 100;
                        }
                        dondeVa = "Salió de ROP_DatosConfiguracionTransporte";

                        axdEntity_SalesQuotationTables = axdEntity_SalesQuotationMasterTable.SalesQuotationTable;

                        // Recoger los artículos de toda la oferta
                        if (axdEntity_SalesQuotationTables is null)
                            datosGenerales = "NO HAY DATOS DE LOS CAPÍTULOS";
                        else
                        {
                            articulos = ";";
                            articulosCambio = ";";
                            articulosConfiguracion = "|";

                            DateTime horaDatosPase1_1 = DateTime.Now;
                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                dondeVa = "recorrer capitulos " + capitulo.ToString();
                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];

                                axdEntity_SalesQuotationLines = axdEntity_SalesQuotationTable.SalesQuotationLine;

                                if (axdEntity_SalesQuotationLines is null)
                                    datosGenerales = "NO HAY DATOS DE LAS LÍNEAS";
                                else
                                {
                                    for (lineaProducto = 0; lineaProducto < axdEntity_SalesQuotationLines.Length; lineaProducto++)
                                    {

                                        dondeVa = "recorrer productos " + lineaProducto.ToString();
                                        axdEntity_SalesQuotationLine = axdEntity_SalesQuotationLines[lineaProducto];
                                        dondeVa = "recorrer productos + línea de la oferta";

                                        dondeVa = "recorrer productos + recuperar axdEntity_SalesQuotationLine.ItemId";
                                        if (codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) >= 0)
                                            existeTR001 = true;

                                        dondeVa = "recorrer productos + recuperar axdEntity_SalesQuotationLine.ItemId -sale-";
                                        // artículos si hay ficha
                                        if (!listaArticulosPedido.Contains(axdEntity_SalesQuotationLine.ItemId.ToString()))
                                        {
                                            dondeVa = "recorrer productos + en listaArticulosPedido";
                                            listaArticulosPedido.Add(axdEntity_SalesQuotationLine.ItemId.ToString());
                                            if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                                                listaFechasPedido.Add(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value));
                                            else
                                                listaFechasPedido.Add(new DateTime());
                                        }

                                        // artículos si no hay ficha
                                        if (!listaArticulosSinFicha.Contains(axdEntity_SalesQuotationLine.ItemId.ToString()))
                                        {
                                            dondeVa = "recorrer productos + en listaArticulosSinFicha";
                                            articulosConfiguracion = articulosConfiguracion + axdEntity_SalesQuotationLine.ItemId.ToString() + "|";
                                            listaArticulosSinFicha.Add(axdEntity_SalesQuotationLine.ItemId.ToString());
                                        }
                                    }
                                    dondeVa = "fin recorrer productos";

                                    // Calculo de la fecha a utilizar
                                    //o   ¿La oferta está asociada a una ficha ?
                                    //	SI:
                                    //•	Fecha base = Fecha base ficha
                                    //•	Consultar tabla BaseDateItemObra
                                    //	NO:
                                    //•	¿Existe cabecera de oferta? (RefQuotationMaster)
                                    //o   NO: Fecha base = Fecha creación capitulo
                                    //o SI: ¿fecha creación capítulo > p1 días fecha creación cabecera?
                                    //	NO: fecha base = fecha creación capitulo
                                    //	SI: fecha base = fecha creación capitulo – p2 días
                                    if (String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                                    {
                                        dondeVa = "no hay ficha";
                                        fechaPrecios = new DateTime();
                                        if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0 && axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString().Length > 0)
                                        {
                                            dias = Math.Abs(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Subtract(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value)).Days);
                                            if (Math.Abs(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Subtract(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value)).Days) > diasDiferencia)
                                            {
                                                fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value).AddDays((-1) * diasRestar);
                                                tabla = "SalesQuotationMasterTable";
                                                IDCapitulo = axdEntity_SalesQuotationTable.QuotationId;
                                                campo = "CreatedDateTime - " + diasRestar.ToString();
                                            }
                                            else
                                            {
                                                fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                                tabla = "SalesQuotationMasterTable";
                                                IDCapitulo = axdEntity_SalesQuotationTable.QuotationId;
                                                campo = "CreatedDateTime";
                                            }
                                        }
                                        else
                                        {
                                            if (axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString().Length > 0)
                                            {
                                                fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                                tabla = "SalesQuotationMasterTable";
                                                IDCapitulo = axdEntity_SalesQuotationTable.QuotationId;
                                                campo = "CreatedDateTime";
                                            }
                                        }

                                        for (lineaCapitulo = 0; lineaCapitulo < listaArticulosSinFicha.Count; lineaCapitulo++)
                                        {
                                            if (String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                                            {
                                                articulos = articulos + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                                            }
                                            articulosCambio = articulosCambio + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                                        }
                                        // Fin calculo de la fecha a utilizar
                                    }
                                }
                            }
                            TimeSpan horaDatosPase1_2 = DateTime.Now.Subtract(horaDatosPase1_1);

                            // Calculo de la fecha a utilizar
                            //o   ¿La oferta está asociada a una ficha ?
                            //	SI:
                            //•	Fecha base = Fecha base ficha
                            //•	Consultar tabla BaseDateItemObra
                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                            {
                                fechaPrecios = new DateTime();
                                fechaPrecios = DateTime.Now;
                                dondeVa = "fecha base ficha artículo:entró";
                                fechaBaseFichaArticulo(ref listaOfertas, ref listaFechasOferta, ref listaArticulosPedido, ref listaFechasPedido, empresa, axdEntity_SalesQuotationMasterTable.ObraId.ToString(), diasDiferencia, diasRestar);
                                dondeVa = "fecha base ficha artículo: salió";

                                tabla = "fechaBaseFichaArticulo";
                                IDCapitulo = "Ficha " + axdEntity_SalesQuotationMasterTable.ObraId;
                                campo = "fechaBaseFichaArticulo";

                                articulos = ";";
                                articulosCambio = ";";
                                for (lineaCapitulo = 0; lineaCapitulo < listaArticulosPedido.Count; lineaCapitulo++)
                                {
                                    articulos = articulos + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                                    articulosCambio = articulosCambio + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";

                                    if (listaFechasPedido.ElementAt(lineaCapitulo) < fechaPrecios)
                                        fechaPrecios = listaFechasPedido.ElementAt(lineaCapitulo);
                                }
                            }

                            if (fechaPrecios != new DateTime())
                            {
                                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                                conexion = new SqlConnection(strConexion);
                                conexion.Open();
                                comando = conexion.CreateCommand();
                                comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                                comando.CommandType = CommandType.StoredProcedure;
                                comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                                comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                                comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                                comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                                comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                                comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                                comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                                comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                                comando.ExecuteNonQuery();
                                conexion.Close();

                                //conexiones.crearConexion();
                                //conexiones.comando = conexiones.conexion.CreateCommand();
                                //conexiones.comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                                //conexiones.comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                                //conexiones.comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                                //conexiones.comando.ExecuteNonQuery();
                                //conexiones.conexion.Close();
                                primeraVez = false;

                                dondeVa = "localizar precios artículos";

                                dtArticulos = localizarPreciosArticulos(empresa, axdEntity_SalesQuotationMasterTable.Delegation.ToString(), articulos, moneda, articulosCambio, "", usuario);
                                hayPrecio = true;
                            }

                            DateTime horaDatosConfigurados_1 = DateTime.Now;
                            //filaValores = dtValores.NewRow();
                            //filaValores[dtValores_ETIQUETA] = "VALIDAR " + empresa + " // " + usuario;
                            //filaValores[dtValores_CONCEPTO] = articulosConfiguracion;
                            //filaValores[dtValores_IMPORTE] = "0.00";
                            //filaValores[dtValores_PORCENTAJE] = "0.00";
                            //dtValores.Rows.Add(filaValores);
                            //filaValores = null;

                            dtGastosPatio = gastosPatio(empresa, articulos, fechaPrecios, moneda, usuario);

                            TimeSpan horaDatosConfigurados_2 = DateTime.Now.Subtract(horaDatosConfigurados_1);
                            DateTime horaDatosPase2_1 = DateTime.Now;
                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                dondeVa = "* recorrer capitulos " + capitulo.ToString();

                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];
                                axdEntity_SalesQuotationLines = axdEntity_SalesQuotationTable.SalesQuotationLine;

                                if (axdEntity_SalesQuotationLines is null)
                                    datosGenerales = "NO HAY DATOS DE LAS LÍNEAS";
                                else
                                {
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];

                                    if (axdEntity_SalesQuotationTable.QuotationTitle is null)
                                        tituloCapitulo = "";
                                    else
                                        tituloCapitulo = " / " + axdEntity_SalesQuotationTable.QuotationTitle.ToString();


                                    //importePorte_TR001 = 0;
                                    //importeCostePorte = 0;
                                    importePorte = 0;

                                    importeFacturacionAlquilerCapitulos = 0;
                                    importeFacturacionVentaCapitulos = 0;
                                    importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                                    importeFacturacionVentFenolicoNuevoCapitulos = 0;
                                    importeFacturacionVentaUneCifCapitulos = 0;
                                    importeFacturacionVentaMontajesCapitulos = 0;
                                    importeFacturacionVentaProductoCapitulos = 0;
                                    importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                                    importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                                    importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                                    importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;
                                    importeFacturacionVentaOtrosServiciosCapitulos = 0;
                                    importeCosteVentaOtrosServiciosCapitulos = 0;

                                    importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                                    importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                                    importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                                    importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;
                                    importeCosteVentaFenolicoNuevoCapitulos = 0;
                                    importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                                    importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                                    importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                                    importeCosteVentaUneCifCapitulos = 0;
                                    importeGastosVariablesVentaUneCifCapitulos = 0;
                                    importeGastosFijosBUVentaUneCifCapitulos = 0;
                                    importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                                    importeCosteVentaMontajesCapitulos = 0;
                                    importeGastosVariablesVentaMontajesCapitulos = 0;
                                    importeGastosFijosBUVentaMontajesCapitulos = 0;
                                    importeGastosFijosCentralesVentaMontajesCapitulos = 0;

                                    importeGastosFijosBUAlquilerCapitulos = 0;
                                    importeGastosFijosBUVentaCapitulos = 0;

                                    importeGastosFijosCentralesAlquilerCapitulos = 0;
                                    importeGastosFijosCentralesVentaCapitulos = 0;

                                    importeCosteVentaCapitulos = 0;
                                    importeCosteTaximetroNoConsumibleCapitulos = 0;
                                    importeCosteTaximetroConsumibleCapitulos = 0;
                                    importeCosteBonificacionTaximetroConsumibleCapitulos = 0;


                                    // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                                    //dtDatosConfiguracion = new System.Data.DataTable();
                                    horaDatosConfigurados_3 = DateTime.Now;
                                    //conexiones.crearConexion();
                                    //conexiones.comando = conexiones.conexion.CreateCommand();
                                    //conexiones.comando.CommandText = "ROP_DatosConfiguracion";
                                    //conexiones.comando.CommandTimeout = 240000;
                                    //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                    //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                    //conexiones.comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                                    //if (cmbVersion.SelectedValue == "")
                                    //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                                    //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                    //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                                    //else
                                    //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                                    //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                                    //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                    //conexiones.comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                                    //adaptadorDatosConfiguracion = new SqlDataAdapter(conexiones.comando);
                                    //adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                                    //adaptadorDatosConfiguracion.Dispose();
                                    //conexiones.comando.Dispose();
                                    //conexiones.conexion.Close();
                                    //conexiones.conexion.Dispose();

                                    dondeVa = "ROP_DatosConfiguracion";
                                    dtDatosConfiguracion = new System.Data.DataTable();
                                    horaDatosConfigurados_3 = DateTime.Now;
                                    conexion = new SqlConnection(strConexion);
                                    conexion.Open();
                                    comando = conexion.CreateCommand();
                                    comando.CommandText = "ROP_DatosConfiguracion";
                                    comando.CommandTimeout = 240000;
                                    comando.CommandType = CommandType.StoredProcedure;
                                    comando.Parameters.AddWithValue("@empresa", empresa);
                                    comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                                    if (cmbVersion.SelectedValue == "")
                                        comando.Parameters.AddWithValue("@CFG_ID", null);
                                    else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                        comando.Parameters.AddWithValue("@CFG_ID", null);
                                    else
                                        comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                                    comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                                    comando.Parameters.AddWithValue("@moneda", moneda);
                                    comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                                    adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                                    adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                                    adaptadorDatosConfiguracion.Dispose();
                                    comando.Dispose();
                                    conexion.Close();
                                    conexion.Dispose();
                                    horaDatosConfigurados_4 = DateTime.Now.Subtract(horaDatosConfigurados_3);

                                    pesoCapitulo = 0;
                                    importePorte_TR001 = 0;
                                    hayTR001 = false;

                                    for (int producto = 0; producto < axdEntity_SalesQuotationLines.Length; producto++)
                                    {
                                        dondeVa = "* recorrer productos " + producto.ToString();

                                        axdEntity_SalesQuotationLine = axdEntity_SalesQuotationLines[producto];

                                        if (codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) >= 0)
                                            hayTR001 = true;

                                        DataRow oItemTaximetro = dtTaximetro.NewRow();
                                        oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty).ToString("#,##0.00");
                                        taximetroNoConsumible = 0;
                                        taximetroConsumible = 0;
                                        bonificacionTaximetroConsumible = 0;
                                        precioTaximetroNoConsumible = 0;
                                        precioTaximetroConsumible = 0;
                                        costeSuperficie = 0;
                                        superficie = 0;
                                        calcularPorSuperficie = false;
                                        metersInvoicing = false;
                                        productType = "";
                                        tipoServicio = "";

                                        precioCoste = 0;
                                        if (hayPrecio)
                                        {
                                            dondeVa = "buscar precio dataset";
                                            filaEncontrada = dtArticulos.Select("Articulo = '" + axdEntity_SalesQuotationLine.ItemId.Trim().ToString() + "'");
                                            if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) == -1)
                                            {
                                                salvarIndicencia(empresa, "OFERTA", axdEntity_SalesQuotationLine.ItemId.ToString(), "No hay PS del artículo.");

                                                imgWarning.Visible = true;
                                                lblMensajeError.Visible = true;
                                                lblMensajeError.Text = "(PED_1) No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'";

                                                oItemResultados = dtResultados.NewRow();
                                                oItemResultados["TIPO"] = "OFERTA // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                                oItemResultados["EMPRESA"] = empresa;
                                                oItemResultados["NUMERO"] = numero;
                                                oItemResultados["ERROR"] = "(PED_1) No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'";
                                                dtResultados.Rows.Add(oItemResultados);
                                                oItemResultados = null;
                                                //return;
                                            }
                                            foreach (DataRow fila in filaEncontrada)
                                            {
                                                dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Precio"])))
                                                {
                                                    precioCoste = Convert.ToDecimal(fila["Precio"]);
                                                    oItemTaximetro[COL_DATA_PRECIO_CAMBIO] = Convert.ToDecimal(fila["Precio"]).ToString("#,##0.00");
                                                }
                                                dondeVa = "fecha dataset // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Fecha"])))
                                                    fechaPrecio = Convert.ToDateTime(fila["Fecha"]);

                                                dondeVa = "Precio original // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["PrecioOriginal"])))
                                                    oItemTaximetro[COL_DATA_PRECIO_ORIGINAL] = Convert.ToDecimal(fila["PrecioOriginal"]).ToString("#,##0.00");
                                                dondeVa = "Fecha cambio // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["FechaCambio"])))
                                                    oItemTaximetro[COL_DATA_FECHA_CAMBIO] = Convert.ToDateTime(fila["FechaCambio"]).ToString("dd/MM/yyyy");
                                                dondeVa = "Cambio // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Cambio"])))
                                                    oItemTaximetro[COL_DATA_CAMBIO] = Convert.ToDecimal(fila["Cambio"]).ToString("#,##0.000000");
                                            }
                                        }

                                        // gastos variables patio
                                        clasificarRepararDirecto = 0;
                                        clasificarRepararIndirecto = 0;
                                        clasificarDirecto = 0;
                                        clasificarIndirecto = 0;
                                        repararDirecto = 0;
                                        repararIndirecto = 0;
                                        entrega = 0;
                                        devolucion = 0;
                                        naviera = 0;

                                        filaEncontrada = dtGastosPatio.Select("ProductId = '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'");
                                        foreach (DataRow fila in filaEncontrada)
                                        {
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["Entrega"])))
                                                entrega = Convert.ToDecimal(fila["Entrega"]);
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                                devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                                naviera = Convert.ToDecimal(fila["Naviera"]);

                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarReparar"])))
                                            {
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararDirecto"])))
                                                    clasificarRepararDirecto = Convert.ToDecimal(fila["ClasificarRepararDirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararIndirecto"])))
                                                    clasificarRepararIndirecto = Convert.ToDecimal(fila["ClasificarRepararIndirecto"]);
                                            }
                                            else
                                            {
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarDirecto"])))
                                                    clasificarDirecto = Convert.ToDecimal(fila["ClasificarDirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarIndirecto"])))
                                                    clasificarIndirecto = Convert.ToDecimal(fila["ClasificarIndirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararDirecto"])))
                                                    repararDirecto = Convert.ToDecimal(fila["RepararDirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararIndirecto"])))
                                                    repararIndirecto = Convert.ToDecimal(fila["RepararIndirecto"]);
                                            }
                                            precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                        }

                                        // recuperar datos de configuración del datatable
                                        dondeVa = "";
                                        listaBonificacionesDesde.Clear();
                                        listaBonificacionesHasta.Clear();
                                        listaBonificacionesValor.Clear();
                                        diasDesdeTaxNoConsumible = 0;
                                        diasHastaTaxNoConsumible = 0;
                                        pesoArticulo = 0;
                                        filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'");
                                        if (filaEncontrada.Count() == 0)
                                        {
                                            oItemResultados = dtResultados.NewRow();
                                            oItemResultados["TIPO"] = "OFERTA // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                            oItemResultados["EMPRESA"] = empresa;
                                            oItemResultados["NUMERO"] = numero;
                                            oItemResultados["ERROR"] = "No se han localizado datos de configuración para '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "' // Usuario: " + usuario + "  //  artículos: " + articulosConfiguracion; ;
                                            dtResultados.Rows.Add(oItemResultados);
                                            oItemResultados = null;
                                        }
                                        foreach (DataRow fila in filaEncontrada)
                                        {
                                            dondeVa = "encontró configuracion dataset // " + axdEntity_SalesQuotationLine.ItemId.ToString() + " // ";

                                            dondeVa = "Peso del artículo";
                                            pesoArticulo = Convert.ToDecimal(fila["WeightVolumeKg"]);
                                            dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                                tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                                            dondeVa = "encontró configuracion dataset // Coste superficie";
                                            if (Convert.ToString(fila["Concepto"]) == "Coste superficie")
                                            {
                                                cambio = Convert.ToDecimal(fila["Cambio"]);
                                                costeSuperficie = Convert.ToDecimal(fila["Valor"]) * cambio;
                                            }
                                            dondeVa = "encontró configuracion dataset // Taxímetro consumible";
                                            if (Convert.ToString(fila["Concepto"]) == "Taxímetro consumible")
                                            {
                                                taximetroConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                                dondeVa = "encontró configuracion dataset // Desde Bonificacion";
                                                listaBonificacionesDesde.Add(Convert.ToInt32(fila["Desde"]));
                                                dondeVa = "encontró configuracion dataset // Hasta Bonificacion";
                                                listaBonificacionesHasta.Add(Convert.ToInt32(fila["Hasta"]));
                                                dondeVa = "encontró configuracion dataset // Ajuste Bonificacion";
                                                listaBonificacionesValor.Add(Convert.ToDecimal(fila["Ajuste"]));

                                                calcularPorSuperficie = false;
                                                dondeVa = "encontró configuracion dataset // Valorar";
                                                superficie = 0;
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Valorar"])))
                                                    if (Convert.ToString(fila["Valorar"]).ToUpper() == "SUPERFICIE")
                                                    {
                                                        calcularPorSuperficie = true;
                                                        dondeVa = "encontró configuracion dataset // Superficie";
                                                        superficie = Convert.ToDecimal(fila["Superficie"]);
                                                    }
                                            }
                                            dondeVa = "encontró configuracion dataset // Tax no consumible";
                                            diasDesdeTaxNoConsumible = 0;
                                            diasHastaTaxNoConsumible = 0;
                                            if (Convert.ToString(fila["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                                            {
                                                dondeVa = "encontró configuracion dataset // Valor tax no consumible";
                                                taximetroNoConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                                diasDesdeTaxNoConsumible = Convert.ToInt32(fila["Desde"]);
                                                diasHastaTaxNoConsumible = Convert.ToInt32(fila["Hasta"]);
                                            }

                                            dondeVa = "encontró configuracion dataset // Meters";
                                            metersInvoicing = Convert.ToBoolean(fila["MetersInvoicing"]);
                                            dondeVa = "encontró configuracion dataset // Tipo producto";
                                            productType = Convert.ToString(fila["ProductTypeName_es"]);

                                            dondeVa = "encontró configuracion dataset // Correcion PS Nuevo";
                                            if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Nuevo")
                                                coeficienteNuevo = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Correcion PS Usado";
                                            if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Usado")
                                                coeficienteUsado = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Correcion PS servicio";
                                            //if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Servicio")
                                            //    coeficienteServicio = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Tipo artículo " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            tipoArticulo = Convert.ToString(fila["TipoArticulo"]);

                                            dondeVa = "encontró configuracion dataset // Porcentaje coste material nuevo " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            // Fenólico / Nuevo
                                            if (Convert.ToString(fila["Concepto"]) == "Porcentaje coste material nuevo")
                                                porcentajeCosteMaterialNuevo = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Canon fenólico nuevo panel estándar " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel estándar")
                                            {
                                                cambio = Convert.ToDecimal(fila["Cambio"]);
                                                costeFenolicoNuevoEstandar = Convert.ToDecimal(fila["Valor"]) * cambio;
                                            }
                                            dondeVa = "encontró configuracion dataset // Canon fenólico nuevo panel especial " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel especial")
                                            {
                                                cambio = Convert.ToDecimal(fila["Cambio"]);
                                                costeFenolicoNuevoEspecial = Convert.ToDecimal(fila["Valor"]) * cambio;
                                            }
                                        }

                                        dondeVa = "salio configuracion dataset";

                                        dondeVa = "Artículo nuevo/usado";

                                        importeCosteMaterialNuevo = 0;
                                        importeCosteMaterialFenolico = 0;

                                        if (tipoArticulo == "NUEVO")
                                        {
                                            coeficienteUsar = coeficienteNuevo;
                                            oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteNuevo).ToString("#,##0.00");

                                            importeCosteMaterialNuevo = (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * precioCoste * porcentajeCosteMaterialNuevo);
                                        }
                                        //if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                        //{
                                        //    coeficienteUsar = coeficienteServicio;
                                        //    oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteServicio).ToString("#,##0.00");
                                        //}
                                        if (tipoArticulo == "USADO")
                                        {
                                            coeficienteUsar = coeficienteUsado;
                                            oItemTaximetro[COL_DATA_PRECIO_CORRECION_USADO] = (precioCoste * coeficienteUsado).ToString("#,##0.00");
                                        }

                                        dondeVa = "Guarda datos taxímetro";
                                        oItemTaximetro[COL_DATA_FECHA_DOC] = axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString();
                                        oItemTaximetro[COL_DATA_FECHA_CAPITULO] = axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString();
                                        oItemTaximetro[COL_DATA_CAPITULO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        oItemTaximetro[COL_DATA_ITEM] = axdEntity_SalesQuotationLine.ItemId.ToString();
                                        oItemTaximetro[COL_DATA_TIPO_ITEM] = tipoArticulo;
                                        oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = 0;
                                        oItemTaximetro[COL_DATA_IMPORTE_VENTA] = 0;

                                        oItemTaximetro[COL_DATA_PRECIO] = precioCoste.ToString("#,##0.00");
                                        oItemTaximetro[COL_DATA_FECHA] = fechaPrecio.ToString("dd/MM/yyyy");
                                        oItemTaximetro[COL_DATA_TIPO_CAPITULO] = axdEntity_SalesQuotationTable.SalesRental.ToString().ToUpper();
                                        oItemTaximetro[COL_DATA_PRECIO_GASTOS_PATIO] = precioGastosPatio.ToString("##0.00");

                                        dondeVa = "Fenólico";
                                        //if (tipoArticulo == "MIXTO")
                                        //{
                                        filaEncontradaFenolico = dtArticulosPaneles.Select("Itemid = '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'");
                                        foreach (DataRow filaFenolico in filaEncontradaFenolico)
                                        {
                                            if (Convert.ToBoolean(filaFenolico["Estandar"]))
                                                importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * superficie * costeFenolicoNuevoEstandar);
                                            else
                                                importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * superficie * costeFenolicoNuevoEspecial);
                                        }
                                        importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + importeCosteMaterialFenolico;
                                        //}


                                        // gastos oficina
                                        //DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                                        //oItemGastosOficina["CAPITULO"] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        //oItemGastosOficina["ITEM"] = axdEntity_SalesQuotationLine.ItemId.ToString();
                                        //oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                                        //oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                                        //oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                                        //oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                                        //oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                                        //oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                                        //oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                                        //oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                                        //oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                                        //oItemGastosOficina["IMPORTE VENTA"] = "0.00";
                                        //oItemGastosOficina["IMPORTE ALQUILER"] = "0.00";
                                        //oItemGastosOficina["IMPORTE"] = "0.00";

                                        if (axdEntity_SalesQuotationTable.SalesRental.ToString().ToUpper() == "SALES")
                                        {
                                            dondeVa = "VENTAS";

                                            dondeVa = "VENTAS: Gastos variables";
                                            importeGastosPatioEntregaDevolucionVentas = 0;
                                            importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio;
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                    importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio;
                                            importeGastosVariablesEntregaDevolucionVentaCapitulos = importeGastosVariablesEntregaDevolucionVentaCapitulos + importeGastosPatioEntregaDevolucionVentas;

                                            oItemTaximetro[COL_DATA_VENTAS_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_VENTAS_DEVOLUCION] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_ENTREGA_NAVIERA] = "0.00";
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                    oItemTaximetro[COL_DATA_VENTAS_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");

                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_DIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_INDIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_DIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_INDIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_REPARAR_DIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_REPARAR_INDIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_GASTOS_PATIO] = importeGastosPatioEntregaDevolucionVentas.ToString("##0.00");

                                            dondeVa = "VENTAS: Guardar coeficiente nuevo/usado";
                                            if (tipoArticulo == "NUEVO")
                                                oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteNuevo.ToString("##0.00");
                                            //if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                            //    oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteServicio.ToString("S ##0.00");
                                            if (tipoArticulo == "USADO")
                                                oItemTaximetro[COL_DATA_COEFICIENTE_USADO] = coeficienteUsado.ToString("##0.00");

                                            dondeVa = "VENTAS: Calcular importe venta";
                                            importeVenta = importeVenta + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                            importeFacturacionVentaCapitulos = importeFacturacionVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);

                                            // mail 29/07/2021 Nacho: configuración manda sobre tipo producto
                                            if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                            {
                                                importeFacturacionVentaDepartamentoTecnicoCapitulos = importeFacturacionVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                // COSTEC:\Diana\Proyectos\Alsina ROP Informe\ROP_Informe\App_Start\
                                                //lblMensajeError.Visible = true;
                                                //lblMensajeError.Text = "Cantidad: " + axdEntity_SalesQuotationLine.SalesQty.ToString() + "// Precio coste: " + precioCoste.ToString() + " // Coeficiente a usar: " + coeficienteUsar.ToString();
                                                importeCosteVentaDepartamentoTecnicoCapitulos = importeCosteVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste * coeficienteUsar;
                                                // Gastos variables
                                                //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = importeGastosFijosBUVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            else if (tipoServicio.ToUpper() == "MONTAJES")
                                            {
                                                importeFacturacionVentaMontajesCapitulos = importeFacturacionVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                // COSTE
                                                importeCosteVentaMontajesCapitulos = importeCosteVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * precioCoste;
                                                // Gastos variables
                                                //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaMontajesCapitulos = importeGastosFijosBUVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaMontajesCapitulos = importeGastosFijosCentralesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            else
                                            {
                                                if (productType.Trim().ToUpper() == "SERVICIO")
                                                {
                                                    dondeVa = "VENTAS: Servicio";
                                                    // Fenólico
                                                    if (axdEntity_SalesQuotationLine.CanonFenolico.HasValue && axdEntity_SalesQuotationLine.CanonFenolico != 0)
                                                    {
                                                        //if (chkBoxFenolico.Checked)
                                                            importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.CanonFenolico));
                                                        // COSTE
                                                        //importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.CanonFenolico); 
                                                        // Gastos variables
                                                        //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                        //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + importeGastosPatioVentas;
                                                        // Gastos fijos BU
                                                        importeGastosFijosBUVentaFenolicoNuevoCapitulos = importeGastosFijosBUVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                        // Gastos fijos centrales
                                                        importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = importeGastosFijosCentralesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                                    }
                                                    // SVP/CIF
                                                    else if (axdEntity_SalesQuotationLine.CanonImport.HasValue && axdEntity_SalesQuotationLine.CanonImport != 0)
                                                    {
                                                        importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                        // COSTE
                                                        importeCosteVentaUneCifCapitulos = importeCosteVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste) * (Convert.ToDecimal(axdEntity_SalesQuotationLine.Canon) / 100));
                                                        // Gastos variables
                                                        //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                        //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + importeGastosPatioVentas;
                                                        // Gastos fijos BU
                                                        importeGastosFijosBUVentaUneCifCapitulos = importeGastosFijosBUVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                        // Gastos fijos centrales
                                                        importeGastosFijosCentralesVentaUneCifCapitulos = importeGastosFijosCentralesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                                    }
                                                    // OTROS SERVICIOS
                                                    else
                                                    {
                                                        importeFacturacionVentaOtrosServiciosCapitulos = importeFacturacionVentaOtrosServiciosCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                        // COSTE
                                                        importeCosteVentaOtrosServiciosCapitulos = importeCosteVentaOtrosServiciosCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste));
                                                    }
                                                    oItemTaximetro[COL_DATA_IMPORTE_VENTA_SERVICIO] = Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount).ToString("#,##0.00");
                                                }
                                            }
                                            if (productType.Trim().ToUpper() != "SERVICIO")
                                            {
                                                dondeVa = "VENTAS: Producto";
                                                importeFacturacionVentaProductoCapitulos = importeFacturacionVentaProductoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                oItemTaximetro[COL_DATA_IMPORTE_VENTA_PRODUCTO] = Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount).ToString("#,##0.00");

                                                dondeVa = "Coste venta";
                                                importeCosteVentaCapitulos = importeCosteVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste * coeficienteUsar;

                                                // Gastos variables
                                                //dondeVa = "VENTAS: Gastos variables";
                                                //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + importeGastosPatioVentas;

                                                // Gastos fijos BU
                                                dondeVa = "VENTAS: Gastos fijos BU";
                                                importeGastosFijosBUVentaCapitulos = importeGastosFijosBUVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);

                                                // Gastos fijos centrales
                                                dondeVa = "VENTAS: Gastos fijos centrales";
                                                importeGastosFijosCentralesVentaCapitulos = importeGastosFijosCentralesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                            }

                                            dondeVa = "VENTAS: Datos en datatble taximetro";
                                            oItemTaximetro[COL_DATA_IMPORTE_VENTA] = Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUVenta.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesVenta.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta).ToString("#,##0.00");
                                        }

                                        if (axdEntity_SalesQuotationTable.SalesRental.ToString().ToUpper() == "RENTAL")
                                        {
                                            // SVP/CIF
                                            if (axdEntity_SalesQuotationLine.CanonImport.HasValue && axdEntity_SalesQuotationLine.CanonImport != 0)
                                                importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesPrice) * Convert.ToDecimal(axdEntity_SalesQuotationLine.Canon)) / 100);

                                            //if (chkBoxFenolico.Checked && axdEntity_SalesQuotationLine.CanonFenolico.HasValue && axdEntity_SalesQuotationLine.CanonFenolico != 0)
                                            if (axdEntity_SalesQuotationLine.CanonFenolico.HasValue && axdEntity_SalesQuotationLine.CanonFenolico != 0)
                                                importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.CanonFenolico));

                                            dondeVa = "ALQUILER";
                                            importeAlquiler = importeAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada));
                                            importeFacturacionAlquilerCapitulos = importeFacturacionAlquilerCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada);

                                            // Gastos variables
                                            dondeVa = "ALQUILER: Gastos variables";
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                            {
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                {
                                                    importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio;
                                                    importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * naviera * precioGastosPatio);
                                                }
                                                else
                                                {
                                                    importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio;
                                                    importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * precioGastosPatio);

                                                }
                                            }
                                            else
                                            {
                                                importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio;
                                                importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * precioGastosPatio);

                                            }
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;

                                            importeGastosPatioClasificacionReparacionAlquiler = 0;
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararDirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararIndirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarDirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarIndirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararDirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararIndirecto * precioGastosPatio);
                                            importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosPatioClasificacionReparacionAlquiler;

                                            oItemTaximetro[COL_DATA_ALQUILER_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * precioGastosPatio).ToString("##0.00");
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                            {
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                {
                                                    oItemTaximetro[COL_DATA_ALQUILER_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");
                                                    oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * naviera * precioGastosPatio).ToString("##0.00");
                                                }
                                            }
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararDirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararIndirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarDirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarIndirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararDirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararIndirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_GASTOS_PATIO] = (importeGastosPatioEntregaDevolucionAlquiler + importeGastosPatioClasificacionReparacionAlquiler).ToString("##0.00");

                                            //importeAlquilerGastosVariables = importeAlquilerGastosVariables + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosVariablesAlquiler);
                                            //importeGastosVariablesAlquilerCapitulos = importeGastosVariablesAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosVariablesAlquiler);

                                            // Gastos fijos BU
                                            dondeVa = "ALQUILER: gastos fijos BU";
                                           importeAlquilerGastosFijosBU = importeAlquilerGastosFijosBU + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosBUAlquiler);
                                            importeGastosFijosBUAlquilerCapitulos = importeGastosFijosBUAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosBUAlquiler);

                                            // Gastos fijos centrales
                                            dondeVa = "ALQUILER: gastos centrales";
                                            importeAlquilerGastosFijosCentrales = importeAlquilerGastosFijosCentrales + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosCentralesAlquiler);
                                            importeGastosFijosCentralesAlquilerCapitulos = importeGastosFijosCentralesAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosCentralesAlquiler);

                                            dondeVa = "ALQUILER: Datos en datatble taximetro";
                                            oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_EURO_DIA] = Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia).ToString("#,##0.0000");
                                            oItemTaximetro[COL_DATA_DURACION_ESTIMADA] = Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUAlquiler.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosBUAlquiler).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesAlquiler.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosCentralesAlquiler).ToString("#,##0.00");

                                            dondeVa = "Calcular datos taxímetros";
                                            if (taximetroConsumible == 0)
                                            {
                                                precioTaximetroNoConsumible = precioCoste;
                                            }
                                            else
                                            {
                                                if (calcularPorSuperficie)
                                                {
                                                    if (!metersInvoicing)
                                                    {
                                                        precioTaximetroNoConsumible = precioCoste; //(precioCoste - (costeSuperficie * superficie));
                                                        precioTaximetroConsumible = 0;
                                                    }
                                                    else
                                                    {
                                                        precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                                        precioTaximetroConsumible = (costeSuperficie * superficie);
                                                    }
                                                }
                                                else
                                                {
                                                    precioTaximetroNoConsumible = 0;
                                                    precioTaximetroConsumible = precioCoste;
                                                }
                                            }

                                            dondeVa = "Calcular datos taxímetros: superficie";
                                            if (calcularPorSuperficie)
                                            {
                                                if (!metersInvoicing)
                                                    oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE / NO meters invoicing";
                                                else
                                                    oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE";
                                            }
                                            else
                                                oItemTaximetro[COL_DATA_TIPO] = "";

                                            oItemTaximetro[COL_DATA_TAX_CONSUMIBLE] = taximetroConsumible.ToString("#,##0.0000");
                                            oItemTaximetro[COL_DATA_TAX_NO_CONSUMIBLE] = taximetroNoConsumible.ToString("#,##0.0000");
                                            oItemTaximetro[COL_DATA_SUPERFICIE] = superficie.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_COSTE_SUPERFICIE] = (costeSuperficie * superficie).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_PRECIO_CONSUMIBLE] = precioTaximetroConsumible.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_PRECIO_NO_CONSUMIBLE] = precioTaximetroNoConsumible.ToString("#,##0.00");

                                            importeCosteTaximetroConsumible = importeCosteTaximetroConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) / diasxMes;
                                            importeCosteTaximetroConsumibleCapitulos = importeCosteTaximetroConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) / diasxMes;

                                            dondeVa = "Empieza recorrido bonificación";
                                            oItemTaximetro[COL_DATA_AJUSTE] = "";

                                            duracion = Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada);
                                            diasCalculados = 0;
                                            diasMultiplicar = 0;
                                            while (diasCalculados < duracion)
                                            {
                                                for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                                {
                                                    if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                                    {
                                                        if (duracion - diasCalculados >= diasxMes)
                                                            diasMultiplicar = diasxMes;
                                                        else
                                                            diasMultiplicar = duracion - diasCalculados;
                                                        bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                        oItemTaximetro[COL_DATA_AJUSTE] = oItemTaximetro[COL_DATA_AJUSTE] + "Bonif. (" + bonificacionTaximetroConsumible.ToString("#,##0.0000") + ") * Dias(" + diasMultiplicar.ToString() + ") // ";
                                                        if (oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE].ToString() == "")
                                                            oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes).ToString("#,##0.00");
                                                        else
                                                            oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = (Convert.ToDecimal(oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE]) + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes)).ToString("#,##0.00");
                                                        importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                        importeCosteBonificacionTaximetroConsumibleCapitulos = importeCosteBonificacionTaximetroConsumibleCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                    }
                                                }
                                                diasCalculados = diasCalculados + diasxMes;
                                            }
                                            dondeVa = "Fin recorrido bonificación";

                                            oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_DESDE] = diasDesdeTaxNoConsumible.ToString();
                                            oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_HASTA] = diasHastaTaxNoConsumible.ToString();
                                            oItemTaximetro[COL_DATA_IMPORTE_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) / diasxMes).ToString("#,##0.00");

                                            if (Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada) <= diasHastaTaxNoConsumible)
                                                diasTaximetroNoConsumibleCalcular = Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada) - diasDesdeTaxNoConsumible;
                                            if (Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada) >= diasHastaTaxNoConsumible)
                                                diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;

                                            importeCosteTaximetroNoConsumible = importeCosteTaximetroNoConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                            importeCosteTaximetroNoConsumibleCapitulos = importeCosteTaximetroNoConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                            oItemTaximetro[COL_DATA_IMPORTE_NO_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes).ToString("#,##0.00");
                                        }

                                        if ((importeCosteMaterialNuevo != 0) && (importeCosteMaterialFenolico != 0))
                                            importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + (importeCosteMaterialNuevo - importeCosteMaterialFenolico);
                                        else
                                            importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + importeCosteMaterialNuevo;

                                        dtTaximetro.Rows.Add(oItemTaximetro);
                                        oItemTaximetro = null;

                                        pesoCapitulo = pesoCapitulo + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));
                                        pesoTotal = pesoTotal + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));

                                        if (codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) >= 0)
                                        {
                                            dondeVa = "VALIDAR TRANSPORTE TR-001";
                                            importePorte_TR001 = importePorte_TR001 + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                        }

                                        importePorte = importePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));
                                        importeCostePorte = importeCostePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));

                                        //dtGastosOficina.Rows.Add(oItemGastosOficina);
                                        //oItemGastosOficina = null;
                                    }

                                    dondeVa = "FIN RECORRIDO CAPÍTULO";

                                    importeMargenAlquiler = importeAlquiler - (importeCosteTaximetroNoConsumible + importeCosteTaximetroConsumible - importeCosteBonificacionTaximetroConsumible);
                                    importeMargenVenta = importeVenta - importeCosteVenta;
                                 
                                    // INICIO PORTES POR CAPÍTULO
                                    //if (chkBoxPortes.Checked && axdEntity_SalesQuotationMasterTable.Delegation.ToString().ToUpper() != "EX" && axdEntity_SalesQuotationMasterTable.GestionPorte == tablaOfertas.AxdEnum_GestionPorte.Alsina && (axdEntity_SalesQuotationMasterTable.TipoPorte == tablaOfertas.AxdEnum_TipoPorte.Todo || axdEntity_SalesQuotationMasterTable.TipoPorte == tablaOfertas.AxdEnum_TipoPorte.SoloEntrega))
                                    //{
                                        if (hayTR001 && importePorte_TR001 > 0)
                                        {
                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = importePorte_TR001.ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            importeCostePorte = (-1) * (importePorte_TR001 * (1 - margenPorte));
                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = importeCostePorte.ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            //oItemResultados = dtResultados.NewRow();
                                            //oItemResultados["TIPO"] = "OFERTA - COSTE PORTES // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                            //oItemResultados["EMPRESA"] = empresa;
                                            //oItemResultados["NUMERO"] = numero;
                                            //oItemResultados["COSTE"] = importeCostePorte.ToString("#,##0.00");
                                            //dtResultados.Rows.Add(oItemResultados);
                                            //oItemResultados = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importePorte_TR001 + importeCostePorte).ToString("#,##0.00");
                                            if (((importePorte_TR001) / (1 - margenPorte)) == 0)
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                            else
                                                filaValores[dtValores_PORCENTAJE] = (((importePorte_TR001 + importeCostePorte) / importePorte_TR001) * 100).ToString("#,##0.00");
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = ((importePorte_TR001 / (1 - margenPorte)) - importePorte_TR001).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            if (esVenta)
                                            {
                                                //filaValores = dtValores.NewRow();
                                                //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                                //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesVenta).ToString("#,##0.00");
                                                //filaValores[dtValores_PORCENTAJE] = "0.00";
                                                //dtValores.Rows.Add(filaValores);
                                                //filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUVenta).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesVenta).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;
                                            }
                                            else
                                            {
                                                //filaValores = dtValores.NewRow();
                                                //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                                //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesAlquiler).ToString("#,##0.00");
                                                //filaValores[dtValores_PORCENTAJE] = "0.00";
                                                //dtValores.Rows.Add(filaValores);
                                                //filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUAlquiler).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;
                                            }
                                        }

                                        if (!existeTR001)
                                        {
                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            if (1 - margenPorte != 0)
                                                filaValores[dtValores_IMPORTE] = ((importePorte * 100) / (1 - margenPorte)).ToString("#,##0.00");
                                            else
                                                filaValores[dtValores_IMPORTE] = "0.00";
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = ((-1) * importePorte * 100).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            //oItemResultados = dtResultados.NewRow();
                                            //oItemResultados["TIPO"] = "OFERTA - COSTE PORTES // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                            //oItemResultados["EMPRESA"] = empresa;
                                            //oItemResultados["NUMERO"] = numero;
                                            //oItemResultados["COSTE"] = ((-1) * importePorte * 100).ToString("#,##0.00");
                                            //dtResultados.Rows.Add(oItemResultados);
                                            //oItemResultados = null;
                                            
                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                            if (((importePorte * 100) / (1 - margenPorte)) == 0)
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                            else
                                                filaValores[dtValores_PORCENTAJE] = ((((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)) / ((importePorte * 100) / (1 - margenPorte))).ToString("#,##0.00");
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            if ((1 - margenPorte) != 0)
                                            {
                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;
                                            }

                                            if (esVenta)
                                            {
                                                //filaValores = dtValores.NewRow();
                                                //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                                //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesVenta).ToString("#,##0.00");
                                                //filaValores[dtValores_PORCENTAJE] = "0.00";
                                                //dtValores.Rows.Add(filaValores);
                                                //filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUVenta).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesVenta).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;
                                            }
                                            else
                                            {
                                                //filaValores = dtValores.NewRow();
                                                //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                                //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesAlquiler).ToString("#,##0.00");
                                                //filaValores[dtValores_PORCENTAJE] = "0.00";
                                                //dtValores.Rows.Add(filaValores);
                                                //filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUAlquiler).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;

                                                filaValores = dtValores.NewRow();
                                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                                filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                                dtValores.Rows.Add(filaValores);
                                                filaValores = null;
                                            }
                                        }
                                    //}
                                    // FIN PORTES POR CAPÍTULO

                                    if (importeGastosVariablesEntregaDevolucionAlquilerCapitulos != 0 || importeGastosVariablesEntregaDevolucionVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosVariablesEntregaDevolucionVentaCapitulos)).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos != 0 || importeGastosVariablesClaisificacionReparacionVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosVariablesClaisificacionReparacionVentaCapitulos)).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    dondeVa = "Importes/cantidades venta 1";
                                    if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaDepartamentoTecnicoCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE DEPARTAMENTO TECNICO // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaDepartamentoTecnicoCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos) / importeFacturacionVentaDepartamentoTecnicoCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_DEPARTAMENTO_TECNICO";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0 || importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos - importeGastosVariablesVentaDepartamentoTecnicoCapitulos - importeGastosFijosBUVentaDepartamentoTecnicoCapitulos - importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "FENÓLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentFenolicoNuevoCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE FENOLICO NUEVO // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentFenolicoNuevoCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos) / importeFacturacionVentFenolicoNuevoCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaFenolicoNuevoCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_FENOLICO_NUEVO";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0 || importeGastosVariablesVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos - importeGastosVariablesVentaFenolicoNuevoCapitulos - importeGastosFijosBUVentaFenolicoNuevoCapitulos - importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "SVP_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaUneCifCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE UNE CIF // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaUneCifCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos) / importeFacturacionVentaUneCifCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaOtrosServiciosCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "OTROS_SERVICIOS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaOtrosServiciosCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaOtrosServiciosCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_OTROS_SERVICIOS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE OTROS SERVICIOS // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaOtrosServiciosCapitulos != 0 || importeCosteVentaOtrosServiciosCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_OTROS_SERVICIOS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaOtrosServiciosCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos) / importeFacturacionVentaOtrosServiciosCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }


                                    //if (importeGastosVariablesVentaUneCifCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_UNE_CIF";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaUneCifCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0 || importeGastosVariablesVentaUneCifCapitulos != 0 || importeGastosFijosBUVentaUneCifCapitulos != 0 || importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos - importeGastosVariablesVentaUneCifCapitulos - importeGastosFijosBUVentaUneCifCapitulos - importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaMontajesCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE MONTAJES // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaMontajesCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos) / importeFacturacionVentaMontajesCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaMontajesCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_MONTAJES";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaMontajesCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0 || importeGastosVariablesVentaMontajesCapitulos != 0 || importeGastosFijosBUVentaMontajesCapitulos != 0 || importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos - importeGastosVariablesVentaMontajesCapitulos - importeGastosFijosBUVentaMontajesCapitulos - importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaProductoCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta productos 1";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 2";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE VENTAS DIRECTAS // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 3";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaProductoCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaCapitulos != 0)
                                    //{
                                    //    dondeVa = "Importes/cantidades venta 4";
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_VENTAS_DIRECTAS";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                                    //{
                                    //    dondeVa = "Importes/cantidades venta 7";
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_DIRECTAS";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    dondeVa = "ALQUILER 2";

                                    dondeVa = "Importes/cantidades alquiler 1";
                                    if (importeFacturacionAlquilerCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ALQUILERES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionAlquilerCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteTaximetroNoConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 2";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "TAXIMETRO_NO_CONSUMIBLE";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroNoConsumibleCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - TAXIMETRO NO CONSUMIBLE // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteTaximetroNoConsumibleCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeCosteTaximetroConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 3";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "TAXIMETRO_CONSUMIBLE";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - TAXIMETRO CONSUMIBLE // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 4";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "AJUSTE_TAXIMETRO_CONSUMIBLE";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeCosteBonificacionTaximetroConsumibleCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - AJUSTE TAXIMETRO CONSUMIBLE // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = importeCosteBonificacionTaximetroConsumibleCapitulos.ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionAlquilerCapitulos != 0 || importeCosteTaximetroNoConsumibleCapitulos != 0 || importeCosteTaximetroConsumibleCapitulos != 0 || importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_ALQUILER";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionAlquilerCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos) / importeFacturacionAlquilerCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    dtDatosConfiguracion.Dispose();
                                }
                            }
                            TimeSpan horaDatosPase2_2 = DateTime.Now.Subtract(horaDatosPase2_1);
                        }
                    }

                    // CALCULAR GASTOS OFICINA 
                    //totalAnual = 0;
                    //totalAdministrativo = 0;
                    //varAdministrativo = 0;
                    //totalComercial = 0;
                    //varComercial = 0;
                    //costeDT = 0;
                    //preciosEnCero = 0;
                    //dtDatosGastosOficina = gastosOficina(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable);
                    //foreach (DataRow fila in dtDatosGastosOficina.Rows)
                    //{
                    //    dondeVa = "encontró precio coste dataset dtDatosGastosOficina";
                    //    totalAnual = Convert.ToDecimal(fila["fact_anual_empresa"]);
                    //    totalAdministrativo = Convert.ToDecimal(fila["total_admin"]);
                    //    varAdministrativo = Convert.ToDecimal(fila["var_admin"]);
                    //    totalComercial = Convert.ToDecimal(fila["total_comerc"]);
                    //    varComercial = Convert.ToDecimal(fila["var_comerc"]);
                    //    costeDT = Convert.ToDecimal(fila["costeDT"]);
                    //    preciosEnCero = Convert.ToInt32(fila["preciosEnCero"]);
                    //}
                    //if (preciosEnCero != 0)
                    //{
                    //    salvarIndicencia(empresa, "OFERTA", "", "En el cálculo de coste gastos oficina DT hay precios en cero.");
                    //    imgWarning.Visible = true;
                    //    lblMensajeError.Visible = true;
                    //    lblMensajeError.Text = "En el cálculo de coste gastos oficina DT hay precios en cero.";
                    //}

                    //decimal total = 0;
                    //decimal totalAlquiler = 0;
                    //decimal totalVenta = 0;
                    //decimal totalPortes = 0;
                    //decimal costeDTPorratear = 0;
                    //decimal totalPortesLinea = 0;
                    //string tituloAnterior = "";
                    //decimal totalGastosOficinaDToCapitulo = 0;
                    //decimal totalGastosOficinaAdministrativoCapitulo = 0;
                    //decimal totalGastosOficinaComercialCapitulo = 0;

                    //totalAlquiler = dtValores.AsEnumerable()
                    //        .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES")
                    //        .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    ////totalVenta = dtValores.AsEnumerable()
                    ////       .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "VENTAS_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                    ////       .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    //totalVenta = dtValores.AsEnumerable()
                    //      .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                    //      .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    //totalPortes = dtValores.AsEnumerable()
                    //      .Where(y => y.Field<string>("ETIQUETA") == "FACTURACION_PORTES")
                    //      .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    ////if (chkBoxPortes.Checked)
                    //    total = totalAlquiler + totalVenta + totalPortes;
                    ////else
                    ////    total = totalAlquiler + totalVenta;

                    //if (total * porcentajeMaximoTotalFacturacion > costeDT)
                    //    costeDTPorratear = costeDT;
                    //else
                    //    costeDTPorratear = total * porcentajeMaximoTotalFacturacion;

                    //tituloCapitulo = "";
                    //foreach (DataRow fila in dtTaximetro.Rows)
                    //{
                    //    if (fila["CAPITULO"].ToString() != tituloAnterior)
                    //    {
                    //        if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                    //        {
                    //            dondeVa = "Gastos Oficina Administrativo y Comercial";
                    //            filaValores = dtValores.NewRow();
                    //            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                    //            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                    //            filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                    //            filaValores[dtValores_PORCENTAJE] = "0.00";
                    //            dtValores.Rows.Add(filaValores);
                    //            filaValores = null;
                    //        }

                    //        if (totalGastosOficinaDToCapitulo != 0)
                    //        {
                    //            dondeVa = "Gastos Oficina Tecnico";
                    //            filaValores = dtValores.NewRow();
                    //            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                    //            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                    //            filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                    //            filaValores[dtValores_PORCENTAJE] = "0.00";
                    //            dtValores.Rows.Add(filaValores);
                    //            filaValores = null;
                    //            tituloAnterior = fila["CAPITULO"].ToString();
                    //        }

                    //        totalGastosOficinaAdministrativoCapitulo = 0;
                    //        totalGastosOficinaComercialCapitulo = 0;
                    //        totalGastosOficinaDToCapitulo = 0;
                    //    }

                    //    tituloAnterior = fila["CAPITULO"].ToString();

                    //    DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                    //    oItemGastosOficina["CAPITULO"] = fila["CAPITULO"].ToString();
                    //    oItemGastosOficina["ITEM"] = fila["ITEM"].ToString();
                    //    oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                    //    oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                    //    oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                    //    oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                    //    oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                    //    oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                    //    oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                    //    oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                    //    oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                    //    oItemGastosOficina["IMPORTE"] = "0.00";

                    //    oItemGastosOficina["TOTAL FACTURACION"] = total.ToString("#,##0.00");
                    //    oItemGastosOficina["MAX FACTURACION"] = (total * porcentajeMaximoTotalFacturacion).ToString("#,##0.00");
                    //    oItemGastosOficina["COSTE DT"] = costeDT.ToString("#,##0.00");

                    //    //if (chkBoxPortes.Checked)
                    //    //{
                    //        if (totalAlquiler + totalVenta != 0)
                    //            totalPortesLinea = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])) * totalPortes) / (totalAlquiler + totalVenta);
                    //        else
                    //            totalPortesLinea = 0;
                    //    //}

                    //    // ADMINISTRACION
                    //    if (totalAnual != 0)
                    //    {
                    //        //if (chkBoxPortes.Checked)
                    //        //{
                    //            // gastos oficina venta
                    //            totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                    //            totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                    //            oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                    //            oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                    //        //}
                    //        //else
                    //        //{
                    //        //    // gastos oficina venta
                    //        //    totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                    //        //    totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                    //        //    oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                    //        //    oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                    //        //}
                    //    }

                    //    // DT
                    //    //if (chkBoxPortes.Checked)
                    //    //{
                    //        oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea).ToString("#,##0.00");
                    //        oItemGastosOficina["GASTOS DT"] = (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total).ToString("#,##0.00");
                    //        totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total);
                    //    //}
                    //    //else
                    //    //{
                    //    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])).ToString("#,##0.00");
                    //    //    oItemGastosOficina["GASTOS DT"] = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) * costeDTPorratear) / total).ToString("#,##0.00");
                    //    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + ((Convert.ToDecimal(oItemGastosOficina["IMPORTE"]) * costeDTPorratear) / total);
                    //    //}

                    //    dtGastosOficina.Rows.Add(oItemGastosOficina);
                    //    oItemGastosOficina = null;
                    //}
                    //if (tituloAnterior != "")
                    //{
                    //    if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                    //    {
                    //        dondeVa = "Gastos Oficina Administrativo y Comercial";
                    //        filaValores = dtValores.NewRow();
                    //        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                    //        filaValores[dtValores_CONCEPTO] = tituloAnterior;
                    //        filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                    //        filaValores[dtValores_PORCENTAJE] = "0.00";
                    //        dtValores.Rows.Add(filaValores);
                    //        filaValores = null;
                    //    }

                    //    if (totalGastosOficinaDToCapitulo != 0)
                    //    {
                    //        dondeVa = "Gastos Oficina Tecnico";
                    //        filaValores = dtValores.NewRow();
                    //        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                    //        filaValores[dtValores_CONCEPTO] = tituloAnterior;
                    //        filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                    //        filaValores[dtValores_PORCENTAJE] = "0.00";
                    //        dtValores.Rows.Add(filaValores);
                    //        filaValores = null;
                    //    }
                    //}

                    dtArticulos.Dispose();
                    dondeVa = "finalizó";
                    proxy_1.Close();
                    horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);

                    listaArticulosSinFicha.Clear();
                    listaArticulosPedido.Clear();
                    listaFechasPedido.Clear();
                    listaOfertas.Clear();
                    listaFechasOferta.Clear();
                }

                hora_2 = DateTime.Now.Subtract(hora_1);
                horaProcesar_2 = DateTime.Now.Subtract(horaProcesar_1);

                //dondeVa = "nombre del doc";
                //nombreInforme = Server.MapPath("~/Ficheros excel/" + cmbConcepto.Text + "_" + numero + "_" + DateTime.Now.ToString("yyyy_MM_dd") + ".xlsx");
                //dondeVa = "nuevo doc";
                //SLDocument sl = new SLDocument();
                //dondeVa = "importar tabla";
                //sl.ImportDataTable(1, 1, dtTaximetro, true);
                //dondeVa = "salvar tabla";
                //sl.SaveAs(nombreInforme);
                //btnAbrirExcel.Visible = true;

                ////conexiones.crearConexion();
                ////conexiones.comando = conexiones.conexion.CreateCommand();
                ////conexiones.comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                ////conexiones.comando.CommandTimeout = 240000;
                ////conexiones.comando.CommandType = CommandType.StoredProcedure;
                ////conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                ////conexiones.comando.ExecuteNonQuery();
                ////conexiones.comando.Dispose();
                ////conexiones.conexion.Close();
                ////conexiones.conexion.Dispose();

                //conexion = new SqlConnection(strConexion);
                //conexion.Open();
                //comando = conexion.CreateCommand();
                //comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                //comando.CommandTimeout = 240000;
                //comando.CommandType = CommandType.StoredProcedure;
                //comando.Parameters.AddWithValue("@usuario", usuario);
                //comando.ExecuteNonQuery();
                //comando.Dispose();
                //conexion.Close();
                //conexion.Dispose();

                pintarArbol(ref dtValores, false, false);

                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "OFERTA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
               
                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["COSTE"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                //total = dtValores.AsEnumerable()
                //    .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES" || y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "VENTAS_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS" || y.Field<string>("ETIQUETA") == "FACTURACION_PORTES") 
                //    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                //oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                //total = dtValores.AsEnumerable()
                //    .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES")
                //    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                //total = dtValores.AsEnumerable()
                //    .Where(y => y.Field<string>("ETIQUETA") == "FACTURACION_PORTES")
                //    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                //total = dtValores.AsEnumerable()
                //    .Where(y => y.Field<string>("ETIQUETA") == "TAXIMETRO_NO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "ABONO_MPO_TNC" || y.Field<string>("ETIQUETA") == "TAXIMETRO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "AJUSTE_TAXIMETRO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "ABONO_BUEN_TRATO" || y.Field<string>("ETIQUETA") == "ABONO_MPO_TC" || y.Field<string>("ETIQUETA") == "COSTE_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO" || y.Field<string>("ETIQUETA") == "COSTE_VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "COSTE_MPO" || y.Field<string>("ETIQUETA") == "COSTE_CHATARRA" || y.Field<string>("ETIQUETA") == "COSTE_MONTAJES" || y.Field<string>("ETIQUETA") == "COSTE_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "COSTE_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "COSTE_SVP_CIF" || y.Field<string>("ETIQUETA") == "COSTE_OTROS_SERVICIOS" || y.Field<string>("ETIQUETA") == "COSTE_PORTES")
                //    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                //oItemResultados["COSTE"] = total.ToString("#,##0.00");
                //total = dtValores.AsEnumerable()
                //    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_ALQUILER" || y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MARGEN_MONTAJES" || y.Field<string>("ETIQUETA") == "MARGEN_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "MARGEN_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "MARGEN_SVP_CIF" || y.Field<string>("ETIQUETA") == "MARGEN_OTROS_SERVICIOS" || y.Field<string>("ETIQUETA") == "MARGEN_PORTES")
                //    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                //oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = "Usuario: " + usuario;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                //dataResultados.DataSource = null;
                //dataResultados.Columns.Clear();
                //dataResultados.DataSource = dtResultados;
                //dataResultados.DataBind();
                //dataResultados.Visible = true;
            }
            catch (Exception ex)
            {
                hora_2 = DateTime.Now.Subtract(hora_1);
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular oferta // " + dondeVa + " // " + ex.Message;
                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "OFERTA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularPedido(ref DataTable dtResultados, int cual, string empresa, string numero)
        {
            string codigosTransporte = "";
            string dondeVa = "";
            string moneda = "";
            string masterObra = "";
            string nombreFicha = "";
            DateTime hora_1 = default(DateTime);
            TimeSpan hora_2 = default(TimeSpan);
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DateTime horaProcesar_1 = default(DateTime);
            TimeSpan horaProcesar_2 = default(TimeSpan);

            DataTable dtArticulosPaneles;

            List<int> listaBonificacionesDesde = new List<int>();
            List<int> listaBonificacionesHasta = new List<int>();
            List<decimal> listaBonificacionesValor = new List<decimal>();

            decimal importeAlquilerGastosFijosBU = 0;
            decimal importeAlquilerGastosFijosCentrales = 0;
            decimal importeCosteBonificacionTaximetroConsumible = 0;

            DataRow filaValores;
            DataRow oItemResultados;
            List<string> listaArticulosSinFicha = new List<string>();
            List<string> listaArticulosPedido = new List<string>();
            List<DateTime> listaFechasPedido = new List<DateTime>();
            List<string> listaOfertas = new List<string>();
            List<DateTime> listaFechasOferta = new List<DateTime>();

            bool esLiquidacion = false;
            bool esVenta = false;
            System.Data.DataTable dtPedidos = new System.Data.DataTable();
            System.Data.DataTable dtAlbaranes = new System.Data.DataTable();
            System.Data.DataTable dtArticulosLiquidacion = new System.Data.DataTable();

            DateTime horaTotal_1 = default(DateTime);
            DateTime horaTotal_SQL = default(DateTime);
            TimeSpan horaTotal_2 = default(TimeSpan);

            DataTable dtTiempos = new DataTable();
            DataRow oItemTiempo;
            dtTiempos.Columns.Add("CONCEPTO");
            dtTiempos.Columns.Add("TIEMPO");

            decimal kilometros = 0;
            decimal cambio = 1;
            DataRow filaPedidos;
            DataRow filaAlbaranes;
            string articulosLiquidacion = "";
            string AAF = "";
            decimal faltan = 0;
            string obraID = "";

            const int dtPedidosAgrupados_fechaCreacion = 0;
            const int dtPedidosAgrupados_aaf = 1;
            const int dtPedidosAgrupados_articulo = 2;
            const int dtPedidosAgrupados_cantidad = 3;
            const int dtPedidosAgrupados_usado = 4;
            const int dtPedidosAgrupados_mixto = 5;
            const int dtPedidosAgrupados_nuevo = 6;

            const int dtAlbaranes_fecha = 0;
            const int dtAlbaranes_aaf = 1;
            const int dtAlbaranes_itemID = 2;
            const int dtAlbaranes_cantidad = 3;
            const int dtAlbaranes_estado = 4;

            System.Data.DataTable dtValores;
            dtValores = new System.Data.DataTable();
            dtValores.Columns.Add("ETIQUETA");
            dtValores.Columns.Add("CONCEPTO");
            dtValores.Columns.Add("IMPORTE");
            dtValores.Columns.Add("PORCENTAJE");

            try
            {
                string usuario = "";
                var guid = Guid.NewGuid();
                var justNumbers = new String(guid.ToString().Where(Char.IsDigit).ToArray());
                var seed = int.Parse(justNumbers.Substring(0, 4));
                var rnd = new Random(seed);
                int numeroRandom;

                hora_1 = DateTime.Now;
                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();

                SqlConnection conexion;

                SqlDataAdapter adaptador;
                System.Data.DataTable dtTabla = new System.Data.DataTable();
                SqlCommand comando;

                numeroRandom = rnd.Next();
                usuario = User.Identity.Name.ToString() + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();
                if (User.Identity.Name.ToString() == "")
                    usuario = "diana" + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();

                SqlDataAdapter adaptadorDatosConfiguracion;
                System.Data.DataTable dtDatosConfiguracion = new System.Data.DataTable();

                bool hayTR001 = false;
                bool existeTR001 = false;
                int lineasBonificacion;
                int duracion = 0;
                int diasCalculados = 0;
                int diasMultiplicar = 0;
                int diasDesdeTaxNoConsumible = 0;
                int diasHastaTaxNoConsumible = 0;
                int diasTaximetroNoConsumibleCalcular = 0;

                string tipoServicio = "";
                string idCapitulo = "";
                string tituloCapitulo = "";

                dtValores = new System.Data.DataTable();
                dtValores.Columns.Add("ETIQUETA");
                dtValores.Columns.Add("CONCEPTO");
                dtValores.Columns.Add("IMPORTE");
                dtValores.Columns.Add("PORCENTAJE");

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();

                DataTable dtTaximetro;
                dtTaximetro = new DataTable();
                dtTaximetro.Columns.Add("FECHA DOC");
                dtTaximetro.Columns.Add("FECHA CAPITULO");
                dtTaximetro.Columns.Add("CAPITULO");
                dtTaximetro.Columns.Add("TIPO CAPITULO");
                dtTaximetro.Columns.Add("MOVIMIENTO");
                dtTaximetro.Columns.Add("ITEM");
                dtTaximetro.Columns.Add("NUEVO/USADO");
                dtTaximetro.Columns.Add("COEF. NUEVO");
                dtTaximetro.Columns.Add("COEF. USADO");
                dtTaximetro.Columns.Add("CANTIDAD");
                dtTaximetro.Columns.Add("EURO/UD/DIA");
                dtTaximetro.Columns.Add("DURACION ESTIMADA");
                dtTaximetro.Columns.Add("FACT ALQUILER");
                dtTaximetro.Columns.Add("FACT TOTAL VENTA");
                dtTaximetro.Columns.Add("FACT VENTA SERVICIO");
                dtTaximetro.Columns.Add("FACT VENTA PRODUCTO");
                dtTaximetro.Columns.Add("CANTIDAD DIAS");
                dtTaximetro.Columns.Add("FECHA PS");
                dtTaximetro.Columns.Add("PS/UD");
                dtTaximetro.Columns.Add("PS/UD ORIGINAL");
                dtTaximetro.Columns.Add("PRECIO CAMBIO");
                dtTaximetro.Columns.Add("PS Corrección N");
                dtTaximetro.Columns.Add("PS Corrección U");
                dtTaximetro.Columns.Add("FECHA CAMBIO");
                dtTaximetro.Columns.Add("CAMBIO");
                dtTaximetro.Columns.Add("TIPO ARTICULO");
                dtTaximetro.Columns.Add("SUPERFICIE");
                dtTaximetro.Columns.Add("COSTE SUPERFICIE");
                dtTaximetro.Columns.Add("PRECIO CONSUMIBLE");
                dtTaximetro.Columns.Add("PRECIO NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("IMPORTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("% AJUSTE");
                dtTaximetro.Columns.Add("AJUSTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("CANTIDAD DIAS TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS DESDE TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS HASTA TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("GASTO VARIABLE");
                dtTaximetro.Columns.Add("IMPORTE GASTO VARIABLE");
                dtTaximetro.Columns.Add("GASTO FIJO BU");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO BU");
                dtTaximetro.Columns.Add("GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("FECHA_CALCULADA");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER GASTOS PATIO");
                dtTaximetro.Columns.Add("VENTA ENTREGA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION");
                dtTaximetro.Columns.Add("VENTA ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA GASTOS PATIO");
                dtTaximetro.Columns.Add("PRECIO GASTOS PATIO");

                dtPedidos.Columns.Add("FECHA_CREACION");
                dtPedidos.Columns.Add("AAF");
                dtPedidos.Columns.Add("ITEM_ID");
                dtPedidos.Columns.Add("SALESQTY");

                dtAlbaranes.Columns.Add("FECHA");
                dtAlbaranes.Columns.Add("AAF");
                dtAlbaranes.Columns.Add("ItemId");
                dtAlbaranes.Columns.Add("Qty");
                dtAlbaranes.Columns.Add("Estado");

                // gastos variables patio
                System.Data.DataTable dtGastosPatio;
                decimal clasificarRepararDirecto;
                decimal clasificarRepararIndirecto;
                decimal clasificarDirecto;
                decimal clasificarIndirecto;
                decimal repararDirecto;
                decimal repararIndirecto;
                decimal entrega = 0;
                decimal devolucion = 0;
                decimal naviera = 0;
                decimal precioGastosPatio = 0;

                decimal importeGastosPatioEntregaDevolucionVentas = 0;
                decimal importeGastosPatioEntregaDevolucionAlquiler = 0;
                decimal importeGastosPatioClasificacionReparacionAlquiler = 0;

                // gastos variables oficina
                int mesPresupuestoValido = 0;
                decimal porcentajeGastoAdmministrativoVariable = 0;
                decimal porcentajeGastoComercialVariable = 0;
                decimal porcentajeMaximoTotalFacturacion = 0;
                System.Data.DataTable dtDatosGastosOficina;
                System.Data.DataTable dtGastosOficina = new System.Data.DataTable();
                dtGastosOficina.Columns.Add("CAPITULO");
                dtGastosOficina.Columns.Add("ITEM");
                dtGastosOficina.Columns.Add("MES PRESUPUESTO VALIDO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO COMERCIAL");
                dtGastosOficina.Columns.Add("PORCENTAJE MAXIMO TOTAL FACTURACON");
                dtGastosOficina.Columns.Add("TOTAL ANUAL");
                dtGastosOficina.Columns.Add("TOTAL ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("VAR ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("GASTOS ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("TOTAL COMERCIAL");
                dtGastosOficina.Columns.Add("VAR COMERCIAL");
                dtGastosOficina.Columns.Add("GASTOS COMERCIAL");
                dtGastosOficina.Columns.Add("TOTAL FACTURACION");
                dtGastosOficina.Columns.Add("MAX FACTURACION");
                dtGastosOficina.Columns.Add("IMPORTE");
                dtGastosOficina.Columns.Add("COSTE DT");
                dtGastosOficina.Columns.Add("GASTOS DT");
                decimal totalAnual = 0;
                decimal totalAdministrativo = 0;
                decimal varAdministrativo = 0;
                decimal totalComercial = 0;
                decimal varComercial = 0;
                decimal costeDT = 0;
                //int preciosEnCero = 0;

                decimal pesoCapitulo = 0;
                decimal pesoTotal = 0;
                decimal coeficienteNuevo = 0;
                decimal coeficienteUsado = 0;
                decimal coeficienteServicio = 0;
                decimal coeficienteUsar = 0;
                decimal coeficienteMixto = 0;
                string tipoArticulo = "";
                decimal porcentajeCosteMaterialNuevo = 0;
                decimal costeFenolicoNuevoEstandar = 0;
                decimal costeFenolicoNuevoEspecial = 0;

                decimal importeCosteMaterialNuevo = 0;
                decimal importeCosteMaterialFenolico = 0;

                DateTime fechaPrecio = DateTime.Now;
                decimal gastosVariablesAlquiler = 0;
                decimal gastosVariablesVenta = 0;
                decimal gastosFijosBUAlquiler = 0;
                decimal gastosFijosBUVenta = 0;
                decimal gastosFijosCentralesAlquiler = 0;
                decimal gastosFijosCentralesVenta = 0;

                bool metersInvoicing = false;
                string productType = "";
                bool calcularPorSuperficie = false;
                decimal superficie = 0;
                decimal costeSuperficie = 0;
                string articulosConfiguracion = "";
                decimal taximetroNoConsumible = 0;
                decimal taximetroConsumible = 0;
                decimal bonificacionTaximetroConsumible = 0;
                decimal precioTaximetroNoConsumible = 0;
                decimal precioTaximetroConsumible = 0;
                string tabla = "";
                string IDCapitulo = "";
                string campo = "";
                int dias = 0;
                int diasxMes = 0;
                int diasDiferencia = 0;
                int diasRestar = 0;
                DateTime fechaPrecios;
                DateTime fechaOfertaPedido;
                bool hayPrecio = false;
                bool primeraVez = true;
                int lineaCapitulo;
                System.Data.DataTable dtArticulos = new System.Data.DataTable();
                DataRow[] filaEncontrada;
                DataRow[] filaEncontradaFenolico;
                string articulos = "";
                string articulosCambio = "";
                decimal precioCoste = 0;
                decimal importeFacturacionAlquilerCapitulos = 0;
                decimal importeCosteTaximetroNoConsumibleCapitulos = 0;
                decimal importeCosteTaximetroConsumibleCapitulos = 0;
                decimal importeCosteBonificacionTaximetroConsumibleCapitulos = 0;
                decimal importeFacturacionVentaCapitulos = 0;
                decimal importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeFacturacionVentFenolicoNuevoCapitulos = 0;
                decimal importeFacturacionVentaUneCifCapitulos = 0;
                decimal importeFacturacionVentaOtrosServiciosCapitulos = 0;
                decimal importeCosteVentaOtrosServiciosCapitulos = 0;
                decimal importeFacturacionVentaMontajesCapitulos = 0;
                decimal importeFacturacionVentaProductoCapitulos = 0;
                decimal importeCosteVentaCapitulos = 0;
                decimal importeGastosVariablesVentaCapitulos = 0;
                decimal importeGastosVariablesAlquilerCapitulos = 0;
                decimal importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                decimal importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;
                decimal importeGastosFijosBUVentaCapitulos = 0;
                decimal importeGastosFijosBUAlquilerCapitulos = 0;
                decimal importeGastosFijosCentralesVentaCapitulos = 0;
                decimal importeGastosFijosCentralesAlquilerCapitulos = 0;

                decimal importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;

                decimal importeCosteVentaFenolicoNuevoCapitulos = 0;
                decimal importeCosteVentaNuevoCapitulos = 0;
                decimal importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                decimal importeCosteVentaUneCifCapitulos = 0;
                decimal importeGastosVariablesVentaUneCifCapitulos = 0;
                decimal importeGastosFijosBUVentaUneCifCapitulos = 0;
                decimal importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                decimal importeCosteVentaMontajesCapitulos = 0;
                decimal importeGastosVariablesVentaMontajesCapitulos = 0;
                decimal importeGastosFijosBUVentaMontajesCapitulos = 0;
                decimal importeGastosFijosCentralesVentaMontajesCapitulos = 0;


                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";
                //txtNombreOferta.Text = "";
                //txtObra.Text = "";
                //txtNombreObra.Text = "";
                //txtCuentaCliente.Text = "";
                //txtMasterObra.Text = "";
                //txtCentroCoste.Text = "";
                //txtMoneda.Text = "";

                horaTotal_1 = DateTime.Now;
              
                System.Collections.IEnumerator enumerator_1;

                // CABECERA
                decimal importeAlquiler = 0;
                decimal importeVenta = 0;
                decimal importePorte = 0;
                decimal importePorte_TR001 = 0;
                decimal importeCosteTaximetroNoConsumible = 0;
                decimal importeCosteTaximetroConsumible = 0;
                decimal importeCosteVenta = 0;
                decimal importeCostePorte = 0;
                decimal importeMargenAlquiler = 0;
                decimal importeMargenVenta = 0;
                decimal margenPorte = 0;

                fechaPrecios = new DateTime();

                horaLlamada_1 = DateTime.Now;
                tablaPedidos.CallContext contexto_1 = new tablaPedidos.CallContext();
                contexto_1.Company = empresa;

                tablaPedidos.QueryCriteria criterio_1 = new tablaPedidos.QueryCriteria();
                criterio_1.CriteriaElement = new tablaPedidos.CriteriaElement[1];

                criterio_1.CriteriaElement[0] = new tablaPedidos.CriteriaElement();
                criterio_1.CriteriaElement[0].FieldName = "SalesID";
                criterio_1.CriteriaElement[0].DataSourceName = "SalesTable";
                criterio_1.CriteriaElement[0].Operator = tablaPedidos.Operator.Equal;
                criterio_1.CriteriaElement[0].Value1 = numero;

                tablaPedidos.SalesOrdersServiceClient proxy_1 = new tablaPedidos.SalesOrdersServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "pedidos";
                tablaPedidos.AxdSalesOrders axdtablaPedidos_1 = proxy_1.find(contexto_1, criterio_1);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                horaProcesar_1 = DateTime.Now;
                if (axdtablaPedidos_1.SalesTable is null)
                {
                    proxy_1.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO se ha encontrado el pedido indicado";
                    return;
                }
                else
                {
                    enumerator_1 = axdtablaPedidos_1.SalesTable.GetEnumerator();
                    dtArticulos = new System.Data.DataTable();
                    dtGastosPatio = new System.Data.DataTable();
                   
                    while (enumerator_1.MoveNext())
                    {
                        dondeVa = "datos generales";
                        fechaPrecios = new DateTime();
                        fechaOfertaPedido = new DateTime();
                        articulos = ";";
                        articulosCambio = ";";
                        articulosConfiguracion = "";

                        tablaPedidos.AxdEntity_SalesTable axdEntity_SalesQuotationMasterTable = (tablaPedidos.AxdEntity_SalesTable)enumerator_1.Current;

                        datosGenerales = axdEntity_SalesQuotationMasterTable.SalesId + " / " + axdEntity_SalesQuotationMasterTable.SalesName + " / " + axdEntity_SalesQuotationMasterTable.CurrencyCode + " / " + axdEntity_SalesQuotationMasterTable.Delegation + " / " + axdEntity_SalesQuotationMasterTable.SalesType;
                        //txtObra.Text = axdEntity_SalesQuotationMasterTable.SalesId;
                        //txtNombreObra.Text = axdEntity_SalesQuotationMasterTable.SalesName;
                        //txtCuentaCliente.Text = axdEntity_SalesQuotationMasterTable.CustAccount;
                        //txtMasterObra.Text = axdEntity_SalesQuotationMasterTable.MasterObrasId;
                        masterObra = axdEntity_SalesQuotationMasterTable.MasterObrasId;
                        //txtCentroCoste.Text = axdEntity_SalesQuotationMasterTable.CostCenter;
                        //txtMoneda.Text = axdEntity_SalesQuotationMasterTable.CurrencyCode;
                        moneda = axdEntity_SalesQuotationMasterTable.CurrencyCode;

                        codigosTransporte = "";
                        calcularCodigosTransporte(ref codigosTransporte, empresa, axdEntity_SalesQuotationMasterTable.Delegation);

                        //if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                        //    cambio = localizarCambio(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value), moneda);
                        //else
                        //    cambio = 1;

                        if (axdEntity_SalesQuotationMasterTable.TipoVenta.ToString().ToUpper() == tablaPedidos.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper())
                        {
                            esLiquidacion = true;
                            // Liquidación por venta
                            if (axdEntity_SalesQuotationMasterTable.SettlementReason.ToString() == "0")
                                esVenta = true;

                            // Liquidación por pérdida MPO
                            if (axdEntity_SalesQuotationMasterTable.SettlementReason.ToString() == "1")
                                esVenta = false;
                        }
                        else
                            esLiquidacion = false;

                        localizarVersion(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        // DATOS PANELES
                        dtArticulosPaneles = new DataTable();
                        dtArticulosPaneles = localizarPaneles(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        //// DATOS CONFIGURACION
                        //horaTotal_SQL = DateTime.Now;
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        //if (cmbVersion.SelectedValue == "")
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        //dr = conexiones.comando.ExecuteReader();
                        //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                        //oItemTiempo = dtTiempos.NewRow();
                        //oItemTiempo[0] = "TIEMPO ROP_DatosConfiguracionGeneral";
                        //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        //dtTiempos.Rows.Add(oItemTiempo);
                        //if (dr.HasRows)
                        //{
                        //    while (dr.Read())
                        //    {
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "DÍAS POR MES")
                        //            diasxMes = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                        //            diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                        //            diasRestar = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));

                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                        //            mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                        //            porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                        //            porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                        //            porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);

                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS VARIABLES")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosVariablesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosVariablesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosVariablesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosVariablesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosFijosBUAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosFijosBUVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosFijosBUAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosFijosBUVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosFijosCentralesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosFijosCentralesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosFijosCentralesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosFijosCentralesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //    }
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();

                        // DATOS CONFIGURACION
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                        comando = conexion.CreateCommand();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                        comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                        adaptador.Fill(dtTabla);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();
                        dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                        {
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "DÍAS POR MES")
                                diasxMes = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                                diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                                diasRestar = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                                mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                                porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                                porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                                porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);

                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosCentralesAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosCentralesAlquiler = Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100;
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                        }

                        // DATOS COSTE TRANSPORTE
                        dondeVa = "Recuperar datos transporte ";
                        decimal valorCostePorte = 0;
                        margenPorte = 0;

                        horaTotal_SQL = DateTime.Now;
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@unidadMedida", null);
                        //conexiones.comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        //dr = conexiones.comando.ExecuteReader();
                        //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                        //oItemTiempo = dtTiempos.NewRow();
                        //oItemTiempo[0] = "TIEMPO ROP_TransporteCambiarAKilometros";
                        //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        //dtTiempos.Rows.Add(oItemTiempo);
                        //if (dr.HasRows)
                        //{
                        //    dr.Read();
                        //    kilometros = Convert.ToDecimal(dr["medida"]);
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@unidadMedida", null);
                        comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                            kilometros = Convert.ToDecimal(dtTabla.Rows[i]["medida"]);
                        dondeVa = "Salió de conversion transporte";

                        horaTotal_SQL = DateTime.Now;
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        //if (kilometros <= 120)
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", "<= 120");
                        //else
                        //    if (kilometros >= 120)
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", "> 120");
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        //if (cmbVersion.SelectedValue == "")
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        //conexiones.comando.Parameters.AddWithValue("@monedaA", moneda);
                        //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                        //dr = conexiones.comando.ExecuteReader();
                        //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                        //oItemTiempo = dtTiempos.NewRow();
                        //oItemTiempo[0] = "TIEMPO ROP_DatosConfiguracionTransporte";
                        //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        //dtTiempos.Rows.Add(oItemTiempo);
                        //if (dr.HasRows)
                        //{
                        //    dr.Read();
                        //    dondeVa = "Hay datos transporte " + empresa + " / " + axdEntity_SalesQuotationMasterTable.Delegation.ToString() + " / " + kilometros.ToString();
                        //    valorCostePorte = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //    margenPorte = Convert.ToDecimal(dr["Margen"]) / 100;
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        if (kilometros <= 120)
                            comando.Parameters.AddWithValue("@distancia", "<= 120");
                        else
                            if (kilometros >= 120)
                            comando.Parameters.AddWithValue("@distancia", "> 120");
                        else
                            comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        comando.Parameters.AddWithValue("@monedaA", moneda);
                        comando.Parameters.AddWithValue("@usuario", usuario);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                        {
                            valorCostePorte = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            margenPorte = Convert.ToDecimal(dtTabla.Rows[i]["Margen"]) / 100;
                        }
                        dondeVa = "Salió de transporte";

                        tablaPedidos.AxdEntity_SalesLine[] axdEntity_SalesQuotationTables = axdEntity_SalesQuotationMasterTable.SalesLine;
                        tablaPedidos.AxdEntity_SalesLine axdEntity_SalesQuotationTable;

                        if (axdEntity_SalesQuotationTables is null)
                            datosGenerales = "NO HAY DATOS DE LOS CAPÍTULOS";
                        else
                        {
                            DateTime horaDatosPase1_1 = DateTime.Now;
                            dondeVa = "Capítulos";
                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];

                                // artículos si hay ficha
                                if (!listaArticulosPedido.Contains(axdEntity_SalesQuotationTable.ItemId.ToString()))
                                {
                                    listaArticulosPedido.Add(axdEntity_SalesQuotationTable.ItemId.ToString());
                                    //if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                                    if (axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString().Length > 0)
                                        listaFechasPedido.Add(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value));
                                    else
                                        listaFechasPedido.Add(new DateTime());
                                }

                                // artículos si no hay ficha
                                if (!listaArticulosSinFicha.Contains(axdEntity_SalesQuotationTable.ItemId.ToString()))
                                {
                                    articulosConfiguracion = articulosConfiguracion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                    listaArticulosSinFicha.Add(axdEntity_SalesQuotationTable.ItemId.ToString());
                                }
                            }
                            TimeSpan horaDatosPase1_2 = DateTime.Now.Subtract(horaDatosPase1_1);

                            // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                            dondeVa = "ROP_DatosConfiguracion";
                            dtDatosConfiguracion = new System.Data.DataTable();
                            conexion = new SqlConnection(strConexion);
                            conexion.Open();
                            comando = conexion.CreateCommand();
                            comando.CommandText = "ROP_DatosConfiguracion";
                            comando.CommandTimeout = 240000;
                            comando.CommandType = CommandType.StoredProcedure;
                            comando.Parameters.AddWithValue("@empresa", empresa);
                            comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                            if (cmbVersion.SelectedValue == "")
                                comando.Parameters.AddWithValue("@CFG_ID", null);
                            else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                comando.Parameters.AddWithValue("@CFG_ID", null);
                            else
                                comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                            comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                            comando.Parameters.AddWithValue("@moneda", moneda);
                            comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                            adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                            adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                            adaptadorDatosConfiguracion.Dispose();
                            comando.Dispose();
                            conexion.Close();
                            conexion.Dispose();

                            if (empresa == "MA1" && numero == "535000003211")
                                lblMensajeError.Text = articulosConfiguracion;

                            // Calculo de la fecha a utilizar
                            //o   ¿La oferta está asociada a una ficha ?
                            //	SI:
                            //•	Fecha base = Fecha base ficha
                            //•	Consultar tabla BaseDateItemObra
                            //	NO:
                            //•	¿Existe cabecera de oferta? (RefQuotationMaster)
                            //o   NO: Fecha base = Fecha creación capitulo
                            //o SI: ¿fecha creación capítulo > p1 días fecha creación cabecera?
                            //	NO: fecha base = fecha creación capitulo
                            //	SI: fecha base = fecha creación capitulo – p2 días
                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                            {
                                fechaPrecios = new DateTime();
                                fechaPrecios = DateTime.Now;
                                fechaBaseFichaArticulo(ref listaOfertas, ref listaFechasOferta, ref listaArticulosPedido, ref listaFechasPedido, empresa, axdEntity_SalesQuotationMasterTable.ObraId.ToString(), diasDiferencia, diasRestar);
                                tabla = "fechaBaseFichaArticulo";
                                IDCapitulo = "Ficha " + axdEntity_SalesQuotationMasterTable.ObraId;
                                campo = "fechaBaseFichaArticulo";

                                articulos = ";";
                                articulosCambio = ";";
                                for (lineaCapitulo = 0; lineaCapitulo < listaArticulosPedido.Count; lineaCapitulo++)
                                {
                                    articulos = articulos + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                                    articulosCambio = articulosCambio + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";

                                    if (listaFechasPedido.ElementAt(lineaCapitulo) < fechaPrecios)
                                        fechaPrecios = listaFechasPedido.ElementAt(lineaCapitulo);
                                }
                            }
                            else
                            {
                                if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.QuotationId))
                                {
                                    fechaOferta(ref fechaOfertaPedido, empresa, axdEntity_SalesQuotationMasterTable.QuotationId.ToString());
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[0];
                                    if (fechaOfertaPedido != new DateTime() && axdEntity_SalesQuotationTable.CreatedDateTime.ToString().Length > 0)
                                    {
                                        if (Math.Abs(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Subtract(fechaOfertaPedido).Days) > diasDiferencia)
                                        {
                                            fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value).AddDays((-1) * diasRestar);
                                            tabla = "Pedido-SalesQuotationTable";
                                            campo = "CreatedDateTime - " + diasRestar.ToString();
                                        }
                                        else
                                        {
                                            fechaPrecios = fechaOfertaPedido;
                                            tabla = "Pedido-SalesQuotationTable";
                                            campo = "CreatedDateTime";
                                        }
                                    }
                                    else
                                    {
                                        if (axdEntity_SalesQuotationTable.CreatedDateTime.ToString().Length > 0)
                                        {
                                            fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                            tabla = "Pedido-SalesQuotationTable";
                                            campo = "CreatedDateTime";
                                        }
                                    }
                                }
                                else
                                {
                                    fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value);
                                    tabla = "Pedido-SalesQuotationMasterTable";
                                    campo = "CreatedDateTime";
                                }
                            }

                            for (lineaCapitulo = 0; lineaCapitulo < listaArticulosSinFicha.Count; lineaCapitulo++)
                            {
                                if (String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                                    articulos = articulos + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                                articulosCambio = articulosCambio + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                            }
                            // Fin calculo de la fecha a utilizar                            

                            dondeVa = "sp_ROP_FechaBaseOfertaIncluir";
                            if (fechaPrecios != new DateTime())
                            {
                                horaTotal_SQL = DateTime.Now;
                                //conexiones.crearConexion();
                                //conexiones.comando = conexiones.conexion.CreateCommand();
                                //conexiones.comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                                //conexiones.comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                                //conexiones.comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                                //conexiones.comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                                //conexiones.comando.ExecuteNonQuery();
                                //conexiones.conexion.Close();
                                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                                conexion = new SqlConnection(strConexion);
                                conexion.Open();
                                comando = conexion.CreateCommand();
                                comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                                comando.CommandType = CommandType.StoredProcedure;
                                comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                                comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                                comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                                comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                                comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                                comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                                comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                                comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                                comando.ExecuteNonQuery();
                                conexion.Close();
                                horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                                oItemTiempo = dtTiempos.NewRow();
                                oItemTiempo[0] = "TIEMPO sp_ROP_FechaBaseOfertaIncluir";
                                oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                                dtTiempos.Rows.Add(oItemTiempo);
                                primeraVez = false;

                                dondeVa = "localizar precios artículos";
                                dtArticulos = localizarPreciosArticulos(empresa, axdEntity_SalesQuotationMasterTable.Delegation.ToString(), articulos, moneda, articulosCambio, "", usuario);
                                hayPrecio = true;
                            }

                            //dtGastosPatio = gastosPatio(articulos, Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Year, txtMoneda.Text, usuario);
                            dtGastosPatio = gastosPatio(empresa, articulos, fechaPrecios, moneda, usuario);

                            DateTime horaDatosConfigurados_1 = DateTime.Now;
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "VALIDAR " + empresa + " // " + usuario;
                            filaValores[dtValores_CONCEPTO] = articulosConfiguracion;
                            filaValores[dtValores_IMPORTE] = "0.00";
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            //datosSQL.datosConfigurados(cmbEmpresa.SelectedItem.ToString(), articulosConfiguracion, usuario);
                            TimeSpan horaDatosConfigurados_2 = DateTime.Now.Subtract(horaDatosConfigurados_1);
                            DateTime horaDatosPase2_1 = DateTime.Now;

                            importePorte = 0;
                            importeFacturacionAlquilerCapitulos = 0;
                            importeFacturacionVentaCapitulos = 0;
                            importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                            importeFacturacionVentFenolicoNuevoCapitulos = 0;
                            importeFacturacionVentaUneCifCapitulos = 0;
                            importeFacturacionVentaOtrosServiciosCapitulos = 0;
                            importeCosteVentaOtrosServiciosCapitulos = 0;
                            importeFacturacionVentaMontajesCapitulos = 0;
                            importeFacturacionVentaProductoCapitulos = 0;
                            importeGastosVariablesAlquilerCapitulos = 0;
                            importeGastosVariablesVentaCapitulos = 0;
                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                            importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                            importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                            importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;
                            importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                            importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                            importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                            importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;

                            importeCosteVentaFenolicoNuevoCapitulos = 0;
                            importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                            importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                            importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                            importeGastosPatioEntregaDevolucionVentas = 0;
                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                            importeGastosPatioClasificacionReparacionAlquiler = 0;

                            importeCosteVentaUneCifCapitulos = 0;
                            importeGastosVariablesVentaUneCifCapitulos = 0;
                            importeGastosFijosBUVentaUneCifCapitulos = 0;
                            importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                            importeCosteVentaMontajesCapitulos = 0;
                            importeGastosVariablesVentaMontajesCapitulos = 0;
                            importeGastosFijosBUVentaMontajesCapitulos = 0;
                            importeGastosFijosCentralesVentaMontajesCapitulos = 0;

                            importeGastosFijosBUAlquilerCapitulos = 0;
                            importeGastosFijosBUVentaCapitulos = 0;

                            importeGastosFijosCentralesAlquilerCapitulos = 0;
                            importeGastosFijosCentralesVentaCapitulos = 0;

                            importeCosteVentaCapitulos = 0;
                            importeCosteTaximetroNoConsumibleCapitulos = 0;
                            importeCosteTaximetroConsumibleCapitulos = 0;
                            importeCosteBonificacionTaximetroConsumibleCapitulos = 0;

                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                dondeVa = "* recorrer capitulos " + capitulo.ToString();

                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];
                                tablaPedidos.AxdEnum_SalesType AxdEnum_SalesType;
                                AxdEnum_SalesType = axdEntity_SalesQuotationTable.SalesType.Value;

                                tituloCapitulo = "";
                                idCapitulo = axdEntity_SalesQuotationMasterTable.SalesId.ToString();
                                if (axdEntity_SalesQuotationMasterTable.SalesName is null)
                                    tituloCapitulo = "";
                                else
                                    tituloCapitulo = " / " + axdEntity_SalesQuotationMasterTable.SalesName.ToString();

                                if (esLiquidacion)
                                {
                                    dondeVa = "liquidación";
                                    if (axdEntity_SalesQuotationMasterTable.ObraId != null)
                                    {
                                        dondeVa = "liquidación - obra id";
                                        obraID = axdEntity_SalesQuotationMasterTable.ObraId.ToString();
                                    }

                                    dondeVa = "dtPedidos";
                                    filaPedidos = dtPedidos.NewRow();
                                    dondeVa = "FECHA_CREACION";
                                    filaPedidos["FECHA_CREACION"] = Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString("yyyyMMdd"));
                                    dondeVa = "AAF";
                                    filaPedidos["AAF"] = Convert.ToString("");
                                    dondeVa = "ITEM_ID";
                                    filaPedidos["ITEM_ID"] = Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString());
                                    dondeVa = "SALESQTY";
                                    filaPedidos["SALESQTY"] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty.ToString());
                                    dondeVa = "dtPedidos add row";
                                    dtPedidos.Rows.Add(filaPedidos);
                                    filaPedidos = null;

                                    dondeVa = "articulosLiquidacion";
                                    articulosLiquidacion = articulosLiquidacion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                }

                                // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                                //dtDatosConfiguracion = new System.Data.DataTable();
                                //horaTotal_SQL = DateTime.Now;
                                ////conexiones.crearConexion();
                                ////conexiones.comando = conexiones.conexion.CreateCommand();
                                ////conexiones.comando.CommandText = "ROP_DatosConfiguracion";
                                ////conexiones.comando.CommandTimeout = 240000;
                                ////conexiones.comando.CommandType = CommandType.StoredProcedure;
                                ////conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                ////conexiones.comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                                ////if (cmbVersion.SelectedValue == "")
                                ////    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                                ////else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                ////    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                                ////else
                                ////    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                                ////conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                                ////conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                ////conexiones.comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                                ////adaptadorDatosConfiguracion = new SqlDataAdapter(conexiones.comando);
                                ////adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                                ////adaptadorDatosConfiguracion.Dispose();
                                ////conexiones.comando.Dispose();
                                ////conexiones.conexion.Close();
                                ////conexiones.conexion.Dispose();
                                //conexion = new SqlConnection(strConexion);
                                //conexion.Open();
                                //comando = conexion.CreateCommand();
                                //comando.CommandText = "ROP_DatosConfiguracion";
                                //comando.CommandTimeout = 240000;
                                //comando.CommandType = CommandType.StoredProcedure;
                                //comando.Parameters.AddWithValue("@empresa", empresa);
                                //comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                                //if (cmbVersion.SelectedValue == "")
                                //    comando.Parameters.AddWithValue("@CFG_ID", null);
                                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                //    comando.Parameters.AddWithValue("@CFG_ID", null);
                                //else
                                //    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                                //comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                                //comando.Parameters.AddWithValue("@moneda", moneda);
                                //comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                                //adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                                //adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                                //adaptadorDatosConfiguracion.Dispose();
                                //comando.Dispose();
                                //conexion.Close();
                                //conexion.Dispose();
                                //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                                //oItemTiempo = dtTiempos.NewRow();
                                //oItemTiempo[0] = "TIEMPO ROP_DatosConfiguracion";
                                //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                                //dtTiempos.Rows.Add(oItemTiempo);

                                pesoCapitulo = 0;
                                importePorte_TR001 = 0;
                                hayTR001 = false;

                                if (codigosTransporte.IndexOf(axdEntity_SalesQuotationTable.ItemId.ToString().ToUpper()) >= 0)
                                    hayTR001 = true;

                                dondeVa = "Cálculos";
                                DataRow oItemTaximetro = dtTaximetro.NewRow();
                                taximetroNoConsumible = 0;
                                taximetroConsumible = 0;
                                precioTaximetroNoConsumible = 0;
                                precioTaximetroConsumible = 0;
                                costeSuperficie = 0;
                                superficie = 0;
                                calcularPorSuperficie = false;
                                metersInvoicing = false;
                                productType = "";
                                tipoServicio = "";

                                precioCoste = 0;
                                if (hayPrecio)
                                {
                                    dondeVa = "buscar precio dataset";
                                    filaEncontrada = dtArticulos.Select("Articulo = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                    if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(axdEntity_SalesQuotationTable.ItemId.ToString().ToUpper()) == -1)
                                    {
                                        salvarIndicencia(empresa, "PEDIDO", axdEntity_SalesQuotationTable.ItemId.ToString(), "No hay PS del artículo.");

                                        imgWarning.Visible = true;
                                        lblMensajeError.Visible = true;
                                        lblMensajeError.Text = "No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'";
                                        //return;

                                        oItemResultados = dtResultados.NewRow();
                                        oItemResultados["TIPO"] = "PEDIDO // " + axdEntity_SalesQuotationTable.SalesId.ToString();
                                        oItemResultados["EMPRESA"] = empresa;
                                        oItemResultados["NUMERO"] = numero;
                                        oItemResultados["ERROR"] = "(PED_1) No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'";
                                        dtResultados.Rows.Add(oItemResultados);
                                        oItemResultados = null;
                                    }
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Precio"])))
                                        {
                                            precioCoste = Convert.ToDecimal(fila["Precio"]);
                                            oItemTaximetro[COL_DATA_PRECIO_CAMBIO] = Convert.ToDecimal(fila["Precio"]).ToString("#,##0.00");
                                        }
                                        dondeVa = "fecha dataset // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Fecha"])))
                                            fechaPrecio = Convert.ToDateTime(fila["Fecha"]);

                                        dondeVa = "Precio original // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["PrecioOriginal"])))
                                            oItemTaximetro[COL_DATA_PRECIO_ORIGINAL] = Convert.ToDecimal(fila["PrecioOriginal"]).ToString("#,##0.00");
                                        dondeVa = "Fecha cambio // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["FechaCambio"])))
                                            oItemTaximetro[COL_DATA_FECHA_CAMBIO] = Convert.ToDateTime(fila["FechaCambio"]).ToString("dd/MM/yyyy");
                                        dondeVa = "Cambio // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Cambio"])))
                                            oItemTaximetro[COL_DATA_CAMBIO] = Convert.ToDecimal(fila["Cambio"]).ToString("#,##0.000000");
                                    }
                                }

                                // gastos variables patio
                                clasificarRepararDirecto = 0;
                                clasificarRepararIndirecto = 0;
                                clasificarDirecto = 0;
                                clasificarIndirecto = 0;
                                repararDirecto = 0;
                                repararIndirecto = 0;
                                entrega = 0;
                                devolucion = 0;
                                naviera = 0;

                                filaEncontrada = dtGastosPatio.Select("ProductId = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Entrega"])))
                                        entrega = Convert.ToDecimal(fila["Entrega"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                        devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                        naviera = Convert.ToDecimal(fila["Naviera"]);

                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarReparar"])))
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararDirecto"])))
                                            clasificarRepararDirecto = Convert.ToDecimal(fila["ClasificarRepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararIndirecto"])))
                                            clasificarRepararIndirecto = Convert.ToDecimal(fila["ClasificarRepararIndirecto"]);
                                    }
                                    else
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarDirecto"])))
                                            clasificarDirecto = Convert.ToDecimal(fila["ClasificarDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarIndirecto"])))
                                            clasificarIndirecto = Convert.ToDecimal(fila["ClasificarIndirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararDirecto"])))
                                            repararDirecto = Convert.ToDecimal(fila["RepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararIndirecto"])))
                                            repararIndirecto = Convert.ToDecimal(fila["RepararIndirecto"]);
                                    }

                                    precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                }

                                // recuperar datos de configuración del datatable
                                dondeVa = "";
                                listaBonificacionesDesde.Clear();
                                listaBonificacionesHasta.Clear();
                                listaBonificacionesValor.Clear();
                                diasDesdeTaxNoConsumible = 0;
                                diasHastaTaxNoConsumible = 0;
                                decimal pesoArticulo = 0;
                                filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                if (filaEncontrada.Count() == 0)
                                {
                                    oItemResultados = dtResultados.NewRow();
                                    oItemResultados["TIPO"] = "PEDIDO // " + axdEntity_SalesQuotationTable.SalesId.ToString();
                                    oItemResultados["EMPRESA"] = empresa;
                                    oItemResultados["NUMERO"] = numero;
                                    oItemResultados["ERROR"] = "No se han localizado datos de configuración para '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'";
                                    dtResultados.Rows.Add(oItemResultados);
                                    oItemResultados = null;
                                }
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    dondeVa = "encontró configuracion dataset // " + axdEntity_SalesQuotationTable.ItemId.ToString() + " // ";

                                    dondeVa = "Peso del artículo";
                                    pesoArticulo = Convert.ToDecimal(fila["WeightVolumeKg"]);
                                    dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                        tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                                    dondeVa = "encontró configuracion dataset // Coste superficie";
                                    if (Convert.ToString(fila["Concepto"]) == "Coste superficie")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeSuperficie = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                    dondeVa = "encontró configuracion dataset // Taxímetro consumible";
                                    if (Convert.ToString(fila["Concepto"]) == "Taxímetro consumible")
                                    {
                                        taximetroConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                        dondeVa = "encontró configuracion dataset // Desde Bonificacion";
                                        listaBonificacionesDesde.Add(Convert.ToInt32(fila["Desde"]));
                                        dondeVa = "encontró configuracion dataset // Hasta Bonificacion";
                                        listaBonificacionesHasta.Add(Convert.ToInt32(fila["Hasta"]));
                                        dondeVa = "encontró configuracion dataset // Ajuste Bonificacion";
                                        listaBonificacionesValor.Add(Convert.ToDecimal(fila["Ajuste"]));

                                        calcularPorSuperficie = false;
                                        dondeVa = "encontró configuracion dataset // Valorar";
                                        superficie = 0;
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Valorar"])))
                                            if (Convert.ToString(fila["Valorar"]).ToUpper() == "SUPERFICIE")
                                            {
                                                calcularPorSuperficie = true;
                                                dondeVa = "encontró configuracion dataset // Superficie";
                                                superficie = Convert.ToDecimal(fila["Superficie"]);
                                            }
                                    }
                                    dondeVa = "encontró configuracion dataset // Tax no consumible";
                                    diasDesdeTaxNoConsumible = 0;
                                    diasHastaTaxNoConsumible = 0;
                                    if (Convert.ToString(fila["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                                    {
                                        dondeVa = "encontró configuracion dataset // Valor tax no consumible";
                                        taximetroNoConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                        diasDesdeTaxNoConsumible = Convert.ToInt32(fila["Desde"]);
                                        diasHastaTaxNoConsumible = Convert.ToInt32(fila["Hasta"]);
                                    }

                                    dondeVa = "encontró configuracion dataset // Meters";
                                    metersInvoicing = Convert.ToBoolean(fila["MetersInvoicing"]);
                                    dondeVa = "encontró configuracion dataset // Tipo producto";
                                    productType = Convert.ToString(fila["ProductTypeName_es"]);

                                    dondeVa = "encontró configuracion dataset // Correcion PS Nuevo";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Nuevo")
                                        coeficienteNuevo = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Correcion PS Usado";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Usado")
                                        coeficienteUsado = Convert.ToDecimal(fila["Valor"]);
                                    //if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Servicio")
                                    //    coeficienteServicio = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Tipo artículo";
                                    tipoArticulo = Convert.ToString(fila["TipoArticulo"]);

                                    // Fenólico / Nuevo
                                    if (Convert.ToString(fila["Concepto"]) == "Porcentaje coste material nuevo")
                                        porcentajeCosteMaterialNuevo = Convert.ToDecimal(fila["Valor"]);
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel estándar")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEstandar = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel especial")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEspecial = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                }

                                dondeVa = "salio configuracion dataset";

                                dondeVa = "Artículo nuevo/usado";

                                importeCosteMaterialNuevo = 0;
                                importeCosteMaterialFenolico = 0;

                                if (tipoArticulo == "NUEVO")
                                {
                                    coeficienteUsar = coeficienteNuevo;
                                    oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteNuevo).ToString("#,##0.00");

                                    importeCosteMaterialNuevo = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * precioCoste * porcentajeCosteMaterialNuevo);
                                }
                                if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                {
                                    coeficienteUsar = coeficienteServicio;
                                    oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteServicio).ToString("#,##0.00");
                                }
                                if (tipoArticulo == "USADO")
                                {
                                    coeficienteUsar = coeficienteUsado;
                                    oItemTaximetro[COL_DATA_PRECIO_CORRECION_USADO] = (precioCoste * coeficienteUsado).ToString("#,##0.00");
                                }

                                dondeVa = "Guarda datos taxímetro";
                                oItemTaximetro[COL_DATA_CAPITULO] = axdEntity_SalesQuotationTable.SalesId.ToString() + tituloCapitulo;
                                oItemTaximetro[COL_DATA_FECHA_DOC] = axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString();
                                oItemTaximetro[COL_DATA_FECHA_CAPITULO] = axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString();
                                oItemTaximetro[COL_DATA_ITEM] = axdEntity_SalesQuotationTable.ItemId.ToString();
                                oItemTaximetro[COL_DATA_TIPO_ITEM] = tipoArticulo;
                                oItemTaximetro[COL_DATA_PRECIO] = precioCoste.ToString("#,##0.00");
                                oItemTaximetro[COL_DATA_FECHA] = fechaPrecio.ToString("dd/MM/yyyy");
                                oItemTaximetro[COL_DATA_TIPO_CAPITULO] = AxdEnum_SalesType.ToString().ToUpper();
                                oItemTaximetro[COL_DATA_PRECIO_GASTOS_PATIO] = precioGastosPatio.ToString("##0.00");
                                oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = 0;
                                oItemTaximetro[COL_DATA_IMPORTE_VENTA] = 0;

                                dondeVa = "Fenólico";
                                //if (tipoArticulo == "MIXTO")
                                //{
                                filaEncontradaFenolico = dtArticulosPaneles.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                foreach (DataRow filaFenolico in filaEncontradaFenolico)
                                {
                                    if (Convert.ToBoolean(filaFenolico["Estandar"]))
                                        importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEstandar);
                                    else
                                        importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEspecial);
                                }

                                importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + importeCosteMaterialFenolico;
                                //}

                                if (AxdEnum_SalesType == tablaPedidos.AxdEnum_SalesType.Sales)
                                {
                                    dondeVa = "VENTAS";

                                    dondeVa = "VENTAS: Gastos variables";
                                    importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio;
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                            importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio;
                                    importeGastosVariablesEntregaDevolucionVentaCapitulos = importeGastosVariablesEntregaDevolucionVentaCapitulos + importeGastosPatioEntregaDevolucionVentas;

                                    oItemTaximetro[COL_DATA_VENTAS_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_VENTAS_DEVOLUCION] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_DEVOLUCION_NAVIERA] = "0.00";
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                            oItemTaximetro[COL_DATA_VENTAS_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");

                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_DIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_INDIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_DIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_INDIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_REPARAR_DIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_REPARAR_INDIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_GASTOS_PATIO] = importeGastosPatioEntregaDevolucionVentas.ToString("##0.00");

                                    dondeVa = "VENTAS: Guardar coeficiente nuevo/usado";
                                    if (tipoArticulo == "NUEVO")
                                        oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteNuevo.ToString("##0.00");
                                    if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                        oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteServicio.ToString("##0.00");
                                    if (tipoArticulo == "USADO")
                                        oItemTaximetro[COL_DATA_COEFICIENTE_USADO] = coeficienteUsado.ToString("##0.00");

                                    dondeVa = "VENTAS: Calcular importe venta";
                                    importeVenta = importeVenta + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                    importeFacturacionVentaCapitulos = importeFacturacionVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);

                                    // mail 29/07/2021 Nacho: configuración manda sobre tipo producto
                                    if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                    {
                                        importeFacturacionVentaDepartamentoTecnicoCapitulos = importeFacturacionVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                        // COSTE
                                        importeCosteVentaDepartamentoTecnicoCapitulos = importeCosteVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste * coeficienteUsar;
                                        // Gastos variables
                                        //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                        //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + importeGastosPatioVentas;
                                        // Gastos fijos BU
                                        importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = importeGastosFijosBUVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                        // Gastos fijos centrales
                                        importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                    }
                                    else if (tipoServicio.ToUpper() == "MONTAJES")
                                    {
                                        importeFacturacionVentaMontajesCapitulos = importeFacturacionVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                        // COSTE
                                        importeCosteVentaMontajesCapitulos = importeCosteVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * precioCoste;
                                        // Gastos variables
                                        //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                        //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + importeGastosPatioVentas;
                                        // Gastos fijos BU
                                        importeGastosFijosBUVentaMontajesCapitulos = importeGastosFijosBUVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                        // Gastos fijos centrales
                                        importeGastosFijosCentralesVentaMontajesCapitulos = importeGastosFijosCentralesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                    }
                                    else
                                    {
                                        if (productType.Trim().ToUpper() == "SERVICIO")
                                        {
                                            dondeVa = "VENTAS: Servicio";
                                            // Fenólico
                                            if (axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                            {
                                                //if (chkBoxFenolico.Checked)
                                                    importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.CanonFenolico));
                                                // COSTE
                                                //importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.CanonFenolico); 
                                                // Gastos variables
                                                //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaFenolicoNuevoCapitulos = importeGastosFijosBUVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = importeGastosFijosCentralesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            // SVP/CIF
                                            else if (axdEntity_SalesQuotationTable.CanonImport.HasValue && axdEntity_SalesQuotationTable.CanonImport != 0)
                                            {
                                                importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                                // COSTE
                                                importeCosteVentaUneCifCapitulos = importeCosteVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste) * (Convert.ToDecimal(axdEntity_SalesQuotationTable.Canon) / 100));
                                                // Gastos variables
                                                //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaUneCifCapitulos = importeGastosFijosBUVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaUneCifCapitulos = importeGastosFijosCentralesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            // OTROS SERVICIOS
                                            else
                                            {
                                                importeFacturacionVentaOtrosServiciosCapitulos = importeFacturacionVentaOtrosServiciosCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                                // COSTE
                                                importeCosteVentaOtrosServiciosCapitulos = importeCosteVentaOtrosServiciosCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste));
                                            }
                                            oItemTaximetro[COL_DATA_IMPORTE_VENTA_SERVICIO] = Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount).ToString("#,##0.00");
                                        }
                                    }
                                    if (productType.Trim().ToUpper() != "SERVICIO")
                                    {
                                        dondeVa = "VENTAS: Producto";
                                        importeFacturacionVentaProductoCapitulos = importeFacturacionVentaProductoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                        oItemTaximetro[COL_DATA_IMPORTE_VENTA_PRODUCTO] = Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount).ToString("#,##0.00");

                                        dondeVa = "Coste venta";
                                        importeCosteVentaCapitulos = importeCosteVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste * coeficienteUsar;

                                        // Gastos variables
                                        dondeVa = "VENTAS: Gastos variables";
                                        //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                        //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + importeGastosPatioVentas;

                                        // Gastos fijos BU
                                        dondeVa = "VENTAS: Gastos fijos BU";
                                        importeGastosFijosBUVentaCapitulos = importeGastosFijosBUVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);

                                        // Gastos fijos centrales
                                        dondeVa = "VENTAS: Gastos fijos centrales";
                                        importeGastosFijosCentralesVentaCapitulos = importeGastosFijosCentralesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                    }

                                    dondeVa = "VENTAS: Datos en datatble taximetro";
                                    oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_VENTA] = Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_VARIABLE] = gastosVariablesVenta.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_VARIABLE] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUVenta.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesVenta.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta).ToString("#,##0.00");
                                }

                                if (AxdEnum_SalesType == tablaPedidos.AxdEnum_SalesType.Alquiler)
                                {
                                    // Gastos variables
                                    dondeVa = "ALQUILER: Gastos variables";
                                    importeGastosPatioEntregaDevolucionAlquiler = 0;
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                    {
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * naviera * precioGastosPatio);
                                        }
                                        else
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * precioGastosPatio);
                                        }
                                    }
                                    else
                                    {
                                        importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio;
                                        importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * precioGastosPatio);
                                    }
                                    importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;

                                    importeGastosPatioClasificacionReparacionAlquiler = 0;
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararDirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararIndirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarDirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarIndirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararDirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararIndirecto * precioGastosPatio);
                                    importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosPatioClasificacionReparacionAlquiler;

                                    oItemTaximetro[COL_DATA_ALQUILER_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * precioGastosPatio).ToString("##0.00");
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                    {
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                        {
                                            oItemTaximetro[COL_DATA_ALQUILER_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * naviera * precioGastosPatio).ToString("##0.00");
                                        }
                                    }
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararDirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararIndirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarDirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarIndirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararDirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararIndirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_GASTOS_PATIO] = (importeGastosPatioEntregaDevolucionAlquiler + importeGastosPatioClasificacionReparacionAlquiler).ToString("##0.00");

                                    // SVP/CIF
                                    if (axdEntity_SalesQuotationTable.CanonImport.HasValue && axdEntity_SalesQuotationTable.CanonImport != 0)
                                        importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesPrice) * Convert.ToDecimal(axdEntity_SalesQuotationTable.Canon)) / 100);

                                    //if (chkBoxFenolico.Checked && axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                    if (axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                        importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.CanonFenolico));

                                    dondeVa = "ALQUILER";
                                    importeAlquiler = importeAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada));
                                    importeFacturacionAlquilerCapitulos = importeFacturacionAlquilerCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada);

                                    // Gastos fijos BU
                                    dondeVa = "ALQUILER: gastos fijos BU";
                                    importeAlquilerGastosFijosBU = importeAlquilerGastosFijosBU + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosBUAlquiler);
                                    importeGastosFijosBUAlquilerCapitulos = importeGastosFijosBUAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosBUAlquiler);

                                    // Gastos fijos centrales
                                    dondeVa = "ALQUILER: gastos centrales";
                                    importeAlquilerGastosFijosCentrales = importeAlquilerGastosFijosCentrales + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosCentralesAlquiler);
                                    importeGastosFijosCentralesAlquilerCapitulos = importeGastosFijosCentralesAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosCentralesAlquiler);

                                    dondeVa = "ALQUILER: Datos en datatble taximetro";
                                    oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_EURO_DIA] = Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia).ToString("#,##0.0000");
                                    oItemTaximetro[COL_DATA_DURACION_ESTIMADA] = Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_VARIABLE] = gastosVariablesAlquiler.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_VARIABLE] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosVariablesAlquiler).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUAlquiler.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosBUAlquiler).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesAlquiler.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosCentralesAlquiler).ToString("#,##0.00");

                                    dondeVa = "Calcular datos taxímetros";
                                    if (taximetroConsumible == 0)
                                    {
                                        precioTaximetroNoConsumible = precioCoste;
                                    }
                                    else
                                    {
                                        if (calcularPorSuperficie)
                                        {
                                            if (!metersInvoicing)
                                            {
                                                precioTaximetroNoConsumible = precioCoste; // (precioCoste - (costeSuperficie * superficie));
                                                precioTaximetroConsumible = 0;
                                            }
                                            else
                                            {
                                                precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                                precioTaximetroConsumible = (costeSuperficie * superficie);
                                            }
                                        }
                                        else
                                        {
                                            precioTaximetroNoConsumible = 0;
                                            precioTaximetroConsumible = precioCoste;
                                        }
                                    }

                                    dondeVa = "Calcular datos taxímetros: superficie";
                                    if (calcularPorSuperficie)
                                    {
                                        if (!metersInvoicing)
                                            oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE / NO meters invoicing";
                                        else
                                            oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE";
                                    }
                                    else
                                        oItemTaximetro[COL_DATA_TIPO] = "";

                                    oItemTaximetro[COL_DATA_TAX_CONSUMIBLE] = taximetroConsumible.ToString("#,##0.0000");
                                    oItemTaximetro[COL_DATA_TAX_NO_CONSUMIBLE] = taximetroNoConsumible.ToString("#,##0.0000");
                                    oItemTaximetro[COL_DATA_SUPERFICIE] = superficie.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_COSTE_SUPERFICIE] = (costeSuperficie * superficie).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_PRECIO_CONSUMIBLE] = precioTaximetroConsumible.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_PRECIO_NO_CONSUMIBLE] = precioTaximetroNoConsumible.ToString("#,##0.00");

                                    importeCosteTaximetroConsumible = importeCosteTaximetroConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) / diasxMes;
                                    importeCosteTaximetroConsumibleCapitulos = importeCosteTaximetroConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) / diasxMes;

                                    dondeVa = "Empieza recorrido bonificación";
                                    oItemTaximetro[COL_DATA_AJUSTE] = "";

                                    duracion = Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada);
                                    diasCalculados = 0;
                                    diasMultiplicar = 0;
                                    while (diasCalculados < duracion)
                                    {
                                        for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                        {
                                            if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                            {
                                                if (duracion - diasCalculados >= diasxMes)
                                                    diasMultiplicar = diasxMes;
                                                else
                                                    diasMultiplicar = duracion - diasCalculados;
                                                bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                oItemTaximetro[COL_DATA_AJUSTE] = oItemTaximetro[COL_DATA_AJUSTE] + "Bonif. (" + bonificacionTaximetroConsumible.ToString("#,##0.0000") + ") * Dias(" + diasMultiplicar.ToString() + ") // ";
                                                if (oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE].ToString() == "")
                                                    oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes).ToString("#,##0.00");
                                                else
                                                    oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = (Convert.ToDecimal(oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE]) + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes)).ToString("#,##0.00");
                                                importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                importeCosteBonificacionTaximetroConsumibleCapitulos = importeCosteBonificacionTaximetroConsumibleCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                            }
                                        }
                                        diasCalculados = diasCalculados + diasxMes;
                                    }
                                    dondeVa = "Fin recorrido bonificación";

                                    oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_DESDE] = diasDesdeTaxNoConsumible.ToString();
                                    oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_HASTA] = diasHastaTaxNoConsumible.ToString();
                                    oItemTaximetro[COL_DATA_IMPORTE_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) / diasxMes).ToString("#,##0.00");

                                    if (Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada) <= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada) - diasDesdeTaxNoConsumible;
                                    if (Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada) >= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;

                                    importeCosteTaximetroNoConsumible = importeCosteTaximetroNoConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                    importeCosteTaximetroNoConsumibleCapitulos = importeCosteTaximetroNoConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                    oItemTaximetro[COL_DATA_IMPORTE_NO_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes).ToString("#,##0.00");

                                }

                                if ((importeCosteMaterialNuevo != 0) && (importeCosteMaterialFenolico != 0))
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + (importeCosteMaterialNuevo - importeCosteMaterialFenolico);
                                else
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + importeCosteMaterialNuevo;

                                dtTaximetro.Rows.Add(oItemTaximetro);
                                oItemTaximetro = null;

                                pesoCapitulo = pesoCapitulo + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));
                                pesoTotal = pesoTotal + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));

                                if (codigosTransporte.IndexOf(axdEntity_SalesQuotationTable.ItemId.ToString().ToUpper()) >= 0)
                                {
                                    dondeVa = "VALIDAR TRANSPORTE TR-001";
                                    importePorte_TR001 = importePorte_TR001 + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                }

                                importePorte = importePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));
                                importeCostePorte = importeCostePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));

                            }

                            dondeVa = "FIN RECORRIDO CAPÍTULO";

                            importeMargenAlquiler = importeAlquiler - (importeCosteTaximetroNoConsumible + importeCosteTaximetroConsumible - importeCosteBonificacionTaximetroConsumible);
                            importeMargenVenta = importeVenta - importeCosteVenta;
                            dondeVa = "titulo capitulo";
                            tituloCapitulo = "";
                            idCapitulo = axdEntity_SalesQuotationMasterTable.SalesId.ToString();
                            if (axdEntity_SalesQuotationMasterTable.SalesName is null)
                                tituloCapitulo = "";
                            else

                                tituloCapitulo = " / " + axdEntity_SalesQuotationMasterTable.SalesName.ToString();
                            dondeVa = "fuera titulo capitulo";

                            // INICIO PORTES POR CAPÍTULO
                            dondeVa = "Portes por capítulo";
                            //if (chkBoxPortes.Checked && axdEntity_SalesQuotationMasterTable.Delegation.ToString().ToUpper() != "EX" && axdEntity_SalesQuotationMasterTable.GestionPorte == tablaPedidos.AxdEnum_GestionPorte.Alsina && (axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.Todo || axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.SoloEntrega))
                            if (axdEntity_SalesQuotationMasterTable.Delegation.ToString().ToUpper() != "EX" && axdEntity_SalesQuotationMasterTable.GestionPorte == tablaPedidos.AxdEnum_GestionPorte.Alsina && (axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.Todo || axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.SoloEntrega))
                                {
                                    dondeVa = "Portes por capítulo (dentro)";
                                if (hayTR001 && importePorte_TR001 > 0)
                                {
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importePorte_TR001.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    importeCostePorte = (-1) * (importePorte_TR001 * (1 - margenPorte));
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importeCostePorte.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (importePorte_TR001 + importeCostePorte).ToString("#,##0.00");
                                    if (((importePorte_TR001) / (1 - margenPorte)) == 0)
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                    else
                                        filaValores[dtValores_PORCENTAJE] = (((importePorte_TR001 + importeCostePorte) / importePorte_TR001) * 100).ToString("#,##0.00");
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((importePorte_TR001 / (1 - margenPorte)) - importePorte_TR001).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    if (esVenta)
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesVenta).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesAlquiler).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }

                                if (!existeTR001)
                                {
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    if (1 - margenPorte != 0)
                                        filaValores[dtValores_IMPORTE] = ((importePorte * 100) / (1 - margenPorte)).ToString("#,##0.00");
                                    else
                                        filaValores[dtValores_IMPORTE] = "0.00";
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importePorte * 100).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                    if (((importePorte * 100) / (1 - margenPorte)) == 0)
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                    else
                                        filaValores[dtValores_PORCENTAJE] = ((((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)) / ((importePorte * 100) / (1 - margenPorte))).ToString("#,##0.00");
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    if ((1 - margenPorte) != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (esVenta)
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesVenta).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesAlquiler).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }
                            }
                            // FIN PORTES POR CAPÍTULO

                            if (importeGastosVariablesEntregaDevolucionAlquilerCapitulos != 0 || importeGastosVariablesEntregaDevolucionVentaCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 6";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosVariablesEntregaDevolucionVentaCapitulos)).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos != 0 || importeGastosVariablesClaisificacionReparacionVentaCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 6";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosVariablesClaisificacionReparacionVentaCapitulos)).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            dondeVa = "Importes/cantidades venta 1";
                            if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaDepartamentoTecnicoCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaDepartamentoTecnicoCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos) / importeFacturacionVentaDepartamentoTecnicoCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            //if (importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0)
                            //{
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_DEPARTAMENTO_TECNICO";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0 || importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos - importeGastosVariablesVentaDepartamentoTecnicoCapitulos - importeGastosFijosBUVentaDepartamentoTecnicoCapitulos - importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "FENÓLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentFenolicoNuevoCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentFenolicoNuevoCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos) / importeFacturacionVentFenolicoNuevoCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            //if (importeGastosVariablesVentaFenolicoNuevoCapitulos != 0)
                            //{
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_FENOLICO_NUEVO";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0 || importeGastosVariablesVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos - importeGastosVariablesVentaFenolicoNuevoCapitulos - importeGastosFijosBUVentaFenolicoNuevoCapitulos - importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "SVP_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaUneCifCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaUneCifCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos) / importeFacturacionVentaUneCifCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaOtrosServiciosCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "OTROS_SERVICIOS";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaOtrosServiciosCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaOtrosServiciosCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_OTROS_SERVICIOS";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaOtrosServiciosCapitulos != 0 || importeCosteVentaOtrosServiciosCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_OTROS_SERVICIOS";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaOtrosServiciosCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos) / importeFacturacionVentaOtrosServiciosCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }
                            //if (importeGastosVariablesVentaUneCifCapitulos != 0)
                            //{
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_UNE_CIF";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaUneCifCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0 || importeGastosVariablesVentaUneCifCapitulos != 0 || importeGastosFijosBUVentaUneCifCapitulos != 0 || importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos - importeGastosVariablesVentaUneCifCapitulos - importeGastosFijosBUVentaUneCifCapitulos - importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaMontajesCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaMontajesCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos) / importeFacturacionVentaMontajesCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            //if (importeGastosVariablesVentaMontajesCapitulos != 0)
                            //{
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_MONTAJES";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaMontajesCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0 || importeGastosVariablesVentaMontajesCapitulos != 0 || importeGastosFijosBUVentaMontajesCapitulos != 0 || importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos - importeGastosVariablesVentaMontajesCapitulos - importeGastosFijosBUVentaMontajesCapitulos - importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta productos 1";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                                else
                                {
                                    dondeVa = "Importes/cantidades venta productos 1";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                    //if (esVenta)
                                    //{
                                    //    dondeVa = "Importes/cantidades venta productos 1";
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "VENTAS_MATERIAL_ALQUILADO";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}
                                    //else
                                    //{
                                    //    dondeVa = "Importes/cantidades venta productos 1";
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "VENTAS_LIQUIDACIONES";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}
                                }
                            }

                            if (importeCosteVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 2";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "COSTE_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 3";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos).ToString("#,##0.00");
                                    if (importeFacturacionVentaProductoCapitulos == 0)
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                    else
                                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            if (importeGastosVariablesVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 4";
                                    //filaValores = dtValores.NewRow();
                                    //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_VENTAS_DIRECTAS";
                                    //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    //filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaCapitulos).ToString("#,##0.00");
                                    //filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //dtValores.Rows.Add(filaValores);
                                    //filaValores = null;
                                }
                                else
                                {
                                    if (esVenta)
                                    {
                                        dondeVa = "Importes/cantidades venta 4";
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_VENTAS_MATERIAL_ALQUILADO";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaCapitulos).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;
                                    }
                                    else
                                    {
                                        dondeVa = "Importes/cantidades venta 4";
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_VENTAS_LIQUIDACIONES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaCapitulos).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;
                                    }
                                }
                            }

                            if (importeGastosFijosBUVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 5";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                                else
                                {
                                    if (esVenta)
                                    {
                                        dondeVa = "Importes/cantidades venta 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        dondeVa = "Importes/cantidades venta 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_LIQUIDACIONES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }
                            }

                            if (importeGastosFijosCentralesVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 6";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                                else
                                {
                                    if (esVenta)
                                    {
                                        dondeVa = "Importes/cantidades venta 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_LIQUIDADO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        dondeVa = "Importes/cantidades venta 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_LIQUIDACIONES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 7";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            dondeVa = "ALQUILER 2";

                            dondeVa = "Importes/cantidades alquiler 1";
                            if (importeFacturacionAlquilerCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ALQUILERES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionAlquilerCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteTaximetroNoConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 2";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "TAXIMETRO_NO_CONSUMIBLE";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroNoConsumibleCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteTaximetroConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 3";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "TAXIMETRO_CONSUMIBLE";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 4";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "AJUSTE_TAXIMETRO_CONSUMIBLE";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeCosteBonificacionTaximetroConsumibleCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionAlquilerCapitulos != 0 || importeCosteTaximetroNoConsumibleCapitulos != 0 || importeCosteTaximetroConsumibleCapitulos != 0 || importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 5";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                if (importeFacturacionAlquilerCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos) / importeFacturacionAlquilerCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            //if (importeGastosVariablesAlquilerCapitulos != 0)
                            //{
                            //    dondeVa = "Importes/cantidades alquiler 6";
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ALQUILER";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesAlquilerCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUAlquilerCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 7";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUAlquilerCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesAlquilerCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 8";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesAlquilerCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionAlquilerCapitulos != 0 || importeCosteTaximetroNoConsumibleCapitulos != 0 || importeCosteTaximetroConsumibleCapitulos != 0 || importeCosteBonificacionTaximetroConsumibleCapitulos != 0 || importeGastosVariablesAlquilerCapitulos != 0 || importeGastosFijosBUAlquilerCapitulos != 0 || importeGastosFijosCentralesAlquilerCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionAlquilerCapitulos - (importeCosteTaximetroNoConsumibleCapitulos + importeCosteTaximetroConsumibleCapitulos - importeCosteBonificacionTaximetroConsumibleCapitulos) - importeGastosVariablesAlquilerCapitulos - importeGastosFijosBUAlquilerCapitulos - importeGastosFijosCentralesAlquilerCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }
                        }
                    }

                    dtArticulos.Dispose();
                    dondeVa = "finalizó";
                    proxy_1.Close();

                    dondeVa = "TIEMPO PROCESAR PEDIDOS";
                    horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);
                    oItemTiempo = dtTiempos.NewRow();
                    oItemTiempo[0] = "TIEMPO PROCESAR PEDIDOS";
                    oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                    dtTiempos.Rows.Add(oItemTiempo);

                    dondeVa = "listados clear";
                    listaArticulosSinFicha.Clear();
                    listaArticulosPedido.Clear();
                    listaFechasPedido.Clear();
                    listaOfertas.Clear();
                    listaFechasOferta.Clear();
                }

                // --------
                // SI HAY LIQUIDACIONES --> ALBARANES DE ENTREGA
                dondeVa = "liquidaciones";
                horaTotal_1 = DateTime.Now;

                decimal dec_importeCosteMPOMixto = 0;
                decimal dec_importeCosteMPONuevo = 0;
                decimal dec_importeCosteMPOUsado = 0;

                if (articulosLiquidacion != "" && obraID != "")
                {
                    // Buscar estado de los artículos 
                    dondeVa = "Datos estado artículos";

                    dtArticulosLiquidacion = localizarEstadoArticulos(usuario, "");
                    if (dtArticulosLiquidacion.Columns.Count == 0)
                        dondeVa = "va a petar // " + articulosLiquidacion + " // usuario // " + usuario;
                    // Actualizo AAF en el data de pedidos
                    //dondeVa = "Actualizar AAF en dtPedidos";
                    foreach (DataRow filaPedido in dtPedidos.Rows)
                    {
                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + filaPedido["ITEM_ID"].ToString() + "'");
                        foreach (DataRow filaAAF in filaEncontrada)
                        {
                            filaPedido["AAF"] = Convert.ToString(filaAAF["AAF"]);
                            break;
                        }
                    }

                    // 40006251
                    dondeVa = "Datos ws albaranes de entrega";
                    System.Collections.IEnumerator enumerator_AlbaranEntrega;
                    // CABECERA
                    dondeVa = "contexto_AlbaranEntrega";
                    tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega = new tablaAlbaranesEntrega.CallContext();
                    contexto_AlbaranEntrega.Company = empresa;

                    dondeVa = "criterio";
                    tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega = new tablaAlbaranesEntrega.QueryCriteria();
                    criterio_AlbaranEntrega.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                    //ProjTable_AlbaranEntrega
                    criterio_AlbaranEntrega.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                    criterio_AlbaranEntrega.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                    criterio_AlbaranEntrega.CriteriaElement[0].FieldName = "ObraId";
                    criterio_AlbaranEntrega.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                    criterio_AlbaranEntrega.CriteriaElement[0].Value1 = obraID;

                    dondeVa = "credenciales";
                    tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega = new tablaAlbaranesEntrega.CustPackingServiceClient();
                    proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                    proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                    proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                    dondeVa = "proxy";
                    tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking = proxy_AlbaranEntrega.find(contexto_AlbaranEntrega, criterio_AlbaranEntrega);
                    datosGenerales = "";
                    dondeVa = "validar";

                    horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);
                    oItemTiempo = dtTiempos.NewRow();
                    oItemTiempo[0] = "TIEMPO tablaAlbaranesEntrega";
                    oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                    dtTiempos.Rows.Add(oItemTiempo);
                    horaTotal_1 = DateTime.Now;

                    if (AxdCustPacking.CustPackingSlipTrans.Equals(null))
                    {
                        proxy_AlbaranEntrega.Close();
                    }
                    else
                    {
                        dondeVa = "recorrer albaranes";
                        enumerator_AlbaranEntrega = AxdCustPacking.CustPackingSlipTrans.GetEnumerator();

                        while (enumerator_AlbaranEntrega.MoveNext())
                        {
                            tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans AxdEntity_CustPackingSlipTrans = (tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans)enumerator_AlbaranEntrega.Current;
                            tipoArticulo = "";
                            filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                            foreach (DataRow filaTipo in filaEncontrada)
                            {
                                dondeVa = "ajustar datos AAF y tipo de artículo: " ;
                                tipoArticulo = Convert.ToString(filaTipo["TipoArticulo"]).ToUpper().Trim();
                                dondeVa = "Tipo de artículo: "+ tipoArticulo;
                                AAF = Convert.ToString(filaTipo["AAF"]);
                                dondeVa = "AAF: " + AAF;
                                //if (tipoArticulo.ToUpper().Trim() != "USADO")
                                //    hayDistintoUsado = true;

                                dondeVa = "Incluir en dtAlbaranes";
                                filaAlbaranes = dtAlbaranes.NewRow();
                                dondeVa = "Incluir en dtAlbaranes 1";
                                filaAlbaranes[dtAlbaranes_fecha] = Convert.ToString(AxdEntity_CustPackingSlipTrans.DeliveryDate.ToString("yyyyMMdd"));
                                dondeVa = "Incluir en dtAlbaranes 2";
                                filaAlbaranes[dtAlbaranes_aaf] = AAF;
                                dondeVa = "Incluir en dtAlbaranes 3";
                                filaAlbaranes[dtAlbaranes_itemID] = Convert.ToString(AxdEntity_CustPackingSlipTrans.ItemId.ToString());
                                dondeVa = "Incluir en dtAlbaranes 4";
                                filaAlbaranes[dtAlbaranes_cantidad] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty.ToString());
                                dondeVa = "Incluir en dtAlbaranes 5";
                                filaAlbaranes[dtAlbaranes_estado] = tipoArticulo;
                                dondeVa = "Incluir en dtAlbaranes 6";
                                dtAlbaranes.Rows.Add(filaAlbaranes);
                                filaAlbaranes = null;
                                break;
                            }
                        }
                    }
                    proxy_AlbaranEntrega.Close();

                    // APLASTAR DTPEDIDOS POR FECHA / AAF
                    // 40006251
                    dondeVa = "aplastar dtPedidos";
                    var dataPedidos = from d in dtPedidos.AsEnumerable()
                                      orderby d.Field<string>("FECHA_CREACION"), d.Field<string>("AAF")
                                      group d by new
                                      {
                                          FECHA_CREACION = d.Field<string>("FECHA_CREACION"),
                                          ITEM = d.Field<string>("ITEM_ID"),
                                          CODIGO_AAF = d.Field<string>("AAF"),
                                      } into grupo
                                      select new
                                      {
                                          fecha = grupo.Key.FECHA_CREACION,
                                          aaf = grupo.Key.CODIGO_AAF,
                                          articulo = grupo.Key.ITEM,
                                          cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("SALESQTY")))
                                      };

                    //var data = from d in dtPedidos.AsEnumerable()
                    //           select d; 

                    dondeVa = "copiar a dtPedidosAgrupado";
                    System.Data.DataTable dtPedidosAgrupado = new System.Data.DataTable();

                    dondeVa = "creando columnas en dtPedidosAgrupado";
                    dtPedidosAgrupado.Columns.Add("FECHA");
                    dtPedidosAgrupado.Columns.Add("AAF");
                    dtPedidosAgrupado.Columns.Add("ARTICULO");
                    dtPedidosAgrupado.Columns.Add("CANTIDAD");
                    dtPedidosAgrupado.Columns.Add("USADO");
                    dtPedidosAgrupado.Columns.Add("MIXTO");
                    dtPedidosAgrupado.Columns.Add("NUEVO");

                    dondeVa = "copiando a dtPedidosAgrupado";
                    foreach (var itemPedidos in dataPedidos)
                        dtPedidosAgrupado.Rows.Add(itemPedidos.fecha.ToString(), itemPedidos.aaf.ToString(), itemPedidos.articulo.ToString(), itemPedidos.cantidad.ToString(), "0", "0", "0");

                    // APLASTAR DTALBARANES POR FECHA / AAF / TIPO
                    // 40006251
                    dondeVa = "aplastar dtAlbaranes";
                    var dataAlbaranes = from d in dtAlbaranes.AsEnumerable()
                                        orderby d.Field<string>("FECHA"), d.Field<string>("AAF"), d.Field<string>("Estado")
                                        group d by new
                                        {
                                            FECHA_ALBARAN = d.Field<string>("FECHA"),
                                            CODIGO_AAF = d.Field<string>("AAF"),
                                            ESTADO_ARTICULO = d.Field<string>("Estado"),
                                        } into grupo
                                        select new
                                        {
                                            fecha = grupo.Key.FECHA_ALBARAN,
                                            aaf = grupo.Key.CODIGO_AAF,
                                            estado = grupo.Key.ESTADO_ARTICULO,
                                            cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("QTY")))
                                        };

                    dondeVa = "copiar a dtAlbaranesAgrupado";
                    System.Data.DataTable dtAlbaranesAgrupado = new System.Data.DataTable();

                    dondeVa = "creando columnas en dtAlbaranesAgrupado";
                    dtAlbaranesAgrupado.Columns.Add("FECHA");
                    dtAlbaranesAgrupado.Columns.Add("AAF");
                    dtAlbaranesAgrupado.Columns.Add("CANTIDAD");
                    dtAlbaranesAgrupado.Columns.Add("CANTIDAD_QUEDA");
                    dtAlbaranesAgrupado.Columns.Add("ESTADO");

                    dondeVa = "copiando a dtAlbaranesAgrupado";
                    foreach (var itemAlbaran in dataAlbaranes)
                        dtAlbaranesAgrupado.Rows.Add(itemAlbaran.fecha.ToString(), itemAlbaran.aaf.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.estado.ToString());

                    // DISTRIBUIR DTPEDIDOS USADO / MIXTO / NUEVO
                    // 40006251
                    dondeVa = "distribuir usado / mixto / nuevo";
                    foreach (DataRow filaPedido in dtPedidosAgrupado.Rows)
                    {
                        faltan = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) - Convert.ToInt32(filaPedido[dtPedidosAgrupados_mixto]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]);

                        // USADO
                        if (faltan > 0)
                        {
                            filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'USADO' AND CANTIDAD_QUEDA > '0'");
                            foreach (DataRow filaCantidad in filaEncontrada)
                            {
                                if (faltan > Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]))
                                {
                                    filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                    faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                    filaCantidad["CANTIDAD_QUEDA"] = "0";
                                }
                                if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                {
                                    filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + faltan;
                                    filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                    faltan = 0;
                                }
                                if (faltan == 0)
                                    break;
                            }
                        }

                        // MIXTO
                        if (faltan > 0)
                        {
                            filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'MIXTO' AND CANTIDAD_QUEDA > '0'");
                            foreach (DataRow filaCantidad in filaEncontrada)
                            {
                                if (faltan > Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]))
                                {
                                    filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                    faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                    filaCantidad["CANTIDAD_QUEDA"] = "0";
                                }
                                if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                {
                                    filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + faltan;
                                    filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                    faltan = 0;
                                }
                                if (faltan == 0)
                                    break;
                            }
                        }

                        // NUEVO
                        if (faltan > 0)
                        {
                            filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'NUEVO' AND CANTIDAD_QUEDA > '0'");
                            foreach (DataRow filaCantidad in filaEncontrada)
                            {
                                if (faltan > Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]))
                                {
                                    filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                    faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                    filaCantidad["CANTIDAD_QUEDA"] = "0";
                                }
                                if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                {
                                    filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + faltan;
                                    filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                    faltan = 0;
                                }
                                if (faltan == 0)
                                    break;
                            }
                        }

                        // CALCULO filaPedido[dtPedidosAgrupados_usado] / filaPedido[dtPedidosAgrupados_mixto]  / filaPedido[dtPedidosAgrupados_nuevo]
                        dondeVa = "recuperar coeficiente";
                        filaEncontrada = dtDatosConfiguracion.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' AND Concepto = 'Coef. Corrección PS Nuevo'");
                        foreach (DataRow filaTax in filaEncontrada)
                            coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                        filaEncontrada = dtDatosConfiguracion.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' AND Concepto = 'Coef. Corrección PS Usado'");
                        foreach (DataRow filaTax in filaEncontrada)
                        {
                            coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                            coeficienteMixto = Convert.ToDecimal(filaTax["Valor"]);
                        }
                        //filaEncontrada = dtDatosConfiguracion.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' AND Concepto = 'Coef. Corrección PS Mixto'");
                        //foreach (DataRow filaTax in filaEncontrada)
                        //    coeficienteMixto = Convert.ToDecimal(filaTax["Valor"]);

                        precioCoste = 0;
                        dondeVa = "recuperar precio";
                        if (hayPrecio)
                        {
                            dondeVa = "buscar precio dataset // " + articulos;
                            filaEncontrada = dtArticulos.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "'");
                            if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(filaPedido[dtPedidosAgrupados_articulo].ToString().ToUpper()) == -1)
                            {
                                salvarIndicencia(empresa, "PEDIDO", filaPedido[dtPedidosAgrupados_articulo].ToString(), "No hay PS del artículo.");

                                imgWarning.Visible = true;
                                lblMensajeError.Visible = true;
                                lblMensajeError.Text = "No se ha localizado el precio del articulo '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "'";
                                //return;
                            }
                            foreach (DataRow filaprecio in filaEncontrada)
                            {
                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                    precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                            }
                        }

                        dondeVa = "calcular coste MPO";
                        importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                        importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                        importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);

                        dec_importeCosteMPOMixto = dec_importeCosteMPOMixto + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                        dec_importeCosteMPONuevo = dec_importeCosteMPONuevo + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                        dec_importeCosteMPOUsado = dec_importeCosteMPOUsado + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                    }

                    if (esVenta)
                    {
                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; // "COSTE_VENTAS_MATERIAL_ALQUILADO";
                        filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - MIXTO";
                        filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOMixto)).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;

                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; //"COSTE_VENTAS_MATERIAL_ALQUILADO";
                        filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - NUEVO";
                        filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPONuevo)).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;

                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; //"COSTE_VENTAS_MATERIAL_ALQUILADO";
                        filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - USADO";
                        filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOUsado)).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;

                        if (importeFacturacionVentaProductoCapitulos != 0)
                        {
                            dondeVa = "Importes/cantidades venta 3";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES"; // "MARGEN_VENTAS_MATERIAL_ALQUILADO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                            filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado).ToString("#,##0.00");
                            if (importeFacturacionVentaProductoCapitulos == 0)
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                            else
                                filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }

                        if (importeFacturacionVentaProductoCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                        {
                            dondeVa = "Importes/cantidades venta 7";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_MATERIAL_ALQUILADO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                            filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }
                    }
                    else
                    {
                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                        filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - MIXTO";
                        filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOMixto)).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;

                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                        filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - NUEVO";
                        filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPONuevo)).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;

                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                        filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - USADO";
                        filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOUsado)).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;

                        if (importeFacturacionVentaProductoCapitulos != 0)
                        {
                            dondeVa = "Importes/cantidades venta 3";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES"; // "MARGEN_VENTAS_LIQUIDACIONES";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                            filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado).ToString("#,##0.00");
                            if (importeFacturacionVentaProductoCapitulos == 0)
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                            else
                                filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }

                        if (importeFacturacionVentaProductoCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                        {
                            dondeVa = "Importes/cantidades venta 7";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_LIQUIDACIONES";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                            filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }
                    }
                }
                dtDatosConfiguracion.Dispose();

                //// CALCULAR GASTOS OFICINA 
                //totalAnual = 0;
                //totalAdministrativo = 0;
                //varAdministrativo = 0;
                //totalComercial = 0;
                //varComercial = 0;
                //costeDT = 0;
                //preciosEnCero = 0;
                //dtDatosGastosOficina = gastosOficina(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable);
                //foreach (DataRow fila in dtDatosGastosOficina.Rows)
                //{
                //    dondeVa = "encontró precio coste dataset dtDatosGastosOficina";
                //    totalAnual = Convert.ToDecimal(fila["fact_anual_empresa"]);
                //    totalAdministrativo = Convert.ToDecimal(fila["total_admin"]);
                //    varAdministrativo = Convert.ToDecimal(fila["var_admin"]);
                //    totalComercial = Convert.ToDecimal(fila["total_comerc"]);
                //    varComercial = Convert.ToDecimal(fila["var_comerc"]);
                //    costeDT = Convert.ToDecimal(fila["costeDT"]);
                //    preciosEnCero = Convert.ToInt32(fila["preciosEnCero"]);
                //}
                //if (preciosEnCero != 0)
                //{
                //    salvarIndicencia(empresa, "PEDIDO", "", "En el cálculo de coste gastos oficina DT hay precios en cero.");
                //    imgWarning.Visible = true;
                //    lblMensajeError.Visible = true;
                //    lblMensajeError.Text = "En el cálculo de coste gastos oficina DT hay precios en cero.";
                //}

                decimal total = 0;
                decimal totalAlquiler = 0;
                decimal totalVenta = 0;
                decimal totalPortes = 0;
                decimal costeDTPorratear = 0;
                decimal totalPortesLinea = 0;
                string tituloAnterior = "";
                decimal totalGastosOficinaDToCapitulo = 0;
                decimal totalGastosOficinaAdministrativoCapitulo = 0;
                decimal totalGastosOficinaComercialCapitulo = 0;

                totalAlquiler = dtValores.AsEnumerable()
                        .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                //totalVenta = dtValores.AsEnumerable()
                //       .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "VENTAS_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                //       .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                totalVenta = dtValores.AsEnumerable()
                       .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                       .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                totalPortes = dtValores.AsEnumerable()
                      .Where(y => y.Field<string>("ETIQUETA") == "FACTURACION_PORTES")
                      .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                //if (chkBoxPortes.Checked)
                    total = totalAlquiler + totalVenta + totalPortes;
                //else
                //    total = totalAlquiler + totalVenta;

                if (total * porcentajeMaximoTotalFacturacion > costeDT)
                    costeDTPorratear = costeDT;
                else
                    costeDTPorratear = total * porcentajeMaximoTotalFacturacion;

                tituloCapitulo = "";
                foreach (DataRow fila in dtTaximetro.Rows)
                {
                    if (fila["CAPITULO"].ToString() != tituloAnterior)
                    {
                        if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                        {
                            dondeVa = "Gastos Oficina Administrativo y Comercial";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                            filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }

                        if (totalGastosOficinaDToCapitulo != 0)
                        {
                            dondeVa = "Gastos Oficina Tecnico";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                            filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                            tituloAnterior = fila["CAPITULO"].ToString();
                        }

                        totalGastosOficinaAdministrativoCapitulo = 0;
                        totalGastosOficinaComercialCapitulo = 0;
                        totalGastosOficinaDToCapitulo = 0;
                    }

                    tituloAnterior = fila["CAPITULO"].ToString();

                    DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                    oItemGastosOficina["CAPITULO"] = fila["CAPITULO"].ToString();
                    oItemGastosOficina["ITEM"] = fila["ITEM"].ToString();
                    oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                    oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                    oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                    oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                    oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                    oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                    oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                    oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                    oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                    oItemGastosOficina["IMPORTE"] = "0.00";

                    oItemGastosOficina["TOTAL FACTURACION"] = total.ToString("#,##0.00");
                    oItemGastosOficina["MAX FACTURACION"] = (total * porcentajeMaximoTotalFacturacion).ToString("#,##0.00");
                    oItemGastosOficina["COSTE DT"] = costeDT.ToString("#,##0.00");

                    //if (chkBoxPortes.Checked)
                    //{
                        if (totalAlquiler + totalVenta != 0)
                            totalPortesLinea = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])) * totalPortes) / (totalAlquiler + totalVenta);
                        else
                            totalPortesLinea = 0;
                    //}

                    // ADMINISTRACION
                    if (totalAnual != 0)
                    {
                        //if (chkBoxPortes.Checked)
                        //{
                            // gastos oficina venta
                            totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                            totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                            oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                            oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                        //}
                        //else
                        //{
                        //    // gastos oficina venta
                        //    totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                        //    totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                        //    oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                        //    oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                        //}
                    }

                    // DT
                    //if (chkBoxPortes.Checked)
                    //{
                        oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea).ToString("#,##0.00");
                        oItemGastosOficina["GASTOS DT"] = (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total).ToString("#,##0.00");
                        totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total);
                    //}
                    //else
                    //{
                    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])).ToString("#,##0.00");
                    //    oItemGastosOficina["GASTOS DT"] = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) * costeDTPorratear) / total).ToString("#,##0.00");
                    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + ((Convert.ToDecimal(oItemGastosOficina["IMPORTE"]) * costeDTPorratear) / total);
                    //}

                    dtGastosOficina.Rows.Add(oItemGastosOficina);
                    oItemGastosOficina = null;
                }
                if (tituloAnterior != "")
                {
                    if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                    {
                        dondeVa = "Gastos Oficina Administrativo y Comercial";
                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                        filaValores[dtValores_CONCEPTO] = tituloAnterior;
                        filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;
                    }

                    if (totalGastosOficinaDToCapitulo != 0)
                    {
                        dondeVa = "Gastos Oficina Tecnico";
                        filaValores = dtValores.NewRow();
                        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                        filaValores[dtValores_CONCEPTO] = tituloAnterior;
                        filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                        dtValores.Rows.Add(filaValores);
                        filaValores = null;
                    }
                }

                horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);
                oItemTiempo = dtTiempos.NewRow();
                oItemTiempo[0] = "TIEMPO PROCESAR ALBARANES";
                oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                dtTiempos.Rows.Add(oItemTiempo);

                // --------

                //dondeVa = "nombre del doc";
                //nombreInforme = Server.MapPath("~/Ficheros excel/" + cmbConcepto.Text + "_" + txtNumero.Text + "_" + DateTime.Now.ToString("yyyy_MM_dd") + ".xlsx");
                //dondeVa = "nuevo doc";
                //SLDocument sl = new SLDocument();
                //dondeVa = "importar tabla";
                //sl.ImportDataTable(1, 1, dtTaximetro, true);
                //dondeVa = "salvar tabla";
                //sl.SaveAs(nombreInforme);
                //btnAbrirExcel.Visible = true;

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                //conexiones.comando.ExecuteNonQuery();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                hora_2 = DateTime.Now.Subtract(hora_1);
                horaProcesar_2 = DateTime.Now.Subtract(horaProcesar_1);

                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@usuario", usuario);
                comando.ExecuteNonQuery();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();
                
                hora_2 = DateTime.Now.Subtract(hora_1);
                pintarArbol(ref dtValores, false, false);

                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "PEDIDO";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
    
                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["COSTE"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

            }
            catch (Exception ex)
            {
                hora_2 = DateTime.Now.Subtract(hora_1);
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular pedido // " + dondeVa + " // " + ex.Message;
                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "PEDIDO";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularPedidoMasivo(ref DataTable dtResultados, int cual, string empresa, List<string> listaNumeros)
        {
            string codigosTransporte = "";
            string dondeVa = "";
            string moneda = "";
            string masterObra = "";
            string nombreFicha = "";
            string numeros = "";
            string numeroPedido = "";
            int numPedido = 0;

            DateTime hora_1 = default(DateTime);
            TimeSpan hora_2 = default(TimeSpan);
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DateTime horaProcesar_1 = default(DateTime);
            TimeSpan horaProcesar_2 = default(TimeSpan);

            DataTable dtArticulosPaneles;

            List<int> listaBonificacionesDesde = new List<int>();
            List<int> listaBonificacionesHasta = new List<int>();
            List<decimal> listaBonificacionesValor = new List<decimal>();

            decimal importeAlquilerGastosFijosBU = 0;
            decimal importeAlquilerGastosFijosCentrales = 0;
            decimal importeCosteBonificacionTaximetroConsumible = 0;

            DataRow filaValores;
            DataRow oItemResultados;
            List<string> listaArticulosSinFicha = new List<string>();
            List<string> listaArticulosPedido = new List<string>();
            List<DateTime> listaFechasPedido = new List<DateTime>();
            List<string> listaOfertas = new List<string>();
            List<DateTime> listaFechasOferta = new List<DateTime>();

            bool esLiquidacion = false;
            bool esVenta = false;
            System.Data.DataTable dtPedidos = new System.Data.DataTable();
            System.Data.DataTable dtAlbaranes = new System.Data.DataTable();
            System.Data.DataTable dtArticulosLiquidacion = new System.Data.DataTable();

            DateTime horaTotal_1 = default(DateTime);
            DateTime horaTotal_SQL = default(DateTime);
            TimeSpan horaTotal_2 = default(TimeSpan);

            DataTable dtTiempos = new DataTable();
            DataRow oItemTiempo;
            dtTiempos.Columns.Add("CONCEPTO");
            dtTiempos.Columns.Add("TIEMPO");

            decimal kilometros = 0;
            decimal cambio = 1;
            DataRow filaPedidos;
            DataRow filaAlbaranes;
            string articulosLiquidacion = "";
            string AAF = "";
            decimal faltan = 0;
            string obraID = "";

            const int dtPedidosAgrupados_fechaCreacion = 0;
            const int dtPedidosAgrupados_aaf = 1;
            const int dtPedidosAgrupados_articulo = 2;
            const int dtPedidosAgrupados_cantidad = 3;
            const int dtPedidosAgrupados_usado = 4;
            const int dtPedidosAgrupados_mixto = 5;
            const int dtPedidosAgrupados_nuevo = 6;

            const int dtAlbaranes_fecha = 0;
            const int dtAlbaranes_aaf = 1;
            const int dtAlbaranes_itemID = 2;
            const int dtAlbaranes_cantidad = 3;
            const int dtAlbaranes_estado = 4;

            System.Data.DataTable dtValores;
            dtValores = new System.Data.DataTable();
            dtValores.Columns.Add("ETIQUETA");
            dtValores.Columns.Add("CONCEPTO");
            dtValores.Columns.Add("IMPORTE");
            dtValores.Columns.Add("PORCENTAJE");

            try
            {
                string usuario = "";
                var guid = Guid.NewGuid();
                var justNumbers = new String(guid.ToString().Where(Char.IsDigit).ToArray());
                var seed = int.Parse(justNumbers.Substring(0, 4));
                var rnd = new Random(seed);
                int numeroRandom;

                hora_1 = DateTime.Now;
                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();

                SqlConnection conexion;

                SqlDataAdapter adaptador;
                System.Data.DataTable dtTabla = new System.Data.DataTable();
                SqlCommand comando;

                numeroRandom = rnd.Next();
                usuario = User.Identity.Name.ToString() + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();
                if (User.Identity.Name.ToString() == "")
                    usuario = "diana" + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();

                SqlDataAdapter adaptadorDatosConfiguracion;
                System.Data.DataTable dtDatosConfiguracion = new System.Data.DataTable();

                bool hayTR001 = false;
                bool existeTR001 = false;
                int lineasBonificacion;
                int duracion = 0;
                int diasCalculados = 0;
                int diasMultiplicar = 0;
                int diasDesdeTaxNoConsumible = 0;
                int diasHastaTaxNoConsumible = 0;
                int diasTaximetroNoConsumibleCalcular = 0;

                string tipoServicio = "";
                string idCapitulo = "";
                string tituloCapitulo = "";

                dtValores = new System.Data.DataTable();
                dtValores.Columns.Add("ETIQUETA");
                dtValores.Columns.Add("CONCEPTO");
                dtValores.Columns.Add("IMPORTE");
                dtValores.Columns.Add("PORCENTAJE");

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();

                DataTable dtTaximetro;
                dtTaximetro = new DataTable();
                dtTaximetro.Columns.Add("FECHA DOC");
                dtTaximetro.Columns.Add("FECHA CAPITULO");
                dtTaximetro.Columns.Add("CAPITULO");
                dtTaximetro.Columns.Add("TIPO CAPITULO");
                dtTaximetro.Columns.Add("MOVIMIENTO");
                dtTaximetro.Columns.Add("ITEM");
                dtTaximetro.Columns.Add("NUEVO/USADO");
                dtTaximetro.Columns.Add("COEF. NUEVO");
                dtTaximetro.Columns.Add("COEF. USADO");
                dtTaximetro.Columns.Add("CANTIDAD");
                dtTaximetro.Columns.Add("EURO/UD/DIA");
                dtTaximetro.Columns.Add("DURACION ESTIMADA");
                dtTaximetro.Columns.Add("FACT ALQUILER");
                dtTaximetro.Columns.Add("FACT TOTAL VENTA");
                dtTaximetro.Columns.Add("FACT VENTA SERVICIO");
                dtTaximetro.Columns.Add("FACT VENTA PRODUCTO");
                dtTaximetro.Columns.Add("CANTIDAD DIAS");
                dtTaximetro.Columns.Add("FECHA PS");
                dtTaximetro.Columns.Add("PS/UD");
                dtTaximetro.Columns.Add("PS/UD ORIGINAL");
                dtTaximetro.Columns.Add("PRECIO CAMBIO");
                dtTaximetro.Columns.Add("PS Corrección N");
                dtTaximetro.Columns.Add("PS Corrección U");
                dtTaximetro.Columns.Add("FECHA CAMBIO");
                dtTaximetro.Columns.Add("CAMBIO");
                dtTaximetro.Columns.Add("TIPO ARTICULO");
                dtTaximetro.Columns.Add("SUPERFICIE");
                dtTaximetro.Columns.Add("COSTE SUPERFICIE");
                dtTaximetro.Columns.Add("PRECIO CONSUMIBLE");
                dtTaximetro.Columns.Add("PRECIO NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("IMPORTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("% AJUSTE");
                dtTaximetro.Columns.Add("AJUSTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("CANTIDAD DIAS TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS DESDE TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS HASTA TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("GASTO VARIABLE");
                dtTaximetro.Columns.Add("IMPORTE GASTO VARIABLE");
                dtTaximetro.Columns.Add("GASTO FIJO BU");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO BU");
                dtTaximetro.Columns.Add("GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("FECHA_CALCULADA");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER GASTOS PATIO");
                dtTaximetro.Columns.Add("VENTA ENTREGA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION");
                dtTaximetro.Columns.Add("VENTA ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA GASTOS PATIO");
                dtTaximetro.Columns.Add("PRECIO GASTOS PATIO");

                dtPedidos.Columns.Add("FECHA_CREACION");
                dtPedidos.Columns.Add("AAF");
                dtPedidos.Columns.Add("ITEM_ID");
                dtPedidos.Columns.Add("SALESQTY");

                dtAlbaranes.Columns.Add("FECHA");
                dtAlbaranes.Columns.Add("AAF");
                dtAlbaranes.Columns.Add("ItemId");
                dtAlbaranes.Columns.Add("Qty");
                dtAlbaranes.Columns.Add("Estado");

                // gastos variables patio
                System.Data.DataTable dtGastosPatio;
                decimal clasificarRepararDirecto;
                decimal clasificarRepararIndirecto;
                decimal clasificarDirecto;
                decimal clasificarIndirecto;
                decimal repararDirecto;
                decimal repararIndirecto;
                decimal entrega = 0;
                decimal devolucion = 0;
                decimal naviera = 0;
                decimal precioGastosPatio = 0;

                decimal importeGastosPatioEntregaDevolucionVentas = 0;
                decimal importeGastosPatioEntregaDevolucionAlquiler = 0;
                decimal importeGastosPatioClasificacionReparacionAlquiler = 0;

                // gastos variables oficina
                int mesPresupuestoValido = 0;
                decimal porcentajeGastoAdmministrativoVariable = 0;
                decimal porcentajeGastoComercialVariable = 0;
                decimal porcentajeMaximoTotalFacturacion = 0;
                System.Data.DataTable dtDatosGastosOficina;
                System.Data.DataTable dtGastosOficina = new System.Data.DataTable();
                dtGastosOficina.Columns.Add("CAPITULO");
                dtGastosOficina.Columns.Add("ITEM");
                dtGastosOficina.Columns.Add("MES PRESUPUESTO VALIDO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO COMERCIAL");
                dtGastosOficina.Columns.Add("PORCENTAJE MAXIMO TOTAL FACTURACON");
                dtGastosOficina.Columns.Add("TOTAL ANUAL");
                dtGastosOficina.Columns.Add("TOTAL ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("VAR ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("GASTOS ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("TOTAL COMERCIAL");
                dtGastosOficina.Columns.Add("VAR COMERCIAL");
                dtGastosOficina.Columns.Add("GASTOS COMERCIAL");
                dtGastosOficina.Columns.Add("TOTAL FACTURACION");
                dtGastosOficina.Columns.Add("MAX FACTURACION");
                dtGastosOficina.Columns.Add("IMPORTE");
                dtGastosOficina.Columns.Add("COSTE DT");
                dtGastosOficina.Columns.Add("GASTOS DT");
                decimal totalAnual = 0;
                decimal totalAdministrativo = 0;
                decimal varAdministrativo = 0;
                decimal totalComercial = 0;
                decimal varComercial = 0;
                decimal costeDT = 0;
                //int preciosEnCero = 0;

                decimal pesoCapitulo = 0;
                decimal pesoTotal = 0;
                decimal coeficienteNuevo = 0;
                decimal coeficienteUsado = 0;
                decimal coeficienteServicio = 0;
                decimal coeficienteUsar = 0;
                decimal coeficienteMixto = 0;
                string tipoArticulo = "";
                decimal porcentajeCosteMaterialNuevo = 0;
                decimal costeFenolicoNuevoEstandar = 0;
                decimal costeFenolicoNuevoEspecial = 0;

                decimal importeCosteMaterialNuevo = 0;
                decimal importeCosteMaterialFenolico = 0;

                DateTime fechaPrecio = DateTime.Now;
                decimal gastosVariablesAlquiler = 0;
                decimal gastosVariablesVenta = 0;
                decimal gastosFijosBUAlquiler = 0;
                decimal gastosFijosBUVenta = 0;
                decimal gastosFijosCentralesAlquiler = 0;
                decimal gastosFijosCentralesVenta = 0;

                bool metersInvoicing = false;
                string productType = "";
                bool calcularPorSuperficie = false;
                decimal superficie = 0;
                decimal costeSuperficie = 0;
                string articulosConfiguracion = "";
                decimal taximetroNoConsumible = 0;
                decimal taximetroConsumible = 0;
                decimal bonificacionTaximetroConsumible = 0;
                decimal precioTaximetroNoConsumible = 0;
                decimal precioTaximetroConsumible = 0;
                string tabla = "";
                string IDCapitulo = "";
                string campo = "";
                int dias = 0;
                int diasxMes = 0;
                int diasDiferencia = 0;
                int diasRestar = 0;
                DateTime fechaPrecios;
                DateTime fechaOfertaPedido;
                bool hayPrecio = false;
                bool primeraVez = true;
                int lineaCapitulo;
                System.Data.DataTable dtArticulos = new System.Data.DataTable();
                DataRow[] filaEncontrada;
                DataRow[] filaEncontradaFenolico;
                string articulos = "";
                string articulosCambio = "";
                decimal precioCoste = 0;
                decimal importeFacturacionAlquilerCapitulos = 0;
                decimal importeCosteTaximetroNoConsumibleCapitulos = 0;
                decimal importeCosteTaximetroConsumibleCapitulos = 0;
                decimal importeCosteBonificacionTaximetroConsumibleCapitulos = 0;
                decimal importeFacturacionVentaCapitulos = 0;
                decimal importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeFacturacionVentFenolicoNuevoCapitulos = 0;
                decimal importeFacturacionVentaUneCifCapitulos = 0;
                decimal importeFacturacionVentaOtrosServiciosCapitulos = 0;
                decimal importeCosteVentaOtrosServiciosCapitulos = 0;
                decimal importeFacturacionVentaMontajesCapitulos = 0;
                decimal importeFacturacionVentaProductoCapitulos = 0;
                decimal importeCosteVentaCapitulos = 0;
                decimal importeGastosVariablesVentaCapitulos = 0;
                decimal importeGastosVariablesAlquilerCapitulos = 0;
                decimal importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                decimal importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;
                decimal importeGastosFijosBUVentaCapitulos = 0;
                decimal importeGastosFijosBUAlquilerCapitulos = 0;
                decimal importeGastosFijosCentralesVentaCapitulos = 0;
                decimal importeGastosFijosCentralesAlquilerCapitulos = 0;

                decimal importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;

                decimal importeCosteVentaFenolicoNuevoCapitulos = 0;
                decimal importeCosteVentaNuevoCapitulos = 0;
                decimal importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                decimal importeCosteVentaUneCifCapitulos = 0;
                decimal importeGastosVariablesVentaUneCifCapitulos = 0;
                decimal importeGastosFijosBUVentaUneCifCapitulos = 0;
                decimal importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                decimal importeCosteVentaMontajesCapitulos = 0;
                decimal importeGastosVariablesVentaMontajesCapitulos = 0;
                decimal importeGastosFijosBUVentaMontajesCapitulos = 0;
                decimal importeGastosFijosCentralesVentaMontajesCapitulos = 0;


                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";
                //txtNombreOferta.Text = "";
                //txtObra.Text = "";
                //txtNombreObra.Text = "";
                //txtCuentaCliente.Text = "";
                //txtMasterObra.Text = "";
                //txtCentroCoste.Text = "";
                //txtMoneda.Text = "";

                horaTotal_1 = DateTime.Now;

                System.Collections.IEnumerator enumerator_1;

                // CABECERA
                decimal importeAlquiler = 0;
                decimal importeVenta = 0;
                decimal importePorte = 0;
                decimal importePorte_TR001 = 0;
                decimal importeCosteTaximetroNoConsumible = 0;
                decimal importeCosteTaximetroConsumible = 0;
                decimal importeCosteVenta = 0;
                decimal importeCostePorte = 0;
                decimal importeMargenAlquiler = 0;
                decimal importeMargenVenta = 0;
                decimal margenPorte = 0;

                fechaPrecios = new DateTime();

                horaLlamada_1 = DateTime.Now;
                tablaPedidos.CallContext contexto_1 = new tablaPedidos.CallContext();
                contexto_1.Company = empresa;

                tablaPedidos.QueryCriteria criterio_1 = new tablaPedidos.QueryCriteria();
                criterio_1.CriteriaElement = new tablaPedidos.CriteriaElement[listaNumeros.Count];
                numeros = "";
                numPedido = 0;
                foreach (string nPedido in listaNumeros)
                {
                    criterio_1.CriteriaElement[numPedido] = new tablaPedidos.CriteriaElement();
                    criterio_1.CriteriaElement[numPedido].FieldName = "SalesID";
                    criterio_1.CriteriaElement[numPedido].DataSourceName = "SalesTable";
                    criterio_1.CriteriaElement[numPedido].Operator = tablaPedidos.Operator.Equal;
                    criterio_1.CriteriaElement[numPedido].Value1 = nPedido;
                    numPedido = numPedido + 1;
                    numeros = numeros + " / " + nPedido;
                }

                tablaPedidos.SalesOrdersServiceClient proxy_1 = new tablaPedidos.SalesOrdersServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "pedidos";
                tablaPedidos.AxdSalesOrders axdtablaPedidos_1 = proxy_1.find(contexto_1, criterio_1);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                horaProcesar_1 = DateTime.Now;
                if (axdtablaPedidos_1.SalesTable is null)
                {
                    proxy_1.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO se ha encontrado el pedido indicado";
                    return;
                }
                else
                {
                    proxy_1.Close();
                    enumerator_1 = axdtablaPedidos_1.SalesTable.GetEnumerator();
                    dtArticulos = new System.Data.DataTable();
                    dtGastosPatio = new System.Data.DataTable();

                    while (enumerator_1.MoveNext())
                    {
                        dondeVa = "datos generales";
                        fechaPrecios = new DateTime();
                        fechaOfertaPedido = new DateTime();
                        articulos = ";";
                        articulosCambio = ";";
                        articulosConfiguracion = "";
                        tablaPedidos.AxdEntity_SalesTable axdEntity_SalesQuotationMasterTable = (tablaPedidos.AxdEntity_SalesTable)enumerator_1.Current;

                        datosGenerales = axdEntity_SalesQuotationMasterTable.SalesId + " / " + axdEntity_SalesQuotationMasterTable.SalesName + " / " + axdEntity_SalesQuotationMasterTable.CurrencyCode + " / " + axdEntity_SalesQuotationMasterTable.Delegation + " / " + axdEntity_SalesQuotationMasterTable.SalesType;
                        numeroPedido = axdEntity_SalesQuotationMasterTable.SalesId;

                        //txtObra.Text = axdEntity_SalesQuotationMasterTable.SalesId;
                        //txtNombreObra.Text = axdEntity_SalesQuotationMasterTable.SalesName;
                        //txtCuentaCliente.Text = axdEntity_SalesQuotationMasterTable.CustAccount;
                        //txtMasterObra.Text = axdEntity_SalesQuotationMasterTable.MasterObrasId;
                        masterObra = axdEntity_SalesQuotationMasterTable.MasterObrasId;
                        //txtCentroCoste.Text = axdEntity_SalesQuotationMasterTable.CostCenter;
                        //txtMoneda.Text = axdEntity_SalesQuotationMasterTable.CurrencyCode;
                        moneda = axdEntity_SalesQuotationMasterTable.CurrencyCode;

                        codigosTransporte = "";
                        calcularCodigosTransporte(ref codigosTransporte, empresa, axdEntity_SalesQuotationMasterTable.Delegation);

                        //if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                        //    cambio = localizarCambio(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value), moneda);
                        //else
                        //    cambio = 1;

                        if (axdEntity_SalesQuotationMasterTable.TipoVenta.ToString().ToUpper() == tablaPedidos.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper())
                        {
                            esLiquidacion = true;
                            // Liquidación por venta
                            if (axdEntity_SalesQuotationMasterTable.SettlementReason.ToString() == "0")
                                esVenta = true;

                            // Liquidación por pérdida MPO
                            if (axdEntity_SalesQuotationMasterTable.SettlementReason.ToString() == "1")
                                esVenta = false;
                        }
                        else
                            esLiquidacion = false;

                        localizarVersion(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        // DATOS PANELES
                        dtArticulosPaneles = new DataTable();
                        dtArticulosPaneles = localizarPaneles(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        //// DATOS CONFIGURACION
                        //horaTotal_SQL = DateTime.Now;
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        //if (cmbVersion.SelectedValue == "")
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        //dr = conexiones.comando.ExecuteReader();
                        //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                        //oItemTiempo = dtTiempos.NewRow();
                        //oItemTiempo[0] = "TIEMPO ROP_DatosConfiguracionGeneral";
                        //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        //dtTiempos.Rows.Add(oItemTiempo);
                        //if (dr.HasRows)
                        //{
                        //    while (dr.Read())
                        //    {
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "DÍAS POR MES")
                        //            diasxMes = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                        //            diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                        //            diasRestar = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));

                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                        //            mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dr["Valor"]));
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                        //            porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                        //            porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                        //            porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dr["Valor"]) / 100);

                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS VARIABLES")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosVariablesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosVariablesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosVariablesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosVariablesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosFijosBUAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosFijosBUVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosFijosBUAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosFijosBUVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //        if (Convert.ToString(dr["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                        //        {
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "ALQUILER")
                        //                gastosFijosCentralesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (Convert.ToString(dr["Tipo"]).ToUpper() == "VENTA")
                        //                gastosFijosCentralesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            if (String.IsNullOrEmpty(Convert.ToString(dr["Tipo"])))
                        //            {
                        //                gastosFijosCentralesAlquiler = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //                gastosFijosCentralesVenta = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //            }
                        //        }
                        //    }
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();

                        // DATOS CONFIGURACION
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                        comando = conexion.CreateCommand();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                        comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                        adaptador.Fill(dtTabla);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();
                        dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                        {
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "DÍAS POR MES")
                                diasxMes = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                                diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                                diasRestar = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                                mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                                porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                                porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                                porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);

                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosCentralesAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosCentralesAlquiler = Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100;
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                        }

                        // DATOS COSTE TRANSPORTE
                        dondeVa = "Recuperar datos transporte ";
                        decimal valorCostePorte = 0;
                        margenPorte = 0;

                        horaTotal_SQL = DateTime.Now;
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@unidadMedida", null);
                        //conexiones.comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        //dr = conexiones.comando.ExecuteReader();
                        //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                        //oItemTiempo = dtTiempos.NewRow();
                        //oItemTiempo[0] = "TIEMPO ROP_TransporteCambiarAKilometros";
                        //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        //dtTiempos.Rows.Add(oItemTiempo);
                        //if (dr.HasRows)
                        //{
                        //    dr.Read();
                        //    kilometros = Convert.ToDecimal(dr["medida"]);
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@unidadMedida", null);
                        comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                            kilometros = Convert.ToDecimal(dtTabla.Rows[i]["medida"]);
                        dondeVa = "Salió de conversion transporte";

                        horaTotal_SQL = DateTime.Now;
                        //conexiones.crearConexion();
                        //conexiones.comando = conexiones.conexion.CreateCommand();
                        //conexiones.comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        //conexiones.comando.CommandTimeout = 240000;
                        //conexiones.comando.CommandType = CommandType.StoredProcedure;
                        //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                        //conexiones.comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        //if (kilometros <= 120)
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", "<= 120");
                        //else
                        //    if (kilometros >= 120)
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", "> 120");
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        //if (cmbVersion.SelectedValue == "")
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                        //else
                        //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        //conexiones.comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        //conexiones.comando.Parameters.AddWithValue("@monedaA", moneda);
                        //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                        //dr = conexiones.comando.ExecuteReader();
                        //horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                        //oItemTiempo = dtTiempos.NewRow();
                        //oItemTiempo[0] = "TIEMPO ROP_DatosConfiguracionTransporte";
                        //oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        //dtTiempos.Rows.Add(oItemTiempo);
                        //if (dr.HasRows)
                        //{
                        //    dr.Read();
                        //    dondeVa = "Hay datos transporte " + empresa + " / " + axdEntity_SalesQuotationMasterTable.Delegation.ToString() + " / " + kilometros.ToString();
                        //    valorCostePorte = (Convert.ToDecimal(dr["Valor"]) / 100);
                        //    margenPorte = Convert.ToDecimal(dr["Margen"]) / 100;
                        //}
                        //dr.Close();
                        //conexiones.comando.Dispose();
                        //conexiones.conexion.Close();
                        //conexiones.conexion.Dispose();
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        if (kilometros <= 120)
                            comando.Parameters.AddWithValue("@distancia", "<= 120");
                        else
                            if (kilometros >= 120)
                            comando.Parameters.AddWithValue("@distancia", "> 120");
                        else
                            comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        comando.Parameters.AddWithValue("@monedaA", moneda);
                        comando.Parameters.AddWithValue("@usuario", usuario);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                        {
                            valorCostePorte = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            margenPorte = Convert.ToDecimal(dtTabla.Rows[i]["Margen"]) / 100;
                        }
                        dondeVa = "Salió de transporte";

                        tablaPedidos.AxdEntity_SalesLine[] axdEntity_SalesQuotationTables = axdEntity_SalesQuotationMasterTable.SalesLine;
                        tablaPedidos.AxdEntity_SalesLine axdEntity_SalesQuotationTable;

                        if (axdEntity_SalesQuotationTables is null)
                            datosGenerales = "NO HAY DATOS DE LOS CAPÍTULOS";
                        else
                        {
                            DateTime horaDatosPase1_1 = DateTime.Now;
                            dondeVa = "Capítulos";
                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];

                                // artículos si hay ficha
                                if (!listaArticulosPedido.Contains(axdEntity_SalesQuotationTable.ItemId.ToString()))
                                {
                                    listaArticulosPedido.Add(axdEntity_SalesQuotationTable.ItemId.ToString());
                                    //if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                                    if (axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString().Length > 0)
                                        listaFechasPedido.Add(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value));
                                    else
                                        listaFechasPedido.Add(new DateTime());
                                }

                                // artículos si no hay ficha
                                if (!listaArticulosSinFicha.Contains(axdEntity_SalesQuotationTable.ItemId.ToString()))
                                {
                                    articulosConfiguracion = articulosConfiguracion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                    listaArticulosSinFicha.Add(axdEntity_SalesQuotationTable.ItemId.ToString());
                                }
                            }
                            TimeSpan horaDatosPase1_2 = DateTime.Now.Subtract(horaDatosPase1_1);

                            // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                            dondeVa = "ROP_DatosConfiguracion";
                            dtDatosConfiguracion = new System.Data.DataTable();
                            conexion = new SqlConnection(strConexion);
                            conexion.Open();
                            comando = conexion.CreateCommand();
                            comando.CommandText = "ROP_DatosConfiguracion";
                            comando.CommandTimeout = 240000;
                            comando.CommandType = CommandType.StoredProcedure;
                            comando.Parameters.AddWithValue("@empresa", empresa);
                            comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                            if (cmbVersion.SelectedValue == "")
                                comando.Parameters.AddWithValue("@CFG_ID", null);
                            else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                comando.Parameters.AddWithValue("@CFG_ID", null);
                            else
                                comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                            comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                            comando.Parameters.AddWithValue("@moneda", moneda);
                            comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                            adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                            adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                            adaptadorDatosConfiguracion.Dispose();
                            comando.Dispose();
                            conexion.Close();
                            conexion.Dispose();

                            // Calculo de la fecha a utilizar
                            //o   ¿La oferta está asociada a una ficha ?
                            //	SI:
                            //•	Fecha base = Fecha base ficha
                            //•	Consultar tabla BaseDateItemObra
                            //	NO:
                            //•	¿Existe cabecera de oferta? (RefQuotationMaster)
                            //o   NO: Fecha base = Fecha creación capitulo
                            //o SI: ¿fecha creación capítulo > p1 días fecha creación cabecera?
                            //	NO: fecha base = fecha creación capitulo
                            //	SI: fecha base = fecha creación capitulo – p2 días
                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                            {
                                fechaPrecios = new DateTime();
                                fechaPrecios = DateTime.Now;
                                fechaBaseFichaArticulo(ref listaOfertas, ref listaFechasOferta, ref listaArticulosPedido, ref listaFechasPedido, empresa, axdEntity_SalesQuotationMasterTable.ObraId.ToString(), diasDiferencia, diasRestar);
                                tabla = "fechaBaseFichaArticulo";
                                IDCapitulo = "Ficha " + axdEntity_SalesQuotationMasterTable.ObraId;
                                campo = "fechaBaseFichaArticulo";

                                articulos = ";";
                                articulosCambio = ";";
                                for (lineaCapitulo = 0; lineaCapitulo < listaArticulosPedido.Count; lineaCapitulo++)
                                {
                                    articulos = articulos + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                                    articulosCambio = articulosCambio + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";

                                    if (listaFechasPedido.ElementAt(lineaCapitulo) < fechaPrecios)
                                        fechaPrecios = listaFechasPedido.ElementAt(lineaCapitulo);
                                }
                            }
                            else
                            {
                                if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.QuotationId))
                                {
                                    fechaOferta(ref fechaOfertaPedido, empresa, axdEntity_SalesQuotationMasterTable.QuotationId.ToString());
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[0];
                                    if (fechaOfertaPedido != new DateTime() && axdEntity_SalesQuotationTable.CreatedDateTime.ToString().Length > 0)
                                    {
                                        if (Math.Abs(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Subtract(fechaOfertaPedido).Days) > diasDiferencia)
                                        {
                                            fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value).AddDays((-1) * diasRestar);
                                            tabla = "Pedido-SalesQuotationTable";
                                            campo = "CreatedDateTime - " + diasRestar.ToString();
                                        }
                                        else
                                        {
                                            fechaPrecios = fechaOfertaPedido;
                                            tabla = "Pedido-SalesQuotationTable";
                                            campo = "CreatedDateTime";
                                        }
                                    }
                                    else
                                    {
                                        if (axdEntity_SalesQuotationTable.CreatedDateTime.ToString().Length > 0)
                                        {
                                            fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                            tabla = "Pedido-SalesQuotationTable";
                                            campo = "CreatedDateTime";
                                        }
                                    }
                                }
                                else
                                {
                                    fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value);
                                    tabla = "Pedido-SalesQuotationMasterTable";
                                    campo = "CreatedDateTime";
                                }
                            }

                            for (lineaCapitulo = 0; lineaCapitulo < listaArticulosSinFicha.Count; lineaCapitulo++)
                            {
                                if (String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                                    articulos = articulos + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                                articulosCambio = articulosCambio + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                            }
                            // Fin calculo de la fecha a utilizar                            

                            dondeVa = "sp_ROP_FechaBaseOfertaIncluir";
                            if (fechaPrecios != new DateTime())
                            {
                                horaTotal_SQL = DateTime.Now;
                                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                                conexion = new SqlConnection(strConexion);
                                conexion.Open();
                                comando = conexion.CreateCommand();
                                comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                                comando.CommandType = CommandType.StoredProcedure;
                                comando.Parameters.AddWithValue("@FBO_Oferta", numeroPedido);
                                comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                                comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                                comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                                comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                                comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                                comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                                comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                                comando.ExecuteNonQuery();
                                conexion.Close();
                                horaTotal_2 = DateTime.Now.Subtract(horaTotal_SQL);
                                oItemTiempo = dtTiempos.NewRow();
                                oItemTiempo[0] = "TIEMPO sp_ROP_FechaBaseOfertaIncluir";
                                oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                                dtTiempos.Rows.Add(oItemTiempo);
                                primeraVez = false;

                                dondeVa = "localizar precios artículos";
                                dtArticulos = localizarPreciosArticulos(empresa, axdEntity_SalesQuotationMasterTable.Delegation.ToString(), articulos, moneda, articulosCambio, "", usuario);
                                hayPrecio = true;
                            }

                            //dtGastosPatio = gastosPatio(articulos, Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Year, txtMoneda.Text, usuario);
                            dtGastosPatio = gastosPatio(empresa, articulos, fechaPrecios, moneda, usuario);

                            DateTime horaDatosConfigurados_1 = DateTime.Now;
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "VALIDAR " + empresa + " // " + usuario;
                            filaValores[dtValores_CONCEPTO] = articulosConfiguracion;
                            filaValores[dtValores_IMPORTE] = "0.00";
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            //datosSQL.datosConfigurados(cmbEmpresa.SelectedItem.ToString(), articulosConfiguracion, usuario);
                            TimeSpan horaDatosConfigurados_2 = DateTime.Now.Subtract(horaDatosConfigurados_1);
                            DateTime horaDatosPase2_1 = DateTime.Now;

                            importePorte = 0;
                            importeFacturacionAlquilerCapitulos = 0;
                            importeFacturacionVentaCapitulos = 0;
                            importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                            importeFacturacionVentFenolicoNuevoCapitulos = 0;
                            importeFacturacionVentaUneCifCapitulos = 0;
                            importeFacturacionVentaOtrosServiciosCapitulos = 0;
                            importeCosteVentaOtrosServiciosCapitulos = 0;
                            importeFacturacionVentaMontajesCapitulos = 0;
                            importeFacturacionVentaProductoCapitulos = 0;
                            importeGastosVariablesAlquilerCapitulos = 0;
                            importeGastosVariablesVentaCapitulos = 0;
                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                            importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                            importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                            importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;
                            importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                            importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                            importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                            importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;

                            importeCosteVentaFenolicoNuevoCapitulos = 0;
                            importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                            importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                            importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                            importeGastosPatioEntregaDevolucionVentas = 0;
                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                            importeGastosPatioClasificacionReparacionAlquiler = 0;

                            importeCosteVentaUneCifCapitulos = 0;
                            importeGastosVariablesVentaUneCifCapitulos = 0;
                            importeGastosFijosBUVentaUneCifCapitulos = 0;
                            importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                            importeCosteVentaMontajesCapitulos = 0;
                            importeGastosVariablesVentaMontajesCapitulos = 0;
                            importeGastosFijosBUVentaMontajesCapitulos = 0;
                            importeGastosFijosCentralesVentaMontajesCapitulos = 0;

                            importeGastosFijosBUAlquilerCapitulos = 0;
                            importeGastosFijosBUVentaCapitulos = 0;

                            importeGastosFijosCentralesAlquilerCapitulos = 0;
                            importeGastosFijosCentralesVentaCapitulos = 0;

                            importeCosteVentaCapitulos = 0;
                            importeCosteTaximetroNoConsumibleCapitulos = 0;
                            importeCosteTaximetroConsumibleCapitulos = 0;
                            importeCosteBonificacionTaximetroConsumibleCapitulos = 0;

                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                dondeVa = "* recorrer capitulos " + capitulo.ToString();

                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];
                                tablaPedidos.AxdEnum_SalesType AxdEnum_SalesType;
                                AxdEnum_SalesType = axdEntity_SalesQuotationTable.SalesType.Value;

                                tituloCapitulo = "";
                                idCapitulo = axdEntity_SalesQuotationMasterTable.SalesId.ToString();
                                if (axdEntity_SalesQuotationMasterTable.SalesName is null)
                                    tituloCapitulo = "";
                                else
                                    tituloCapitulo = " / " + axdEntity_SalesQuotationMasterTable.SalesName.ToString();

                                if (esLiquidacion)
                                {
                                    dondeVa = "liquidación";
                                    if (axdEntity_SalesQuotationMasterTable.ObraId != null)
                                    {
                                        dondeVa = "liquidación - obra id";
                                        obraID = axdEntity_SalesQuotationMasterTable.ObraId.ToString();
                                    }

                                    dondeVa = "dtPedidos";
                                    filaPedidos = dtPedidos.NewRow();
                                    dondeVa = "FECHA_CREACION";
                                    filaPedidos["FECHA_CREACION"] = Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString("yyyyMMdd"));
                                    dondeVa = "AAF";
                                    filaPedidos["AAF"] = Convert.ToString("");
                                    dondeVa = "ITEM_ID";
                                    filaPedidos["ITEM_ID"] = Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString());
                                    dondeVa = "SALESQTY";
                                    filaPedidos["SALESQTY"] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty.ToString());
                                    dondeVa = "dtPedidos add row";
                                    dtPedidos.Rows.Add(filaPedidos);
                                    filaPedidos = null;

                                    dondeVa = "articulosLiquidacion";
                                    articulosLiquidacion = articulosLiquidacion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                }

                                pesoCapitulo = 0;
                                importePorte_TR001 = 0;
                                hayTR001 = false;

                                if (codigosTransporte.IndexOf(axdEntity_SalesQuotationTable.ItemId.ToString().ToUpper()) >= 0)
                                    hayTR001 = true;

                                dondeVa = "Cálculos";
                                DataRow oItemTaximetro = dtTaximetro.NewRow();
                                taximetroNoConsumible = 0;
                                taximetroConsumible = 0;
                                precioTaximetroNoConsumible = 0;
                                precioTaximetroConsumible = 0;
                                costeSuperficie = 0;
                                superficie = 0;
                                calcularPorSuperficie = false;
                                metersInvoicing = false;
                                productType = "";
                                tipoServicio = "";

                                precioCoste = 0;
                                if (hayPrecio)
                                {
                                    dondeVa = "buscar precio dataset";
                                    filaEncontrada = dtArticulos.Select("Articulo = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                    if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(axdEntity_SalesQuotationTable.ItemId.ToString().ToUpper()) == -1)
                                    {
                                        salvarIndicencia(empresa, "PEDIDO", axdEntity_SalesQuotationTable.ItemId.ToString(), "No hay PS del artículo.");

                                        imgWarning.Visible = true;
                                        lblMensajeError.Visible = true;
                                        lblMensajeError.Text = "No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'";
                                        //return;

                                        oItemResultados = dtResultados.NewRow();
                                        oItemResultados["TIPO"] = "PEDIDO // " + axdEntity_SalesQuotationTable.SalesId.ToString();
                                        oItemResultados["EMPRESA"] = empresa;
                                        oItemResultados["NUMERO"] = numeroPedido;
                                        oItemResultados["ERROR"] = "(PED_1) No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'";
                                        dtResultados.Rows.Add(oItemResultados);
                                        oItemResultados = null;
                                    }
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Precio"])))
                                        {
                                            precioCoste = Convert.ToDecimal(fila["Precio"]);
                                            oItemTaximetro[COL_DATA_PRECIO_CAMBIO] = Convert.ToDecimal(fila["Precio"]).ToString("#,##0.00");
                                        }
                                        dondeVa = "fecha dataset // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Fecha"])))
                                            fechaPrecio = Convert.ToDateTime(fila["Fecha"]);

                                        dondeVa = "Precio original // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["PrecioOriginal"])))
                                            oItemTaximetro[COL_DATA_PRECIO_ORIGINAL] = Convert.ToDecimal(fila["PrecioOriginal"]).ToString("#,##0.00");
                                        dondeVa = "Fecha cambio // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["FechaCambio"])))
                                            oItemTaximetro[COL_DATA_FECHA_CAMBIO] = Convert.ToDateTime(fila["FechaCambio"]).ToString("dd/MM/yyyy");
                                        dondeVa = "Cambio // " + articulosCambio + " // ";
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Cambio"])))
                                            oItemTaximetro[COL_DATA_CAMBIO] = Convert.ToDecimal(fila["Cambio"]).ToString("#,##0.000000");
                                    }
                                }

                                // gastos variables patio
                                clasificarRepararDirecto = 0;
                                clasificarRepararIndirecto = 0;
                                clasificarDirecto = 0;
                                clasificarIndirecto = 0;
                                repararDirecto = 0;
                                repararIndirecto = 0;
                                entrega = 0;
                                devolucion = 0;
                                naviera = 0;

                                filaEncontrada = dtGastosPatio.Select("ProductId = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Entrega"])))
                                        entrega = Convert.ToDecimal(fila["Entrega"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                        devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                        naviera = Convert.ToDecimal(fila["Naviera"]);

                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarReparar"])))
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararDirecto"])))
                                            clasificarRepararDirecto = Convert.ToDecimal(fila["ClasificarRepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararIndirecto"])))
                                            clasificarRepararIndirecto = Convert.ToDecimal(fila["ClasificarRepararIndirecto"]);
                                    }
                                    else
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarDirecto"])))
                                            clasificarDirecto = Convert.ToDecimal(fila["ClasificarDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarIndirecto"])))
                                            clasificarIndirecto = Convert.ToDecimal(fila["ClasificarIndirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararDirecto"])))
                                            repararDirecto = Convert.ToDecimal(fila["RepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararIndirecto"])))
                                            repararIndirecto = Convert.ToDecimal(fila["RepararIndirecto"]);
                                    }

                                    precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                }

                                // recuperar datos de configuración del datatable
                                dondeVa = "";
                                listaBonificacionesDesde.Clear();
                                listaBonificacionesHasta.Clear();
                                listaBonificacionesValor.Clear();
                                diasDesdeTaxNoConsumible = 0;
                                diasHastaTaxNoConsumible = 0;
                                decimal pesoArticulo = 0;
                                filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                if (filaEncontrada.Count() == 0)
                                {
                                    oItemResultados = dtResultados.NewRow();
                                    oItemResultados["TIPO"] = "PEDIDO // " + axdEntity_SalesQuotationTable.SalesId.ToString();
                                    oItemResultados["EMPRESA"] = empresa;
                                    oItemResultados["NUMERO"] = numeroPedido;
                                    oItemResultados["ERROR"] = "No se han localizado datos de configuración para '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'";
                                    dtResultados.Rows.Add(oItemResultados);
                                    oItemResultados = null;
                                }
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    dondeVa = "encontró configuracion dataset // " + axdEntity_SalesQuotationTable.ItemId.ToString() + " // ";

                                    dondeVa = "Peso del artículo";
                                    pesoArticulo = Convert.ToDecimal(fila["WeightVolumeKg"]);
                                    dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                        tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                                    dondeVa = "encontró configuracion dataset // Coste superficie";
                                    if (Convert.ToString(fila["Concepto"]) == "Coste superficie")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeSuperficie = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                    dondeVa = "encontró configuracion dataset // Taxímetro consumible";
                                    if (Convert.ToString(fila["Concepto"]) == "Taxímetro consumible")
                                    {
                                        taximetroConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                        dondeVa = "encontró configuracion dataset // Desde Bonificacion";
                                        listaBonificacionesDesde.Add(Convert.ToInt32(fila["Desde"]));
                                        dondeVa = "encontró configuracion dataset // Hasta Bonificacion";
                                        listaBonificacionesHasta.Add(Convert.ToInt32(fila["Hasta"]));
                                        dondeVa = "encontró configuracion dataset // Ajuste Bonificacion";
                                        listaBonificacionesValor.Add(Convert.ToDecimal(fila["Ajuste"]));

                                        calcularPorSuperficie = false;
                                        dondeVa = "encontró configuracion dataset // Valorar";
                                        superficie = 0;
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["Valorar"])))
                                            if (Convert.ToString(fila["Valorar"]).ToUpper() == "SUPERFICIE")
                                            {
                                                calcularPorSuperficie = true;
                                                dondeVa = "encontró configuracion dataset // Superficie";
                                                superficie = Convert.ToDecimal(fila["Superficie"]);
                                            }
                                    }
                                    dondeVa = "encontró configuracion dataset // Tax no consumible";
                                    diasDesdeTaxNoConsumible = 0;
                                    diasHastaTaxNoConsumible = 0;
                                    if (Convert.ToString(fila["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                                    {
                                        dondeVa = "encontró configuracion dataset // Valor tax no consumible";
                                        taximetroNoConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                        diasDesdeTaxNoConsumible = Convert.ToInt32(fila["Desde"]);
                                        diasHastaTaxNoConsumible = Convert.ToInt32(fila["Hasta"]);
                                    }

                                    dondeVa = "encontró configuracion dataset // Meters";
                                    metersInvoicing = Convert.ToBoolean(fila["MetersInvoicing"]);
                                    dondeVa = "encontró configuracion dataset // Tipo producto";
                                    productType = Convert.ToString(fila["ProductTypeName_es"]);

                                    dondeVa = "encontró configuracion dataset // Correcion PS Nuevo";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Nuevo")
                                        coeficienteNuevo = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Correcion PS Usado";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Usado")
                                        coeficienteUsado = Convert.ToDecimal(fila["Valor"]);
                                    //if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Servicio")
                                    //    coeficienteServicio = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Tipo artículo";
                                    tipoArticulo = Convert.ToString(fila["TipoArticulo"]);

                                    // Fenólico / Nuevo
                                    if (Convert.ToString(fila["Concepto"]) == "Porcentaje coste material nuevo")
                                        porcentajeCosteMaterialNuevo = Convert.ToDecimal(fila["Valor"]);
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel estándar")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEstandar = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel especial")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEspecial = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                }

                                dondeVa = "salio configuracion dataset";

                                dondeVa = "Artículo nuevo/usado";

                                importeCosteMaterialNuevo = 0;
                                importeCosteMaterialFenolico = 0;

                                if (tipoArticulo == "NUEVO")
                                {
                                    coeficienteUsar = coeficienteNuevo;
                                    oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteNuevo).ToString("#,##0.00");

                                    importeCosteMaterialNuevo = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * precioCoste * porcentajeCosteMaterialNuevo);
                                }
                                if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                {
                                    coeficienteUsar = coeficienteServicio;
                                    oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteServicio).ToString("#,##0.00");
                                }
                                if (tipoArticulo == "USADO")
                                {
                                    coeficienteUsar = coeficienteUsado;
                                    oItemTaximetro[COL_DATA_PRECIO_CORRECION_USADO] = (precioCoste * coeficienteUsado).ToString("#,##0.00");
                                }

                                dondeVa = "Guarda datos taxímetro";
                                oItemTaximetro[COL_DATA_CAPITULO] = axdEntity_SalesQuotationTable.SalesId.ToString() + tituloCapitulo;
                                oItemTaximetro[COL_DATA_FECHA_DOC] = axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString();
                                oItemTaximetro[COL_DATA_FECHA_CAPITULO] = axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString();
                                oItemTaximetro[COL_DATA_ITEM] = axdEntity_SalesQuotationTable.ItemId.ToString();
                                oItemTaximetro[COL_DATA_TIPO_ITEM] = tipoArticulo;
                                oItemTaximetro[COL_DATA_PRECIO] = precioCoste.ToString("#,##0.00");
                                oItemTaximetro[COL_DATA_FECHA] = fechaPrecio.ToString("dd/MM/yyyy");
                                oItemTaximetro[COL_DATA_TIPO_CAPITULO] = AxdEnum_SalesType.ToString().ToUpper();
                                oItemTaximetro[COL_DATA_PRECIO_GASTOS_PATIO] = precioGastosPatio.ToString("##0.00");
                                oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = 0;
                                oItemTaximetro[COL_DATA_IMPORTE_VENTA] = 0;

                                dondeVa = "Fenólico";
                                //if (tipoArticulo == "MIXTO")
                                //{
                                filaEncontradaFenolico = dtArticulosPaneles.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                foreach (DataRow filaFenolico in filaEncontradaFenolico)
                                {
                                    if (Convert.ToBoolean(filaFenolico["Estandar"]))
                                        importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEstandar);
                                    else
                                        importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEspecial);
                                }

                                importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + importeCosteMaterialFenolico;
                                //}

                                if (AxdEnum_SalesType == tablaPedidos.AxdEnum_SalesType.Sales)
                                {
                                    dondeVa = "VENTAS";

                                    dondeVa = "VENTAS: Gastos variables";
                                    importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio;
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                            importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio;
                                    importeGastosVariablesEntregaDevolucionVentaCapitulos = importeGastosVariablesEntregaDevolucionVentaCapitulos + importeGastosPatioEntregaDevolucionVentas;

                                    oItemTaximetro[COL_DATA_VENTAS_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_VENTAS_DEVOLUCION] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_DEVOLUCION_NAVIERA] = "0.00";
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                            oItemTaximetro[COL_DATA_VENTAS_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");

                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_DIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_INDIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_DIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_INDIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_REPARAR_DIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_REPARAR_INDIRECTO] = "0.00";
                                    oItemTaximetro[COL_DATA_VENTAS_GASTOS_PATIO] = importeGastosPatioEntregaDevolucionVentas.ToString("##0.00");

                                    dondeVa = "VENTAS: Guardar coeficiente nuevo/usado";
                                    if (tipoArticulo == "NUEVO")
                                        oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteNuevo.ToString("##0.00");
                                    if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                        oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteServicio.ToString("##0.00");
                                    if (tipoArticulo == "USADO")
                                        oItemTaximetro[COL_DATA_COEFICIENTE_USADO] = coeficienteUsado.ToString("##0.00");

                                    dondeVa = "VENTAS: Calcular importe venta";
                                    importeVenta = importeVenta + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                    importeFacturacionVentaCapitulos = importeFacturacionVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);

                                    // mail 29/07/2021 Nacho: configuración manda sobre tipo producto
                                    if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                    {
                                        importeFacturacionVentaDepartamentoTecnicoCapitulos = importeFacturacionVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                        // COSTE
                                        importeCosteVentaDepartamentoTecnicoCapitulos = importeCosteVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste * coeficienteUsar;
                                        // Gastos variables
                                        //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                        //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + importeGastosPatioVentas;
                                        // Gastos fijos BU
                                        importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = importeGastosFijosBUVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                        // Gastos fijos centrales
                                        importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                    }
                                    else if (tipoServicio.ToUpper() == "MONTAJES")
                                    {
                                        importeFacturacionVentaMontajesCapitulos = importeFacturacionVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                        // COSTE
                                        importeCosteVentaMontajesCapitulos = importeCosteVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * precioCoste;
                                        // Gastos variables
                                        //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                        //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + importeGastosPatioVentas;
                                        // Gastos fijos BU
                                        importeGastosFijosBUVentaMontajesCapitulos = importeGastosFijosBUVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                        // Gastos fijos centrales
                                        importeGastosFijosCentralesVentaMontajesCapitulos = importeGastosFijosCentralesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                    }
                                    else
                                    {
                                        if (productType.Trim().ToUpper() == "SERVICIO")
                                        {
                                            dondeVa = "VENTAS: Servicio";
                                            // Fenólico
                                            if (axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                            {
                                                //if (chkBoxFenolico.Checked)
                                                importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.CanonFenolico));
                                                // COSTE
                                                //importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.CanonFenolico); 
                                                // Gastos variables
                                                //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaFenolicoNuevoCapitulos = importeGastosFijosBUVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = importeGastosFijosCentralesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            // SVP/CIF
                                            else if (axdEntity_SalesQuotationTable.CanonImport.HasValue && axdEntity_SalesQuotationTable.CanonImport != 0)
                                            {
                                                importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                                // COSTE
                                                importeCosteVentaUneCifCapitulos = importeCosteVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste) * (Convert.ToDecimal(axdEntity_SalesQuotationTable.Canon) / 100));
                                                // Gastos variables
                                                //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaUneCifCapitulos = importeGastosFijosBUVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaUneCifCapitulos = importeGastosFijosCentralesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            // OTROS SERVICIOS
                                            else
                                            {
                                                importeFacturacionVentaOtrosServiciosCapitulos = importeFacturacionVentaOtrosServiciosCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                                // COSTE
                                                importeCosteVentaOtrosServiciosCapitulos = importeCosteVentaOtrosServiciosCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste));
                                            }
                                            oItemTaximetro[COL_DATA_IMPORTE_VENTA_SERVICIO] = Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount).ToString("#,##0.00");
                                        }
                                    }
                                    if (productType.Trim().ToUpper() != "SERVICIO")
                                    {
                                        dondeVa = "VENTAS: Producto";
                                        importeFacturacionVentaProductoCapitulos = importeFacturacionVentaProductoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                        oItemTaximetro[COL_DATA_IMPORTE_VENTA_PRODUCTO] = Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount).ToString("#,##0.00");

                                        dondeVa = "Coste venta";
                                        importeCosteVentaCapitulos = importeCosteVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste * coeficienteUsar;

                                        // Gastos variables
                                        dondeVa = "VENTAS: Gastos variables";
                                        //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta);
                                        //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + importeGastosPatioVentas;

                                        // Gastos fijos BU
                                        dondeVa = "VENTAS: Gastos fijos BU";
                                        importeGastosFijosBUVentaCapitulos = importeGastosFijosBUVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta);

                                        // Gastos fijos centrales
                                        dondeVa = "VENTAS: Gastos fijos centrales";
                                        importeGastosFijosCentralesVentaCapitulos = importeGastosFijosCentralesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta);
                                    }

                                    dondeVa = "VENTAS: Datos en datatble taximetro";
                                    oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_VENTA] = Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_VARIABLE] = gastosVariablesVenta.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_VARIABLE] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosVariablesVenta).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUVenta.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosBUVenta).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesVenta.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * gastosFijosCentralesVenta).ToString("#,##0.00");
                                }

                                if (AxdEnum_SalesType == tablaPedidos.AxdEnum_SalesType.Alquiler)
                                {
                                    // Gastos variables
                                    dondeVa = "ALQUILER: Gastos variables";
                                    importeGastosPatioEntregaDevolucionAlquiler = 0;
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                    {
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * naviera * precioGastosPatio);
                                        }
                                        else
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * precioGastosPatio);
                                        }
                                    }
                                    else
                                    {
                                        importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio;
                                        importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * precioGastosPatio);
                                    }
                                    importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;

                                    importeGastosPatioClasificacionReparacionAlquiler = 0;
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararDirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararIndirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarDirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarIndirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararDirecto * precioGastosPatio);
                                    importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararIndirecto * precioGastosPatio);
                                    importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosPatioClasificacionReparacionAlquiler;

                                    oItemTaximetro[COL_DATA_ALQUILER_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * precioGastosPatio).ToString("##0.00");
                                    if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                    {
                                        if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                        {
                                            oItemTaximetro[COL_DATA_ALQUILER_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * devolucion * naviera * precioGastosPatio).ToString("##0.00");
                                        }
                                    }
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararDirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarRepararIndirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarDirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * clasificarIndirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararDirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * repararIndirecto).ToString("##0.00");
                                    oItemTaximetro[COL_DATA_ALQUILER_GASTOS_PATIO] = (importeGastosPatioEntregaDevolucionAlquiler + importeGastosPatioClasificacionReparacionAlquiler).ToString("##0.00");

                                    // SVP/CIF
                                    if (axdEntity_SalesQuotationTable.CanonImport.HasValue && axdEntity_SalesQuotationTable.CanonImport != 0)
                                        importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesPrice) * Convert.ToDecimal(axdEntity_SalesQuotationTable.Canon)) / 100);

                                    //if (chkBoxFenolico.Checked && axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                    if (axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                        importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.CanonFenolico));

                                    dondeVa = "ALQUILER";
                                    importeAlquiler = importeAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada));
                                    importeFacturacionAlquilerCapitulos = importeFacturacionAlquilerCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada);

                                    // Gastos fijos BU
                                    dondeVa = "ALQUILER: gastos fijos BU";
                                    importeAlquilerGastosFijosBU = importeAlquilerGastosFijosBU + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosBUAlquiler);
                                    importeGastosFijosBUAlquilerCapitulos = importeGastosFijosBUAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosBUAlquiler);

                                    // Gastos fijos centrales
                                    dondeVa = "ALQUILER: gastos centrales";
                                    importeAlquilerGastosFijosCentrales = importeAlquilerGastosFijosCentrales + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosCentralesAlquiler);
                                    importeGastosFijosCentralesAlquilerCapitulos = importeGastosFijosCentralesAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosCentralesAlquiler);

                                    dondeVa = "ALQUILER: Datos en datatble taximetro";
                                    oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_EURO_DIA] = Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia).ToString("#,##0.0000");
                                    oItemTaximetro[COL_DATA_DURACION_ESTIMADA] = Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_VARIABLE] = gastosVariablesAlquiler.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_VARIABLE] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosVariablesAlquiler).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUAlquiler.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosBUAlquiler).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesAlquiler.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationTable.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) * gastosFijosCentralesAlquiler).ToString("#,##0.00");

                                    dondeVa = "Calcular datos taxímetros";
                                    if (taximetroConsumible == 0)
                                    {
                                        precioTaximetroNoConsumible = precioCoste;
                                    }
                                    else
                                    {
                                        if (calcularPorSuperficie)
                                        {
                                            if (!metersInvoicing)
                                            {
                                                precioTaximetroNoConsumible = precioCoste; // (precioCoste - (costeSuperficie * superficie));
                                                precioTaximetroConsumible = 0;
                                            }
                                            else
                                            {
                                                precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                                precioTaximetroConsumible = (costeSuperficie * superficie);
                                            }
                                        }
                                        else
                                        {
                                            precioTaximetroNoConsumible = 0;
                                            precioTaximetroConsumible = precioCoste;
                                        }
                                    }

                                    dondeVa = "Calcular datos taxímetros: superficie";
                                    if (calcularPorSuperficie)
                                    {
                                        if (!metersInvoicing)
                                            oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE / NO meters invoicing";
                                        else
                                            oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE";
                                    }
                                    else
                                        oItemTaximetro[COL_DATA_TIPO] = "";

                                    oItemTaximetro[COL_DATA_TAX_CONSUMIBLE] = taximetroConsumible.ToString("#,##0.0000");
                                    oItemTaximetro[COL_DATA_TAX_NO_CONSUMIBLE] = taximetroNoConsumible.ToString("#,##0.0000");
                                    oItemTaximetro[COL_DATA_SUPERFICIE] = superficie.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_COSTE_SUPERFICIE] = (costeSuperficie * superficie).ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_PRECIO_CONSUMIBLE] = precioTaximetroConsumible.ToString("#,##0.00");
                                    oItemTaximetro[COL_DATA_PRECIO_NO_CONSUMIBLE] = precioTaximetroNoConsumible.ToString("#,##0.00");

                                    importeCosteTaximetroConsumible = importeCosteTaximetroConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) / diasxMes;
                                    importeCosteTaximetroConsumibleCapitulos = importeCosteTaximetroConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) / diasxMes;

                                    dondeVa = "Empieza recorrido bonificación";
                                    oItemTaximetro[COL_DATA_AJUSTE] = "";

                                    duracion = Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada);
                                    diasCalculados = 0;
                                    diasMultiplicar = 0;
                                    while (diasCalculados < duracion)
                                    {
                                        for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                        {
                                            if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                            {
                                                if (duracion - diasCalculados >= diasxMes)
                                                    diasMultiplicar = diasxMes;
                                                else
                                                    diasMultiplicar = duracion - diasCalculados;
                                                bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                oItemTaximetro[COL_DATA_AJUSTE] = oItemTaximetro[COL_DATA_AJUSTE] + "Bonif. (" + bonificacionTaximetroConsumible.ToString("#,##0.0000") + ") * Dias(" + diasMultiplicar.ToString() + ") // ";
                                                if (oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE].ToString() == "")
                                                    oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes).ToString("#,##0.00");
                                                else
                                                    oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = (Convert.ToDecimal(oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE]) + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes)).ToString("#,##0.00");
                                                importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                importeCosteBonificacionTaximetroConsumibleCapitulos = importeCosteBonificacionTaximetroConsumibleCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                            }
                                        }
                                        diasCalculados = diasCalculados + diasxMes;
                                    }
                                    dondeVa = "Fin recorrido bonificación";

                                    oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_DESDE] = diasDesdeTaxNoConsumible.ToString();
                                    oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_HASTA] = diasHastaTaxNoConsumible.ToString();
                                    oItemTaximetro[COL_DATA_IMPORTE_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationTable.DuracionEstimada)) / diasxMes).ToString("#,##0.00");

                                    if (Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada) <= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada) - diasDesdeTaxNoConsumible;
                                    if (Convert.ToInt32(axdEntity_SalesQuotationTable.DuracionEstimada) >= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;

                                    importeCosteTaximetroNoConsumible = importeCosteTaximetroNoConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                    importeCosteTaximetroNoConsumibleCapitulos = importeCosteTaximetroNoConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                    oItemTaximetro[COL_DATA_IMPORTE_NO_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes).ToString("#,##0.00");

                                }

                                if ((importeCosteMaterialNuevo != 0) && (importeCosteMaterialFenolico != 0))
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + (importeCosteMaterialNuevo - importeCosteMaterialFenolico);
                                else
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + importeCosteMaterialNuevo;

                                dtTaximetro.Rows.Add(oItemTaximetro);
                                oItemTaximetro = null;

                                pesoCapitulo = pesoCapitulo + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));
                                pesoTotal = pesoTotal + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));

                                if (codigosTransporte.IndexOf(axdEntity_SalesQuotationTable.ItemId.ToString().ToUpper()) >= 0)
                                {
                                    dondeVa = "VALIDAR TRANSPORTE TR-001";
                                    importePorte_TR001 = importePorte_TR001 + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount);
                                }

                                importePorte = importePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));
                                importeCostePorte = importeCostePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty));

                            }

                            dondeVa = "FIN RECORRIDO CAPÍTULO";

                            importeMargenAlquiler = importeAlquiler - (importeCosteTaximetroNoConsumible + importeCosteTaximetroConsumible - importeCosteBonificacionTaximetroConsumible);
                            importeMargenVenta = importeVenta - importeCosteVenta;
                            dondeVa = "titulo capitulo";
                            tituloCapitulo = "";
                            idCapitulo = axdEntity_SalesQuotationMasterTable.SalesId.ToString();
                            if (axdEntity_SalesQuotationMasterTable.SalesName is null)
                                tituloCapitulo = "";
                            else

                                tituloCapitulo = " / " + axdEntity_SalesQuotationMasterTable.SalesName.ToString();
                            dondeVa = "fuera titulo capitulo";

                            // INICIO PORTES POR CAPÍTULO
                            dondeVa = "Portes por capítulo";
                            //if (chkBoxPortes.Checked && axdEntity_SalesQuotationMasterTable.Delegation.ToString().ToUpper() != "EX" && axdEntity_SalesQuotationMasterTable.GestionPorte == tablaPedidos.AxdEnum_GestionPorte.Alsina && (axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.Todo || axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.SoloEntrega))
                            if (axdEntity_SalesQuotationMasterTable.Delegation.ToString().ToUpper() != "EX" && axdEntity_SalesQuotationMasterTable.GestionPorte == tablaPedidos.AxdEnum_GestionPorte.Alsina && (axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.Todo || axdEntity_SalesQuotationMasterTable.TipoPorte == tablaPedidos.AxdEnum_TipoPorte.SoloEntrega))
                            {
                                dondeVa = "Portes por capítulo (dentro)";
                                if (hayTR001 && importePorte_TR001 > 0)
                                {
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importePorte_TR001.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    importeCostePorte = (-1) * (importePorte_TR001 * (1 - margenPorte));
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importeCostePorte.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (importePorte_TR001 + importeCostePorte).ToString("#,##0.00");
                                    if (((importePorte_TR001) / (1 - margenPorte)) == 0)
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                    else
                                        filaValores[dtValores_PORCENTAJE] = (((importePorte_TR001 + importeCostePorte) / importePorte_TR001) * 100).ToString("#,##0.00");
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((importePorte_TR001 / (1 - margenPorte)) - importePorte_TR001).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    if (esVenta)
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesVenta).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesAlquiler).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }

                                if (!existeTR001)
                                {
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    if (1 - margenPorte != 0)
                                        filaValores[dtValores_IMPORTE] = ((importePorte * 100) / (1 - margenPorte)).ToString("#,##0.00");
                                    else
                                        filaValores[dtValores_IMPORTE] = "0.00";
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importePorte * 100).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                    if (((importePorte * 100) / (1 - margenPorte)) == 0)
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                    else
                                        filaValores[dtValores_PORCENTAJE] = ((((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)) / ((importePorte * 100) / (1 - margenPorte))).ToString("#,##0.00");
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;

                                    if ((1 - margenPorte) != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (esVenta)
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesVenta).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesVenta).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        //filaValores = dtValores.NewRow();
                                        //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                        //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesAlquiler).ToString("#,##0.00");
                                        //filaValores[dtValores_PORCENTAJE] = "0.00";
                                        //dtValores.Rows.Add(filaValores);
                                        //filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }
                            }
                            // FIN PORTES POR CAPÍTULO

                            if (importeGastosVariablesEntregaDevolucionAlquilerCapitulos != 0 || importeGastosVariablesEntregaDevolucionVentaCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 6";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosVariablesEntregaDevolucionVentaCapitulos)).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos != 0 || importeGastosVariablesClaisificacionReparacionVentaCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 6";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosVariablesClaisificacionReparacionVentaCapitulos)).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            dondeVa = "Importes/cantidades venta 1";
                            if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaDepartamentoTecnicoCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaDepartamentoTecnicoCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos) / importeFacturacionVentaDepartamentoTecnicoCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            //if (importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0)
                            //{
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_DEPARTAMENTO_TECNICO";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0 || importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_DEPARTAMENTO_TECNICO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos - importeGastosVariablesVentaDepartamentoTecnicoCapitulos - importeGastosFijosBUVentaDepartamentoTecnicoCapitulos - importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "FENÓLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentFenolicoNuevoCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentFenolicoNuevoCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos) / importeFacturacionVentFenolicoNuevoCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            //if (importeGastosVariablesVentaFenolicoNuevoCapitulos != 0)
                            //{
                            //    filaValores = dtValores.NewRow();
                            //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_FENOLICO_NUEVO";
                            //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                            //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                            //    filaValores[dtValores_PORCENTAJE] = "0.00";
                            //    dtValores.Rows.Add(filaValores);
                            //    filaValores = null;
                            //}

                            if (importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0 || importeGastosVariablesVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_FENOLICO_NUEVO";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos - importeGastosVariablesVentaFenolicoNuevoCapitulos - importeGastosFijosBUVentaFenolicoNuevoCapitulos - importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "SVP_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaUneCifCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaUneCifCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos) / importeFacturacionVentaUneCifCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaOtrosServiciosCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "OTROS_SERVICIOS";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaOtrosServiciosCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaOtrosServiciosCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_OTROS_SERVICIOS";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaOtrosServiciosCapitulos != 0 || importeCosteVentaOtrosServiciosCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_OTROS_SERVICIOS";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaOtrosServiciosCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos) / importeFacturacionVentaOtrosServiciosCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosBUVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0 || importeGastosVariablesVentaUneCifCapitulos != 0 || importeGastosFijosBUVentaUneCifCapitulos != 0 || importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_UNE_CIF";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos - importeGastosVariablesVentaUneCifCapitulos - importeGastosFijosBUVentaUneCifCapitulos - importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionVentaMontajesCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "COSTE_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                if (importeFacturacionVentaMontajesCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos) / importeFacturacionVentaMontajesCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }


                            if (importeGastosFijosBUVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0 || importeGastosVariablesVentaMontajesCapitulos != 0 || importeGastosFijosBUVentaMontajesCapitulos != 0 || importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_MONTAJES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos - importeGastosVariablesVentaMontajesCapitulos - importeGastosFijosBUVentaMontajesCapitulos - importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta productos 1";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                                else
                                {
                                    dondeVa = "Importes/cantidades venta productos 1";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            if (importeCosteVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 2";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "COSTE_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 3";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos).ToString("#,##0.00");
                                    if (importeFacturacionVentaProductoCapitulos == 0)
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                    else
                                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            if (importeGastosFijosBUVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 5";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                                else
                                {
                                    if (esVenta)
                                    {
                                        dondeVa = "Importes/cantidades venta 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        dondeVa = "Importes/cantidades venta 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_LIQUIDACIONES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }
                            }

                            if (importeGastosFijosCentralesVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 6";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                                else
                                {
                                    if (esVenta)
                                    {
                                        dondeVa = "Importes/cantidades venta 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_LIQUIDADO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    else
                                    {
                                        dondeVa = "Importes/cantidades venta 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_LIQUIDACIONES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                }
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                            {
                                if (!esLiquidacion)
                                {
                                    dondeVa = "Importes/cantidades venta 7";
                                    filaValores = dtValores.NewRow();
                                    filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_DIRECTAS";
                                    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    dtValores.Rows.Add(filaValores);
                                    filaValores = null;
                                }
                            }

                            dondeVa = "ALQUILER 2";

                            dondeVa = "Importes/cantidades alquiler 1";
                            if (importeFacturacionAlquilerCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ALQUILERES";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeFacturacionAlquilerCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteTaximetroNoConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 2";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "TAXIMETRO_NO_CONSUMIBLE";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroNoConsumibleCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteTaximetroConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 3";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "TAXIMETRO_CONSUMIBLE";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 4";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "AJUSTE_TAXIMETRO_CONSUMIBLE";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = importeCosteBonificacionTaximetroConsumibleCapitulos.ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionAlquilerCapitulos != 0 || importeCosteTaximetroNoConsumibleCapitulos != 0 || importeCosteTaximetroConsumibleCapitulos != 0 || importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 5";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                if (importeFacturacionAlquilerCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos) / importeFacturacionAlquilerCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosBUAlquilerCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 7";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUAlquilerCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeGastosFijosCentralesAlquilerCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades alquiler 8";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesAlquilerCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionAlquilerCapitulos != 0 || importeCosteTaximetroNoConsumibleCapitulos != 0 || importeCosteTaximetroConsumibleCapitulos != 0 || importeCosteBonificacionTaximetroConsumibleCapitulos != 0 || importeGastosVariablesAlquilerCapitulos != 0 || importeGastosFijosBUAlquilerCapitulos != 0 || importeGastosFijosCentralesAlquilerCapitulos != 0)
                            {
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_ALQUILER";
                                filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationMasterTable.SalesId.ToString() + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionAlquilerCapitulos - (importeCosteTaximetroNoConsumibleCapitulos + importeCosteTaximetroConsumibleCapitulos - importeCosteBonificacionTaximetroConsumibleCapitulos) - importeGastosVariablesAlquilerCapitulos - importeGastosFijosBUAlquilerCapitulos - importeGastosFijosCentralesAlquilerCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }
                        }
                    }
                    dtArticulos.Dispose();
                    dondeVa = "finalizó";
                    //proxy_1.Close();

                    dondeVa = "TIEMPO PROCESAR PEDIDOS";
                    horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);
                    oItemTiempo = dtTiempos.NewRow();
                    oItemTiempo[0] = "TIEMPO PROCESAR PEDIDOS";
                    oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                    dtTiempos.Rows.Add(oItemTiempo);

                    dondeVa = "listados clear";
                    listaArticulosSinFicha.Clear();
                    listaArticulosPedido.Clear();
                    listaFechasPedido.Clear();
                    listaOfertas.Clear();
                    listaFechasOferta.Clear();
                    //} aqui 

                    // SI HAY LIQUIDACIONES --> ALBARANES DE ENTREGA
                    dondeVa = "liquidaciones";
                    horaTotal_1 = DateTime.Now;

                    decimal dec_importeCosteMPOMixto = 0;
                    decimal dec_importeCosteMPONuevo = 0;
                    decimal dec_importeCosteMPOUsado = 0;

                    if (articulosLiquidacion != "" && obraID != "")
                    {
                        // Buscar estado de los artículos 
                        dondeVa = "Datos estado artículos";

                        dtArticulosLiquidacion = localizarEstadoArticulos(usuario, "");
                        if (dtArticulosLiquidacion.Columns.Count == 0)
                            dondeVa = "va a petar // " + articulosLiquidacion + " // usuario // " + usuario;
                        // Actualizo AAF en el data de pedidos
                        //dondeVa = "Actualizar AAF en dtPedidos";
                        foreach (DataRow filaPedido in dtPedidos.Rows)
                        {
                            filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + filaPedido["ITEM_ID"].ToString() + "'");
                            foreach (DataRow filaAAF in filaEncontrada)
                            {
                                filaPedido["AAF"] = Convert.ToString(filaAAF["AAF"]);
                                break;
                            }
                        }

                        dondeVa = "Datos ws albaranes de entrega";
                        System.Collections.IEnumerator enumerator_AlbaranEntrega;
                        // CABECERA
                        dondeVa = "contexto_AlbaranEntrega";
                        tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega = new tablaAlbaranesEntrega.CallContext();
                        contexto_AlbaranEntrega.Company = empresa;

                        dondeVa = "criterio";
                        tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega = new tablaAlbaranesEntrega.QueryCriteria();
                        criterio_AlbaranEntrega.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                        //ProjTable_AlbaranEntrega
                        criterio_AlbaranEntrega.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                        criterio_AlbaranEntrega.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                        criterio_AlbaranEntrega.CriteriaElement[0].FieldName = "ObraId";
                        criterio_AlbaranEntrega.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                        criterio_AlbaranEntrega.CriteriaElement[0].Value1 = obraID;

                        dondeVa = "credenciales";
                        tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega = new tablaAlbaranesEntrega.CustPackingServiceClient();
                        proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                        proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                        proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                        dondeVa = "proxy";
                        tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking = proxy_AlbaranEntrega.find(contexto_AlbaranEntrega, criterio_AlbaranEntrega);
                        datosGenerales = "";
                        dondeVa = "validar";

                        horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);
                        oItemTiempo = dtTiempos.NewRow();
                        oItemTiempo[0] = "TIEMPO tablaAlbaranesEntrega";
                        oItemTiempo[1] = horaTotal_2.Minutes.ToString("00") + ":" + horaTotal_2.Seconds.ToString("00") + ":" + horaTotal_2.Milliseconds.ToString("00");
                        dtTiempos.Rows.Add(oItemTiempo);
                        horaTotal_1 = DateTime.Now;

                        if (AxdCustPacking.CustPackingSlipTrans.Equals(null))
                        {
                            proxy_AlbaranEntrega.Close();
                        }
                        else
                        {
                            dondeVa = "recorrer albaranes";
                            enumerator_AlbaranEntrega = AxdCustPacking.CustPackingSlipTrans.GetEnumerator();

                            while (enumerator_AlbaranEntrega.MoveNext())
                            {
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans AxdEntity_CustPackingSlipTrans = (tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans)enumerator_AlbaranEntrega.Current;
                                tipoArticulo = "";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow filaTipo in filaEncontrada)
                                {
                                    dondeVa = "ajustar datos AAF y tipo de artículo: ";
                                    tipoArticulo = Convert.ToString(filaTipo["TipoArticulo"]).ToUpper().Trim();
                                    dondeVa = "Tipo de artículo: " + tipoArticulo;
                                    AAF = Convert.ToString(filaTipo["AAF"]);
                                    dondeVa = "AAF: " + AAF;
                                    //if (tipoArticulo.ToUpper().Trim() != "USADO")
                                    //    hayDistintoUsado = true;

                                    dondeVa = "Incluir en dtAlbaranes";
                                    filaAlbaranes = dtAlbaranes.NewRow();
                                    dondeVa = "Incluir en dtAlbaranes 1";
                                    filaAlbaranes[dtAlbaranes_fecha] = Convert.ToString(AxdEntity_CustPackingSlipTrans.DeliveryDate.ToString("yyyyMMdd"));
                                    dondeVa = "Incluir en dtAlbaranes 2";
                                    filaAlbaranes[dtAlbaranes_aaf] = AAF;
                                    dondeVa = "Incluir en dtAlbaranes 3";
                                    filaAlbaranes[dtAlbaranes_itemID] = Convert.ToString(AxdEntity_CustPackingSlipTrans.ItemId.ToString());
                                    dondeVa = "Incluir en dtAlbaranes 4";
                                    filaAlbaranes[dtAlbaranes_cantidad] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty.ToString());
                                    dondeVa = "Incluir en dtAlbaranes 5";
                                    filaAlbaranes[dtAlbaranes_estado] = tipoArticulo;
                                    dondeVa = "Incluir en dtAlbaranes 6";
                                    dtAlbaranes.Rows.Add(filaAlbaranes);
                                    filaAlbaranes = null;
                                    break;
                                }
                            }
                        }
                        proxy_AlbaranEntrega.Close();

                        // APLASTAR DTPEDIDOS POR FECHA / AAF
                        // 40006251
                        dondeVa = "aplastar dtPedidos";
                        var dataPedidos = from d in dtPedidos.AsEnumerable()
                                          orderby d.Field<string>("FECHA_CREACION"), d.Field<string>("AAF")
                                          group d by new
                                          {
                                              FECHA_CREACION = d.Field<string>("FECHA_CREACION"),
                                              ITEM = d.Field<string>("ITEM_ID"),
                                              CODIGO_AAF = d.Field<string>("AAF"),
                                          } into grupo
                                          select new
                                          {
                                              fecha = grupo.Key.FECHA_CREACION,
                                              aaf = grupo.Key.CODIGO_AAF,
                                              articulo = grupo.Key.ITEM,
                                              cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("SALESQTY")))
                                          };

                        //var data = from d in dtPedidos.AsEnumerable()
                        //           select d; 

                        dondeVa = "copiar a dtPedidosAgrupado";
                        System.Data.DataTable dtPedidosAgrupado = new System.Data.DataTable();

                        dondeVa = "creando columnas en dtPedidosAgrupado";
                        dtPedidosAgrupado.Columns.Add("FECHA");
                        dtPedidosAgrupado.Columns.Add("AAF");
                        dtPedidosAgrupado.Columns.Add("ARTICULO");
                        dtPedidosAgrupado.Columns.Add("CANTIDAD");
                        dtPedidosAgrupado.Columns.Add("USADO");
                        dtPedidosAgrupado.Columns.Add("MIXTO");
                        dtPedidosAgrupado.Columns.Add("NUEVO");

                        dondeVa = "copiando a dtPedidosAgrupado";
                        foreach (var itemPedidos in dataPedidos)
                            dtPedidosAgrupado.Rows.Add(itemPedidos.fecha.ToString(), itemPedidos.aaf.ToString(), itemPedidos.articulo.ToString(), itemPedidos.cantidad.ToString(), "0", "0", "0");

                        // APLASTAR DTALBARANES POR FECHA / AAF / TIPO
                        // 40006251
                        dondeVa = "aplastar dtAlbaranes";
                        var dataAlbaranes = from d in dtAlbaranes.AsEnumerable()
                                            orderby d.Field<string>("FECHA"), d.Field<string>("AAF"), d.Field<string>("Estado")
                                            group d by new
                                            {
                                                FECHA_ALBARAN = d.Field<string>("FECHA"),
                                                CODIGO_AAF = d.Field<string>("AAF"),
                                                ESTADO_ARTICULO = d.Field<string>("Estado"),
                                            } into grupo
                                            select new
                                            {
                                                fecha = grupo.Key.FECHA_ALBARAN,
                                                aaf = grupo.Key.CODIGO_AAF,
                                                estado = grupo.Key.ESTADO_ARTICULO,
                                                cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("QTY")))
                                            };

                        dondeVa = "copiar a dtAlbaranesAgrupado";
                        System.Data.DataTable dtAlbaranesAgrupado = new System.Data.DataTable();

                        dondeVa = "creando columnas en dtAlbaranesAgrupado";
                        dtAlbaranesAgrupado.Columns.Add("FECHA");
                        dtAlbaranesAgrupado.Columns.Add("AAF");
                        dtAlbaranesAgrupado.Columns.Add("CANTIDAD");
                        dtAlbaranesAgrupado.Columns.Add("CANTIDAD_QUEDA");
                        dtAlbaranesAgrupado.Columns.Add("ESTADO");

                        dondeVa = "copiando a dtAlbaranesAgrupado";
                        foreach (var itemAlbaran in dataAlbaranes)
                            dtAlbaranesAgrupado.Rows.Add(itemAlbaran.fecha.ToString(), itemAlbaran.aaf.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.estado.ToString());

                        // DISTRIBUIR DTPEDIDOS USADO / MIXTO / NUEVO
                        // 40006251
                        dondeVa = "distribuir usado / mixto / nuevo";
                        foreach (DataRow filaPedido in dtPedidosAgrupado.Rows)
                        {
                            faltan = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) - Convert.ToInt32(filaPedido[dtPedidosAgrupados_mixto]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]);

                            // USADO
                            if (faltan > 0)
                            {
                                filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'USADO' AND CANTIDAD_QUEDA > '0'");
                                foreach (DataRow filaCantidad in filaEncontrada)
                                {
                                    if (faltan > Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]))
                                    {
                                        filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                        faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                        filaCantidad["CANTIDAD_QUEDA"] = "0";
                                    }
                                    if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                    {
                                        filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + faltan;
                                        filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                        faltan = 0;
                                    }
                                    if (faltan == 0)
                                        break;
                                }
                            }

                            // MIXTO
                            if (faltan > 0)
                            {
                                filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'MIXTO' AND CANTIDAD_QUEDA > '0'");
                                foreach (DataRow filaCantidad in filaEncontrada)
                                {
                                    if (faltan > Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]))
                                    {
                                        filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                        faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                        filaCantidad["CANTIDAD_QUEDA"] = "0";
                                    }
                                    if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                    {
                                        filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + faltan;
                                        filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                        faltan = 0;
                                    }
                                    if (faltan == 0)
                                        break;
                                }
                            }

                            // NUEVO
                            if (faltan > 0)
                            {
                                filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'NUEVO' AND CANTIDAD_QUEDA > '0'");
                                foreach (DataRow filaCantidad in filaEncontrada)
                                {
                                    if (faltan > Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]))
                                    {
                                        filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                        faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                        filaCantidad["CANTIDAD_QUEDA"] = "0";
                                    }
                                    if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                    {
                                        filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + faltan;
                                        filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                        faltan = 0;
                                    }
                                    if (faltan == 0)
                                        break;
                                }
                            }

                            // CALCULO filaPedido[dtPedidosAgrupados_usado] / filaPedido[dtPedidosAgrupados_mixto]  / filaPedido[dtPedidosAgrupados_nuevo]
                            dondeVa = "recuperar coeficiente";
                            filaEncontrada = dtDatosConfiguracion.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' AND Concepto = 'Coef. Corrección PS Nuevo'");
                            foreach (DataRow filaTax in filaEncontrada)
                                coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                            filaEncontrada = dtDatosConfiguracion.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' AND Concepto = 'Coef. Corrección PS Usado'");
                            foreach (DataRow filaTax in filaEncontrada)
                            {
                                coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                coeficienteMixto = Convert.ToDecimal(filaTax["Valor"]);
                            }

                            precioCoste = 0;
                            dondeVa = "recuperar precio";
                            if (hayPrecio)
                            {
                                dondeVa = "buscar precio dataset // " + articulos;
                                filaEncontrada = dtArticulos.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "'");
                                if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(filaPedido[dtPedidosAgrupados_articulo].ToString().ToUpper()) == -1)
                                {
                                    salvarIndicencia(empresa, "PEDIDO", filaPedido[dtPedidosAgrupados_articulo].ToString(), "No hay PS del artículo.");

                                    imgWarning.Visible = true;
                                    lblMensajeError.Visible = true;
                                    lblMensajeError.Text = "No se ha localizado el precio del articulo '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "'";
                                    //return;
                                }
                                foreach (DataRow filaprecio in filaEncontrada)
                                {
                                    nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                        precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                }
                            }

                            dondeVa = "calcular coste MPO";
                            importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                            importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                            importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);

                            dec_importeCosteMPOMixto = dec_importeCosteMPOMixto + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                            dec_importeCosteMPONuevo = dec_importeCosteMPONuevo + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                            dec_importeCosteMPOUsado = dec_importeCosteMPOUsado + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                        }

                        if (esVenta)
                        {
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; // "COSTE_VENTAS_MATERIAL_ALQUILADO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - MIXTO";
                            filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOMixto)).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; //"COSTE_VENTAS_MATERIAL_ALQUILADO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - NUEVO";
                            filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPONuevo)).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; //"COSTE_VENTAS_MATERIAL_ALQUILADO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - USADO";
                            filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOUsado)).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            if (importeFacturacionVentaProductoCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades venta 3";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES"; // "MARGEN_VENTAS_MATERIAL_ALQUILADO";
                                filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado).ToString("#,##0.00");
                                if (importeFacturacionVentaProductoCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades venta 7";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_MATERIAL_ALQUILADO";
                                filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }
                        }
                        else
                        {
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - MIXTO";
                            filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOMixto)).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - NUEVO";
                            filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPONuevo)).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                            filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo + " - USADO";
                            filaValores[dtValores_IMPORTE] = ((-1) * Math.Abs(dec_importeCosteMPOUsado)).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;

                            if (importeFacturacionVentaProductoCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades venta 3";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES"; // "MARGEN_VENTAS_LIQUIDACIONES";
                                filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado).ToString("#,##0.00");
                                if (importeFacturacionVentaProductoCapitulos == 0)
                                    filaValores[dtValores_PORCENTAJE] = "0.00";
                                else
                                    filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (importeFacturacionVentaProductoCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                            {
                                dondeVa = "Importes/cantidades venta 7";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_LIQUIDACIONES";
                                filaValores[dtValores_CONCEPTO] = idCapitulo + tituloCapitulo;
                                filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - dec_importeCosteMPOMixto - dec_importeCosteMPONuevo - dec_importeCosteMPOUsado - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }
                        }
                    }
                    dtDatosConfiguracion.Dispose();

                    decimal total = 0;
                    decimal totalAlquiler = 0;
                    decimal totalVenta = 0;
                    decimal totalPortes = 0;
                    decimal costeDTPorratear = 0;
                    decimal totalPortesLinea = 0;
                    string tituloAnterior = "";
                    decimal totalGastosOficinaDToCapitulo = 0;
                    decimal totalGastosOficinaAdministrativoCapitulo = 0;
                    decimal totalGastosOficinaComercialCapitulo = 0;

                    totalAlquiler = dtValores.AsEnumerable()
                            .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES")
                            .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    totalVenta = dtValores.AsEnumerable()
                           .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                           .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    totalPortes = dtValores.AsEnumerable()
                          .Where(y => y.Field<string>("ETIQUETA") == "FACTURACION_PORTES")
                          .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    //if (chkBoxPortes.Checked)
                    total = totalAlquiler + totalVenta + totalPortes;
                    //else
                    //    total = totalAlquiler + totalVenta;

                    if (total * porcentajeMaximoTotalFacturacion > costeDT)
                        costeDTPorratear = costeDT;
                    else
                        costeDTPorratear = total * porcentajeMaximoTotalFacturacion;

                    tituloCapitulo = "";
                    foreach (DataRow fila in dtTaximetro.Rows)
                    {
                        if (fila["CAPITULO"].ToString() != tituloAnterior)
                        {
                            if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                            {
                                dondeVa = "Gastos Oficina Administrativo y Comercial";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                                filaValores[dtValores_CONCEPTO] = tituloAnterior;
                                filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                            }

                            if (totalGastosOficinaDToCapitulo != 0)
                            {
                                dondeVa = "Gastos Oficina Tecnico";
                                filaValores = dtValores.NewRow();
                                filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                                filaValores[dtValores_CONCEPTO] = tituloAnterior;
                                filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                                filaValores[dtValores_PORCENTAJE] = "0.00";
                                dtValores.Rows.Add(filaValores);
                                filaValores = null;
                                tituloAnterior = fila["CAPITULO"].ToString();
                            }

                            totalGastosOficinaAdministrativoCapitulo = 0;
                            totalGastosOficinaComercialCapitulo = 0;
                            totalGastosOficinaDToCapitulo = 0;
                        }

                        tituloAnterior = fila["CAPITULO"].ToString();

                        DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                        oItemGastosOficina["CAPITULO"] = fila["CAPITULO"].ToString();
                        oItemGastosOficina["ITEM"] = fila["ITEM"].ToString();
                        oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                        oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                        oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                        oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                        oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                        oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                        oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                        oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                        oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                        oItemGastosOficina["IMPORTE"] = "0.00";

                        oItemGastosOficina["TOTAL FACTURACION"] = total.ToString("#,##0.00");
                        oItemGastosOficina["MAX FACTURACION"] = (total * porcentajeMaximoTotalFacturacion).ToString("#,##0.00");
                        oItemGastosOficina["COSTE DT"] = costeDT.ToString("#,##0.00");

                        //if (chkBoxPortes.Checked)
                        //{
                        if (totalAlquiler + totalVenta != 0)
                            totalPortesLinea = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])) * totalPortes) / (totalAlquiler + totalVenta);
                        else
                            totalPortesLinea = 0;
                        //}

                        // ADMINISTRACION
                        if (totalAnual != 0)
                        {
                            //if (chkBoxPortes.Checked)
                            //{
                            // gastos oficina venta
                            totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                            totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                            oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                            oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                            //}
                            //else
                            //{
                            //    // gastos oficina venta
                            //    totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                            //    totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                            //    oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                            //    oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                            //}
                        }

                        // DT
                        //if (chkBoxPortes.Checked)
                        //{
                        oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea).ToString("#,##0.00");
                        oItemGastosOficina["GASTOS DT"] = (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total).ToString("#,##0.00");
                        totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total);
                        //}
                        //else
                        //{
                        //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])).ToString("#,##0.00");
                        //    oItemGastosOficina["GASTOS DT"] = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) * costeDTPorratear) / total).ToString("#,##0.00");
                        //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + ((Convert.ToDecimal(oItemGastosOficina["IMPORTE"]) * costeDTPorratear) / total);
                        //}

                        dtGastosOficina.Rows.Add(oItemGastosOficina);
                        oItemGastosOficina = null;
                    }
                    if (tituloAnterior != "")
                    {
                        if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                        {
                            dondeVa = "Gastos Oficina Administrativo y Comercial";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                            filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }

                        if (totalGastosOficinaDToCapitulo != 0)
                        {
                            dondeVa = "Gastos Oficina Tecnico";
                            filaValores = dtValores.NewRow();
                            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                            filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                            filaValores[dtValores_PORCENTAJE] = "0.00";
                            dtValores.Rows.Add(filaValores);
                            filaValores = null;
                        }
                    }

                    hora_2 = DateTime.Now.Subtract(hora_1);
                    pintarArbol(ref dtValores, false, false);

                    oItemResultados = dtResultados.NewRow();
                    //oItemResultados["HILO"] = cual.ToString();
                    oItemResultados["TIPO"] = "PEDIDO";
                    oItemResultados["EMPRESA"] = empresa;
                    oItemResultados["NUMERO"] = numeroPedido;

                    total = dtValores.AsEnumerable()
                        .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                    oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                    total = dtValores.AsEnumerable()
                       .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                    oItemResultados["COSTE"] = total.ToString("#,##0.00");

                    total = dtValores.AsEnumerable()
                        .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                    oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                    oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                    oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                    oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                    dtResultados.Rows.Add(oItemResultados);
                    oItemResultados = null;

                    dtValores.Clear();
                    dtValores = new System.Data.DataTable();
                    dtValores.Columns.Add("ETIQUETA");
                    dtValores.Columns.Add("CONCEPTO");
                    dtValores.Columns.Add("IMPORTE");
                    dtValores.Columns.Add("PORCENTAJE");
                }

                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@usuario", usuario);
                comando.ExecuteNonQuery();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();
            }
            catch (Exception ex)
            {
                hora_2 = DateTime.Now.Subtract(hora_1);
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular pedido // " + dondeVa + " // " + ex.Message;
                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "PEDIDO";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numeroPedido;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularFicha(ref DataTable dtResultados, int cual, string empresa, string numero)
        {
            string codigosTransporte = "";
            DateTime hora_1 = default(DateTime);
            TimeSpan hora_2 = default(TimeSpan);
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DateTime horaProcesar_1 = default(DateTime);
            TimeSpan horaProcesar_2 = default(TimeSpan);

            System.Data.DataTable dtValores;
            dtValores = new System.Data.DataTable();
            dtValores.Columns.Add("ETIQUETA");
            dtValores.Columns.Add("CONCEPTO");
            dtValores.Columns.Add("IMPORTE");
            dtValores.Columns.Add("PORCENTAJE");

            List<string> listaArticulosSinFicha = new List<string>();
            List<string> listaArticulosPedido = new List<string>();
            List<DateTime> listaFechasPedido = new List<DateTime>();
            List<string> listaOfertas = new List<string>();
            List<DateTime> listaFechasOferta = new List<DateTime>();

            SqlDataAdapter adaptador;
            System.Data.DataTable dtTabla = new System.Data.DataTable();

            DataRow oItemResultados;

            DataTable dtGastosPatio = new DataTable();
            DataTable dtCalculoTax = new DataTable();
            DataTable dtValesTransporte = new DataTable();
            DataTable dtAbonoMPO = new DataTable();
            DataTable dtBuenTrato = new DataTable();
            DataTable dtChatarra = new DataTable();
            DataTable dtDevoluciones = new DataTable();
            DataTable dtArticulosPaneles;

            List<int> listaBonificacionesDesde = new List<int>();
            List<int> listaBonificacionesHasta = new List<int>();
            List<decimal> listaBonificacionesValor = new List<decimal>();

            decimal pesoArticulo = 0;
            int cantidadPorte = 0;
            decimal importePorte_TR001 = 0;

            decimal importeCosteTaximetroNoConsumible = 0;
            decimal importeCosteTaximetroConsumible = 0;
            decimal importeCosteVenta = 0;
            decimal importeCostePorte = 0;

            decimal dec_importeCosteMPONuevo = 0;
            decimal dec_importeTotalCosteMPOUsado = 0;
            decimal dec_importeTotalCosteLIQUsado = 0;
            decimal dec_importeCosteLIQ = 0;
            decimal dec_importeCosteChatarra = 0;

            List<string> listaArticulosBuenTrato = new List<string>();
            List<string> listaChatarra = new List<string>();

            List<string> capitulosAlquiler = new List<string>();
            List<string> capitulosTaximetroNoConsumible = new List<string>();
            List<string> capitulosTaximetroConsumible = new List<string>();
            List<string> capitulosVenta = new List<string>();
            List<string> capitulosVentaServicio = new List<string>();
            List<string> capitulosVentaProducto = new List<string>();
            List<string> capitulosPorte = new List<string>();
            List<decimal> dec_importeFacturacionPorteCapitulos = new List<decimal>();
            List<decimal> dec_importeCostePorteCapitulos = new List<decimal>();
            List<decimal> dec_importeMargenPorteCapitulos = new List<decimal>();

            string moneda = "";
            string masterObra = "";
            string nombreFicha = "";
            string delegacion = "";
            string articulosLiquidacion = "";
            codigosTransporte = "";
            calcularCodigosTransporte(ref codigosTransporte, empresa, "");

            DateTime fechaFinal = default(DateTime);
            DateTime fechaFinObra = default(DateTime);

            DataTable dtFacturasCanon = new DataTable();
            DataRow oItemFacturaCanon;
            dtFacturasCanon.Columns.Add("TIPO");
            dtFacturasCanon.Columns.Add("FACTURA");
            dtFacturasCanon.Columns.Add("IMPORTE", typeof(Decimal));

            string dondeVa = "";
            DataRow filaValores;
            int linea = 0;
            decimal dec_importeCosteMPO = 0;

            DataTable dtMovimientosLiquidacion = new DataTable();
            DataTable dtPedidosAlquiler = new DataTable();
            DataTable dtAlbaranes = new DataTable();
            DataTable dtAlbaranesAgrupado = new DataTable();

            dtAlbaranes.Columns.Add("FECHA");
            dtAlbaranes.Columns.Add("AAF");
            dtAlbaranes.Columns.Add("ItemId");
            dtAlbaranes.Columns.Add("Qty");
            dtAlbaranes.Columns.Add("Estado");

            dtPedidosAlquiler.Columns.Add("Numero");
            dtPedidosAlquiler.Columns.Add("Tipo pedido");
            dtPedidosAlquiler.Columns.Add("Venta tipo");
            dtPedidosAlquiler.Columns.Add("Alquiler tipo");

            bool esNaviera = false;
            string salesType = "";
            decimal precioHT = 0;
            string itemBuenTrato = "";
            int lineasBuenTrato = 0;

            // vales de transporte
            DataRow oValeTransporte;
            dtValesTransporte = new DataTable();
            dtValesTransporte.Columns.Add("Albaran");
            dtValesTransporte.Columns.Add("Tipo transporte");

            // abono tax MPO
            decimal importeBonificacion = 0;
            bool limitarAbonoTaxMPO = false;
            decimal porcentajeAbonoTaxMPO = 0;
            decimal porcentajeMaxAbonoTaxMPO = 0;
            decimal totalTax = 0;
            decimal totalBonificacion = 0;
            decimal totalCantidadTaxBonificacion = 0;
            decimal totalCantidadVan = 0;
            decimal totalCantidad = 0;
            decimal abonoMax1 = 0;
            decimal abonoMax2 = 0;
            decimal abonoMPOTC = 0;
            decimal abonoMPOTNC = 0;
            decimal cantidadMPOPositivo = 0;

            DataRow oItemAbonoMPO;
            dtAbonoMPO = new DataTable();
            dtAbonoMPO.Columns.Add("ITEM");
            dtAbonoMPO.Columns.Add("CANTIDAD");
            dtAbonoMPO.Columns.Add("PRECIO");
            dtAbonoMPO.Columns.Add("COEFICIENTE");
            dtAbonoMPO.Columns.Add("TIPO");
            dtAbonoMPO.Columns.Add("TAX-ABONO");
            dtAbonoMPO.Columns.Add("CANTIDAD TAX-ABONO");
            dtAbonoMPO.Columns.Add("TAX-ABONO PROPORCIONAL");
            dtAbonoMPO.Columns.Add("COSTE MPO");
            dtAbonoMPO.Columns.Add("ABONO MAX 1");
            dtAbonoMPO.Columns.Add("ABONO MAX 2");
            dtAbonoMPO.Columns.Add("ABONO MPO");

            // buen trato tablero
            DataRow oItemBuenTrato;
            dtBuenTrato = new DataTable();
            dtBuenTrato.Columns.Add("AAF");
            dtBuenTrato.Columns.Add("Item");
            dtBuenTrato.Columns.Add("Buen Trato Porcentaje");
            dtBuenTrato.Columns.Add("Buen Trato Coeficiente");
            dtBuenTrato.Columns.Add("Taximetro");
            dtBuenTrato.Columns.Add("Abono");
            dtBuenTrato.Columns.Add("Unidades alquiler");
            dtBuenTrato.Columns.Add("Item entregadas");
            dtBuenTrato.Columns.Add("PS entregado");
            dtBuenTrato.Columns.Add("Correccion nuevo entregado");
            dtBuenTrato.Columns.Add("Correccion usado entregado");
            dtBuenTrato.Columns.Add("Unidades nuevo entregado");
            dtBuenTrato.Columns.Add("Unidades usado entregado");
            dtBuenTrato.Columns.Add("Restar MPO");
            dtBuenTrato.Columns.Add("Unidades entregadas nuevo");
            dtBuenTrato.Columns.Add("Unidades entregadas usado");
            dtBuenTrato.Columns.Add("ID tipo del item");
            dtBuenTrato.Columns.Add("Tipo del item");
            dtBuenTrato.Columns.Add("Item Dev.");
            dtBuenTrato.Columns.Add("Item usado");
            dtBuenTrato.Columns.Add("Item chatarra");
            dtBuenTrato.Columns.Add("Item mal estado");
            dtBuenTrato.Columns.Add("Unidades clasificadas");
            dtBuenTrato.Columns.Add("PS devolucion");
            dtBuenTrato.Columns.Add("Correccion nuevo devuelto");
            dtBuenTrato.Columns.Add("Correccion usado devuelto");
            dtBuenTrato.Columns.Add("Unidades MPO");
            dtBuenTrato.Columns.Add("Taximetro-Abono");
            dtBuenTrato.Columns.Add("PS Total Entregado");
            dtBuenTrato.Columns.Add("Pje. Amortizado");
            dtBuenTrato.Columns.Add("VME");
            dtBuenTrato.Columns.Add("VMD");
            dtBuenTrato.Columns.Add("Porcentaje consumido");
            dtBuenTrato.Columns.Add("Coeficiente buen trato");
            dtBuenTrato.Columns.Add("Porcentaje buen trato");
            dtBuenTrato.Columns.Add("Aplicar");
            dtBuenTrato.Columns.Add("Abono buen trato");

            // chatarra
            dtChatarra = new DataTable();
            dtChatarra.Columns.Add("AAF");
            dtChatarra.Columns.Add("Item");
            dtChatarra.Columns.Add("Unidades alquiler");
            dtChatarra.Columns.Add("Item entregadas");
            dtChatarra.Columns.Add("PS entregado");
            dtChatarra.Columns.Add("Correccion nuevo entregado");
            dtChatarra.Columns.Add("Correccion usado entregado");
            dtChatarra.Columns.Add("Unidades nuevo entregado");
            dtChatarra.Columns.Add("Unidades usado entregado");
            dtChatarra.Columns.Add("Restar MPO");
            dtChatarra.Columns.Add("Unidades entregadas nuevo");
            dtChatarra.Columns.Add("Unidades entregadas usado");
            dtChatarra.Columns.Add("ID tipo del item");
            dtChatarra.Columns.Add("Tipo del item");
            dtChatarra.Columns.Add("Item Dev.");
            dtChatarra.Columns.Add("Item usado");
            dtChatarra.Columns.Add("Item chatarra");
            dtChatarra.Columns.Add("Item mal estado");
            dtChatarra.Columns.Add("Unidades clasificadas");
            dtChatarra.Columns.Add("PS devolucion");
            dtChatarra.Columns.Add("Correccion nuevo devuelto");
            dtChatarra.Columns.Add("Correccion usado devuelto");
            dtChatarra.Columns.Add("Unidades MPO");

            DataRow filaMovimiento;
            bool insertar = false;
            bool esCanon = false;
            bool esCanonFenolico = false;
            bool esLiquidacion = false;

            DateTime fecha = DateTime.Today;
            decimal cantidad = 0;
            int restarDias = 0;
            int sumarDias = 0;
            System.Data.DataTable dtPedidosAgrupado = new DataTable();
            const int dtPedidosAgrupados_tipo = 0;
            const int dtPedidosAgrupados_fechaCreacion = 1;
            const int dtPedidosAgrupados_aaf = 2;
            const int dtPedidosAgrupados_articulo = 3;
            const int dtPedidosAgrupados_cantidad = 4;
            const int dtPedidosAgrupados_usado = 5;
            const int dtPedidosAgrupados_mixto = 6;
            const int dtPedidosAgrupados_nuevo = 7;

            const int dtAlbaranes_fecha = 0;
            const int dtAlbaranes_aaf = 1;
            const int dtAlbaranes_itemID = 2;
            const int dtAlbaranes_cantidad = 3;
            const int dtAlbaranes_estado = 4;

            // fenolico // departamento técnico / servicios
            decimal porcentajeCosteMaterialNuevo = 0;
            decimal costeFenolicoNuevoEstandar = 0;
            decimal costeFenolicoNuevoEspecial = 0;
            decimal importeCosteMaterialNuevo = 0;
            decimal importeCosteMaterialFenolico = 0;
            decimal importeCosteVentaFenolicoNuevo = 0;
            decimal importeCosteVentaNuevoCapitulos = 0;
            decimal importeCosteVentaDepartamentoTecnico = 0;
            decimal importeCosteVentaMontajes = 0;
            decimal importeCosteVentaUneCif = 0;
            decimal importeCosteVentaOtrosServicios = 0;
            decimal importeFacturacionVentaDepartamentoTecnico = 0;
            decimal importeFacturacionVentaUneCif = 0;
            decimal importeFacturacionVentFenolicoNuevo = 0;
            decimal importeFacturacionVentaOtrosServicios = 0;
            decimal importeFacturacionAlquiler = 0;
            decimal importeFacturacionVentaMontajes = 0;
            decimal importeFacturacionVentaProducto = 0;
            decimal importeFacturacionVentaLiquidacion = 0;
            decimal importeCosteBonificacionTaximetroConsumible = 0;
            DataRow[] filaEncontradaFenolico;

            // gastos variables oficina
            int mesPresupuestoValido = 0;
            decimal porcentajeGastoAdmministrativoVariable = 0;
            decimal porcentajeGastoComercialVariable = 0;
            decimal porcentajeMaximoTotalFacturacion = 0;
            DataTable dtDatosGastosOficina;
            DataTable dtGastosOficina = new DataTable();
            dtGastosOficina.Columns.Add("CAPITULO");
            dtGastosOficina.Columns.Add("ITEM");
            dtGastosOficina.Columns.Add("MES PRESUPUESTO VALIDO");
            dtGastosOficina.Columns.Add("PORCENTAJE GASTO ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("PORCENTAJE GASTO COMERCIAL");
            dtGastosOficina.Columns.Add("PORCENTAJE MAXIMO TOTAL FACTURACON");
            dtGastosOficina.Columns.Add("TOTAL ANUAL");
            dtGastosOficina.Columns.Add("TOTAL ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("VAR ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("GASTOS ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("TOTAL COMERCIAL");
            dtGastosOficina.Columns.Add("VAR COMERCIAL");
            dtGastosOficina.Columns.Add("GASTOS COMERCIAL");
            dtGastosOficina.Columns.Add("TOTAL FACTURACION");
            dtGastosOficina.Columns.Add("MAX FACTURACION");
            dtGastosOficina.Columns.Add("IMPORTE");
            dtGastosOficina.Columns.Add("COSTE DT");
            dtGastosOficina.Columns.Add("GASTOS DT");
            //decimal totalAnual = 0;
            //decimal totalAdministrativo = 0;
            //decimal varAdministrativo = 0;
            //decimal totalComercial = 0;
            //decimal varComercial = 0;
            //decimal costeDT = 0;
            //int preciosEnCero = 0;

            // gastos variables patio
            dtDevoluciones = new DataTable();
            DataRow oDevoluciones;
            dtDevoluciones.Columns.Add("AAF");
            dtDevoluciones.Columns.Add("ITEM");
            dtDevoluciones.Columns.Add("CANTIDAD SIN NAVIERA", typeof(Decimal));
            dtDevoluciones.Columns.Add("CANTIDAD CON NAVIERA", typeof(Decimal));
            dtDevoluciones.Columns.Add("CANTIDAD SIN NAVIERA QUEDAN", typeof(Decimal));
            dtDevoluciones.Columns.Add("CANTIDAD CON NAVIERA QUEDAN", typeof(Decimal));

            decimal importeGastosPatioEntregaDevolucionVentas = 0;
            decimal importeGastosPatioEntregaDevolucionAlquiler = 0;
            decimal importeGastosVariablesClaisificacionReparacion = 0;

            decimal importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
            decimal importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;

            decimal PlannedHours = 0;
            decimal RealHours = 0;
            DataTable dtGastosPatioCargaDescarga = new DataTable();
            dtGastosPatioCargaDescarga.Columns.Add("ALBARAN");
            dtGastosPatioCargaDescarga.Columns.Add("TIPO");
            dtGastosPatioCargaDescarga.Columns.Add("ITEM");
            dtGastosPatioCargaDescarga.Columns.Add("CANTIDAD", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("ENTREGA", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("DEVOLUCION", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("NAVIERA", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("PRECIO", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("TOTAL", typeof(Decimal));

            DataRow oGastosPatio;
            DataTable dtGastosPatioCalculo = new DataTable();
            dtGastosPatioCalculo.Columns.Add("HOJA TRABAJO");
            dtGastosPatioCalculo.Columns.Add("TIPO");
            dtGastosPatioCalculo.Columns.Add("PLANNED HOURS HT", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("REAL HOURS HT", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("RATIO", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("ITEM");
            dtGastosPatioCalculo.Columns.Add("PLANNED HOURS ITEM", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("HORAS CLASIFICAR REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("PRECIO HORAS CLASIFICAR REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL HORAS CLASIFICAR REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL HORAS CLASIFICAR REPARAR INDIRECTO", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("CANTIDAD REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("PRECIO REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL REPARAR INDIRECTO", typeof(Decimal));

            decimal clasificarRepararDirecto;
            decimal clasificarRepararIndirecto;
            decimal clasificarDirecto;
            decimal clasificarIndirecto;
            decimal repararDirecto;
            decimal repararIndirecto;
            decimal entrega = 0;
            decimal devolucion = 0;
            decimal naviera = 0;
            decimal precioGastosPatio = 0;

            // gastos fijos
            decimal coeficienteGastosFijosAlquilerVenta = 0;
            DataTable dtDatosGastosFijos;
            DataTable dtGastosFijos = new DataTable();
            DataRow oItemGastosFijos;
            dtGastosFijos.Columns.Add("fact_anual_empresa", typeof(Decimal));
            dtGastosFijos.Columns.Add("facturacion_alquiler", typeof(Decimal));
            dtGastosFijos.Columns.Add("facturacion_venta", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_admin", typeof(Decimal));
            dtGastosFijos.Columns.Add("var_admin", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_comerc", typeof(Decimal));
            dtGastosFijos.Columns.Add("var_comerc", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_gf_bu", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_gf_hq", typeof(Decimal));
            dtGastosFijos.Columns.Add("KVBU", typeof(Decimal));
            dtGastosFijos.Columns.Add("KABU", typeof(Decimal));
            dtGastosFijos.Columns.Add("KVHQ", typeof(Decimal));
            dtGastosFijos.Columns.Add("KAHQ", typeof(Decimal));
            dtGastosFijos.Columns.Add("ITEM");
            dtGastosFijos.Columns.Add("TIPO");
            dtGastosFijos.Columns.Add("IMPORTE TOTAL");
            dtGastosFijos.Columns.Add("IMPORTE", typeof(Decimal));
            dtGastosFijos.Columns.Add("BU ALQUILER", typeof(Decimal));
            dtGastosFijos.Columns.Add("BU VENTA", typeof(Decimal));
            dtGastosFijos.Columns.Add("CENTRAL ALQUILER", typeof(Decimal));
            dtGastosFijos.Columns.Add("CENTRAL VENTA", typeof(Decimal));

            try
            {
                string usuario = "";
                var guid = Guid.NewGuid();
                var justNumbers = new String(guid.ToString().Where(Char.IsDigit).ToArray());
                var seed = int.Parse(justNumbers.Substring(0, 4));
                var rnd = new Random(seed);
                //Random rnd = new Random(10);
                int numeroRandom;

                hora_1 = DateTime.Now;

                numeroRandom = rnd.Next();
                usuario = User.Identity.Name.ToString() + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();
                if (User.Identity.Name.ToString() == "")
                    usuario = "diana" + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();

                listaArticulosBuenTrato.Clear();
                listaChatarra.Clear();

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();

                System.Data.DataTable dtArticulosLiquidacion = new System.Data.DataTable();

                DataRow filaPedidosAlquiler;
                DataRow filaAlbaranes;
                DataRow[] filaEncontrada;
                DataRow[] filaEncontradaVenta;
                int lineaCapitulo;
                string tipoServicio = "";
                string tipoArticulo = "";
                string productType = "";
                string AAF = "";
                decimal faltan = 0;

                bool fichaCerrada = false;

                SqlDataAdapter adaptadorDatosConfiguracion;
                SqlDataAdapter adaptadorDatosMovimiento;
                System.Data.DataTable dtDatosConfiguracion = new System.Data.DataTable();
                System.Data.DataTable dtDatosMovimientos;
                int lineasBonificacion;
                int duracion = 0;
                int diasCalculados = 0;
                int diasMultiplicar = 0;
                int totalUnidadesDias = 0;
                int diasDesdeTaxNoConsumible = 0;
                int diasHastaTaxNoConsumible = 0;
                int diasTaximetroNoConsumibleCalcular = 0;
                decimal porcentajeBuenTrato = 0;
                decimal coeficienteBuenTrato = 0;
                decimal taximetroConsumibleBuenTrato = 0;
                decimal taximetroNoConsumibleBuenTrato = 0;
                decimal bonificacionTaximetroConsumibleBuenTrato = 0;

                dtMovimientosLiquidacion.Columns.Add("OBRA");
                dtMovimientosLiquidacion.Columns.Add("ITEM");
                dtMovimientosLiquidacion.Columns.Add("FECHA", typeof(DateTime));
                dtMovimientosLiquidacion.Columns.Add("TIPO MOVIMIENTO");
                dtMovimientosLiquidacion.Columns.Add("CANTIDAD");
                dtMovimientosLiquidacion.Columns.Add("ULTIMO MOV");
                dtMovimientosLiquidacion.Columns.Add("SUMAR");
                dtMovimientosLiquidacion.Columns.Add("RESTAR");
                dtMovimientosLiquidacion.Columns.Add("DURACION");
                dtMovimientosLiquidacion.Columns.Add("UNIDADES DIA");

                decimal coeficienteNuevo = 0;
                decimal coeficienteUsado = 0;
                decimal coeficienteUsar = 0;
                decimal coeficienteMixto = 0;
                decimal bonificacionTaximetroConsumible = 0;

                bool metersInvoicing = false;
                bool calcularPorSuperficie = false;
                decimal superficie = 0;
                decimal cambio = 0;
                decimal costeSuperficie = 0;
                string articulosConfiguracion = "";
                decimal taximetroNoConsumible = 0;
                decimal taximetroConsumible = 0;
                decimal precioTaximetroNoConsumible = 0;
                decimal precioTaximetroConsumible = 0;
                string IDCapitulo = "";
                string tabla = "";
                string campo = "";
                int dias = 0;
                int diasxMes = 0;
                int diasDiferencia = 0;
                int diasRestar = 0;
                DateTime fechaPrecio = DateTime.Now;
                DateTime fechaPrecios = DateTime.Now;
                DateTime fechaFicha = DateTime.Now;
                bool hayPrecio = false;
                System.Data.DataTable dtArticulos = new System.Data.DataTable();
                bool primeraVez = true;
                string articulos = "";
                string articulosCambio = "";
                string articulosLIQ = "";
                DataTable dtArticulosLIQ = new DataTable();
                decimal precioCoste = 0;

                delegacion = "";
                nombreFicha = "";

                dondeVa = "WS FICHA";
                System.Collections.IEnumerator enumerator_Obra;

                // CABECERA
                horaLlamada_1 = DateTime.Now;
                tablaObras.CallContext contexto_Obra = new tablaObras.CallContext();
                contexto_Obra.Company = empresa;

                tablaObras.QueryCriteria criterio_Obra = new tablaObras.QueryCriteria();
                criterio_Obra.CriteriaElement = new tablaObras.CriteriaElement[1];

                //ProjTable_1
                dondeVa = "WS FICHA CRITERIOS";
                criterio_Obra.CriteriaElement[0] = new tablaObras.CriteriaElement();
                criterio_Obra.CriteriaElement[0].DataSourceName = "ObraTable_1";
                criterio_Obra.CriteriaElement[0].FieldName = "ObraId";
                criterio_Obra.CriteriaElement[0].Operator = tablaObras.Operator.Equal;
                criterio_Obra.CriteriaElement[0].Value1 = numero;

                dondeVa = "WS FICHA CONEXION";
                tablaObras.ObrasServiceClient proxy_Obra = new tablaObras.ObrasServiceClient();
                proxy_Obra.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_Obra.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_Obra.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "WS FICHA PROXY";
                tablaObras.AxdObras axdtablaObras_1 = proxy_Obra.find(contexto_Obra, criterio_Obra);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                horaProcesar_1 = DateTime.Now;

                //if (axdtablaObras_1.ObraTable_1.Equals(null))
                if (axdtablaObras_1.ObraTable_1 is null)
                {
                    proxy_Obra.Close();
                }
                else
                {
                    enumerator_Obra = axdtablaObras_1.ObraTable_1.GetEnumerator();

                    dondeVa = "WS FICHA RECORRER";
                    while (enumerator_Obra.MoveNext())
                    {
                        dondeVa = "WS FICHA TABLA 1";
                        tablaObras.AxdEntity_ObraTable_1 AxdEntity_ObraTable = (tablaObras.AxdEntity_ObraTable_1)enumerator_Obra.Current;
                        dondeVa = "WS FICHA TABLA 2";
                        moneda = AxdEntity_ObraTable.CurrencyCode;
                        masterObra = AxdEntity_ObraTable.MasterObrasId;
                        fechaFicha = AxdEntity_ObraTable.FechaApertura;
                        moneda = AxdEntity_ObraTable.CurrencyCode;
                        if (AxdEntity_ObraTable.FechaCierre is null)
                        {
                            fechaFinObra = DateTime.Now;
                            fichaCerrada = false;
                        }
                        else
                        {
                            fechaFinObra = Convert.ToDateTime(AxdEntity_ObraTable.FechaCierre);
                            fichaCerrada = true;
                        }

                        dondeVa = "WS FICHA CON FECHA CIERRE";
                        break;
                    }
                }
                proxy_Obra.Close();
                dondeVa = "WS FICHA SALIR";

                // DATOS PANELES
                dtArticulosPaneles = new DataTable();
                dtArticulosPaneles = localizarPaneles(Convert.ToDateTime(fechaFicha));

                dondeVa = "Recuperar versión a aplicar";
                localizarVersion(fechaFicha);

                // DATOS CONFIGURACION
                SqlConnection conexion;
                string strConexion;

                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;

                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                comando = conexion.CreateCommand();
                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                comando.CommandText = "ROP_DatosConfiguracionGeneral";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@delegacion", null);
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                dtTabla = new System.Data.DataTable();
                adaptador = new SqlDataAdapter(comando);
                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                adaptador.Fill(dtTabla);
                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                adaptador.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();
                dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                //conexiones.comando.CommandText = "ROP_DatosConfiguracionGeneral";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@delegacion", null);
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //dtTabla = new System.Data.DataTable();
                //adaptador= new SqlDataAdapter(conexiones.comando);
                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                //adaptador.Fill(dtTabla);
                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                //adaptador.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                //dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                for (int i = 0; i < dtTabla.Rows.Count; i++)
                {
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "DÍAS POR MES")
                        diasxMes = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                        diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                        diasRestar = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                        mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                        porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                        porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                        porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);

                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "LIMITAR ABONO TAX MPO")
                    {
                        if (Convert.ToInt32(dtTabla.Rows[i]["Valor"]) == 0)
                            limitarAbonoTaxMPO = false;
                        else
                            limitarAbonoTaxMPO = true;
                    }

                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "COEFICIENTE DE GASTOS FIJOS ALQUILER / VENTA")
                        coeficienteGastosFijosAlquilerVenta = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                }

                // CABECERA
                cantidadPorte = 0;
                importeCosteTaximetroNoConsumible = 0;
                importeCosteTaximetroConsumible = 0;
                importeCosteVenta = 0;
                importePorte_TR001 = 0;
                importeCostePorte = 0;

                dondeVa = "RECUPERAR DATOS DE TIPOS MOVIMIENTOS DIAS";
                // RECUPERAR DATOS DE TIPOS MOVIMIENTOS DIAS
                dtDatosMovimientos = new System.Data.DataTable();
                horaDatosConfigurados_3 = DateTime.Now;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "MovimientosAjusteFechaConsulta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                adaptadorDatosMovimiento = new SqlDataAdapter(comando);
                adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                adaptadorDatosMovimiento.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "MovimientosAjusteFechaConsulta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //adaptadorDatosMovimiento = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                //adaptadorDatosMovimiento.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                dondeVa = "LLAMADA";
                // INICIO TAX - BONIFICACION
                int movimientosVan;
                decimal taxNoConsumible = 0;
                DataRow filaPedidos;

                DataView dvPositivo;
                DataView dvNegativo;
                DataRow[] filaEncontradaPositiva;
                DataRow[] filaEncontradaNegativa;
                string item;

                System.Collections.IEnumerator enumerator_Inventario;
                System.Data.DataTable dtItems = new System.Data.DataTable();

                dtItems.Columns.Add("ITEM");

                System.Data.DataTable dtPositivos = new System.Data.DataTable();
                System.Data.DataTable dtNegativos = new System.Data.DataTable();

                System.Data.DataTable dtTODO = new System.Data.DataTable();
                dtTODO.Columns.Add("TIPO MOVIMIENTO");
                dtTODO.Columns.Add("ITEM");
                dtTODO.Columns.Add("FECHA", typeof(DateTime));
                dtTODO.Columns.Add("CANTIDAD", typeof(Decimal));
                dtTODO.Columns.Add("PACKING SLIP");

                DataTable dtPedidos;
                dtPedidos = new System.Data.DataTable();
                dtPedidos.Columns.Add("TIPO");
                dtPedidos.Columns.Add("FECHA_CREACION");
                dtPedidos.Columns.Add("AAF");
                dtPedidos.Columns.Add("ITEM_ID");
                dtPedidos.Columns.Add("SALESQTY");
                dtPedidos.Columns.Add("SALES ID");

                System.Data.DataTable dtMovimientosAgrupados = new System.Data.DataTable();
                dtMovimientosAgrupados.Columns.Add("TIPO MOVIMIENTO");
                dtMovimientosAgrupados.Columns.Add("ITEM");
                dtMovimientosAgrupados.Columns.Add("FECHA", typeof(DateTime));
                dtMovimientosAgrupados.Columns.Add("CANTIDAD", typeof(Decimal));
                dtMovimientosAgrupados.Columns.Add("PACKING SLIP");

                System.Data.DataTable dtMovimientosPositivos = new System.Data.DataTable();
                dtMovimientosPositivos.Columns.Add("TIPO MOVIMIENTO POSITIVO");
                dtMovimientosPositivos.Columns.Add("ITEM POSITIVO");
                dtMovimientosPositivos.Columns.Add("FECHA POSITIVO", typeof(DateTime));
                dtMovimientosPositivos.Columns.Add("CANTIDAD POSITIVO", typeof(Decimal));
                dtMovimientosPositivos.Columns.Add("INVENT LOCATION ID POSITIVO");
                dtMovimientosPositivos.Columns.Add("PACKING SLIP POSITIVO");
                dtMovimientosPositivos.Columns.Add("CANTIDAD PROCESO POSITIVO", typeof(Decimal));

                System.Data.DataTable dtMovimientosNegativos = new System.Data.DataTable();
                dtMovimientosNegativos.Columns.Add("TIPO MOVIMIENTO NEGATIVO");
                dtMovimientosNegativos.Columns.Add("ITEM NEGATIVO");
                dtMovimientosNegativos.Columns.Add("FECHA NEGATIVO", typeof(DateTime));
                dtMovimientosNegativos.Columns.Add("CANTIDAD NEGATIVO", typeof(Decimal));
                dtMovimientosNegativos.Columns.Add("INVENT LOCATION ID NEGATIVO");
                dtMovimientosNegativos.Columns.Add("PACKING SLIP NEGATIVO");
                dtMovimientosNegativos.Columns.Add("CANTIDAD PROCESO NEGATIVO", typeof(Decimal));

                DataTable dtTax;
                dtTax = new System.Data.DataTable();
                dtTax.Columns.Add("ITEM");
                dtTax.Columns.Add("TIPO MOVIMIENTO POSITIVO");
                dtTax.Columns.Add("FECHA POSITIVO", typeof(DateTime));
                dtTax.Columns.Add("CANTIDAD POSITIVO", typeof(Decimal));
                dtTax.Columns.Add("PACKING SLIP POSITIVO");
                dtTax.Columns.Add("TIPO MOVIMIENTO NEGATIVO");
                dtTax.Columns.Add("FECHA NEGATIVO", typeof(DateTime));
                dtTax.Columns.Add("CANTIDAD NEGATIVO", typeof(Decimal));
                dtTax.Columns.Add("PACKING SLIP NEGATIVO");
                dtTax.Columns.Add("CANTIDAD", typeof(Decimal));
                dtTax.Columns.Add("DIAS", typeof(Decimal));
                dtTax.Columns.Add("UNIDADES-DIA", typeof(Decimal));
                dtTax.Columns.Add("PS", typeof(Decimal));
                dtTax.Columns.Add("DIAS MES", typeof(Decimal));
                dtTax.Columns.Add("CALCULAR POR SUPERFICIE", typeof(bool));
                dtTax.Columns.Add("METROS", typeof(Decimal));
                dtTax.Columns.Add("COSTE SUPERFICIE", typeof(Decimal));
                dtTax.Columns.Add("SUPERFICIE", typeof(Decimal));
                dtTax.Columns.Add("% TAX CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("PRECIO TAX CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("TAX CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("% TAX NO CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("PRECIO TAX NO CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("TAX NO CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("BONIFICACION", typeof(Decimal));

                // RECUPERAR DATOS DE TIPOS MOVIMIENTOS DIAS
                dtDatosMovimientos = new System.Data.DataTable();
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "MovimientosAjusteFechaConsulta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@CFG_ID", null);
                comando.Parameters.AddWithValue("@fecha", "26/08/2021");
                adaptadorDatosMovimiento = new SqlDataAdapter(comando);
                adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                adaptadorDatosMovimiento.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "MovimientosAjusteFechaConsulta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //conexiones.comando.Parameters.AddWithValue("@fecha", "26/08/2021");
                //adaptadorDatosMovimiento = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                //adaptadorDatosMovimiento.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                // CABECERA
                tablaInventario.CallContext contexto_inventario = new tablaInventario.CallContext();
                contexto_inventario.Company = empresa;

                tablaInventario.QueryCriteria criterio_inventario = new tablaInventario.QueryCriteria();
                criterio_inventario.CriteriaElement = new tablaInventario.CriteriaElement[1];
                //criterio_inventario.CriteriaElement = new tablaInventario.CriteriaElement[2];

                criterio_inventario.CriteriaElement[0] = new tablaInventario.CriteriaElement();
                criterio_inventario.CriteriaElement[0].DataSourceName = "InventTrans_1";
                criterio_inventario.CriteriaElement[0].FieldName = "obraid";
                criterio_inventario.CriteriaElement[0].Operator = tablaInventario.Operator.Equal;
                criterio_inventario.CriteriaElement[0].Value1 = numero;


                tablaInventario.InventTransOriginServiceClient proxy_inventario = new tablaInventario.InventTransOriginServiceClient();
                proxy_inventario.ClientCredentials.Windows.ClientCredential.Domain = "ALSINA";
                proxy_inventario.ClientCredentials.Windows.ClientCredential.UserName = "cromlec3";
                proxy_inventario.ClientCredentials.Windows.ClientCredential.Password = "CroAls19";

                tablaInventario.AxdInventTrans AxdInventTrans = proxy_inventario.find(contexto_inventario, criterio_inventario);

                if (AxdInventTrans.InventTrans_1 is null)
                //if (AxdInventTrans.InventTrans_1.Equals(null))
                {
                    proxy_inventario.Close();
                }
                else
                {
                    enumerator_Inventario = AxdInventTrans.InventTrans_1.GetEnumerator();
                    movimientosVan = 0;
                    while (enumerator_Inventario.MoveNext())
                    {
                        tablaInventario.AxdEntity_InventTrans_1 AxdEntity_InventTrans_1 = (tablaInventario.AxdEntity_InventTrans_1)enumerator_Inventario.Current;

                        insertar = true;

                        if (AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() == tablaInventario.AxdEnum_InventTransMovementType.LostJobsiteOut.ToString().ToUpper())
                        {
                            filaPedidos = dtPedidos.NewRow();
                            filaPedidos["TIPO"] = "MPO";
                            filaPedidos["FECHA_CREACION"] = Convert.ToString(AxdEntity_InventTrans_1.ValueDate.Value.ToString("yyyyMMdd"));
                            filaPedidos["AAF"] = Convert.ToString("");
                            filaPedidos["ITEM_ID"] = Convert.ToString(AxdEntity_InventTrans_1.ItemId.ToString());
                            filaPedidos["SALESQTY"] = Convert.ToDecimal(((-1) * Convert.ToDecimal(AxdEntity_InventTrans_1.Qty.ToString())).ToString());
                            dtPedidos.Rows.Add(filaPedidos);
                            filaPedidos = null;

                            articulosLiquidacion = articulosLiquidacion + AxdEntity_InventTrans_1.ItemId.ToString() + "|";
                            if (articulosLIQ.IndexOf(Convert.ToString(AxdEntity_InventTrans_1.ItemId.ToString())) < 0)
                                articulosLIQ = articulosLIQ + Convert.ToString(AxdEntity_InventTrans_1.ItemId.ToString()) + "|" + Convert.ToString(AxdEntity_InventTrans_1.ValueDate.Value) + ";";
                        }

                        articulosConfiguracion = articulosConfiguracion + AxdEntity_InventTrans_1.ItemId.ToString() + "|";
                        if (!listaArticulosPedido.Contains(AxdEntity_InventTrans_1.ItemId.ToString()))
                        {
                            listaArticulosPedido.Add(AxdEntity_InventTrans_1.ItemId.ToString());
                            dondeVa = "RECORRER 5";
                            if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                                listaFechasPedido.Add(Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.Value));
                            else
                                listaFechasPedido.Add(fechaFicha);
                        }

                        sumarDias = 0;
                        restarDias = 0;
                        movimientosVan = movimientosVan + 1;
                        if (fichaCerrada && movimientosVan == dtMovimientosAgrupados.Rows.Count && AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() == "LOSTJOBSITEOUT")
                        { }
                        else
                        {
                            filaEncontrada = dtDatosMovimientos.Select("MOV_TipoDescripcion = '" + AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() + "'");
                            foreach (DataRow filaMov in filaEncontrada)
                            {
                                if (Convert.ToChar(filaMov["MOV_Signo"]).ToString() == "+")
                                    sumarDias = Convert.ToInt32(filaMov["MOV_Dias"]);
                                else
                                    restarDias = (-1) * Convert.ToInt32(filaMov["MOV_Dias"]);
                            }
                        }

                        string vpi = "";
                        if (AxdEntity_InventTrans_1.ValuePackingSlip != null)
                            vpi = AxdEntity_InventTrans_1.ValuePackingSlip.ToString().ToUpper();

                        if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                            filaEncontrada = dtMovimientosAgrupados.Select("ITEM = '" + AxdEntity_InventTrans_1.ItemId.ToString() + "' AND FECHA = '" + Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()).AddDays(sumarDias + restarDias).ToString() + "' AND [TIPO MOVIMIENTO] = '" + AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() + "' AND [PACKING SLIP] = '" + vpi + "'");
                        else
                            filaEncontrada = dtMovimientosAgrupados.Select("ITEM = '" + AxdEntity_InventTrans_1.ItemId.ToString() + "' AND FECHA = '" + fechaFicha.ToString() + "' AND [TIPO MOVIMIENTO] = '" + AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() + "' AND [PACKING SLIP] = '" + vpi + "'");

                        foreach (DataRow fila in filaEncontrada)
                        {
                            if (Convert.ToDecimal(fila["CANTIDAD"]) + Convert.ToDecimal(AxdEntity_InventTrans_1.Qty) == 0)
                            {
                                fila["CANTIDAD"] = (Convert.ToDecimal(fila["CANTIDAD"]) + Convert.ToDecimal(AxdEntity_InventTrans_1.Qty)).ToString();
                                fila.AcceptChanges();
                                insertar = false;
                                break;
                            }
                        }

                        if (insertar)
                        {
                            filaMovimiento = dtMovimientosAgrupados.NewRow();
                            filaMovimiento["ITEM"] = AxdEntity_InventTrans_1.ItemId.ToString();
                            if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                                filaMovimiento["FECHA"] = Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()).AddDays(sumarDias + restarDias).ToString();
                            else
                                filaMovimiento["FECHA"] = Convert.ToDateTime(fechaFicha.ToString());
                            filaMovimiento["TIPO MOVIMIENTO"] = AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper();
                            filaMovimiento["CANTIDAD"] = AxdEntity_InventTrans_1.Qty.ToString();
                            filaMovimiento["PACKING SLIP"] = AxdEntity_InventTrans_1.ValuePackingSlip;
                            dtMovimientosAgrupados.Rows.Add(filaMovimiento);
                            filaMovimiento = null;
                        }

                        filaMovimiento = dtTODO.NewRow();
                        filaMovimiento["ITEM"] = AxdEntity_InventTrans_1.ItemId.ToString();
                        if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                            filaMovimiento["FECHA"] = Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()).AddDays(sumarDias + restarDias).ToString();
                        else
                            filaMovimiento["FECHA"] = Convert.ToDateTime(fechaFicha.ToString());
                        filaMovimiento["TIPO MOVIMIENTO"] = AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper();
                        filaMovimiento["CANTIDAD"] = AxdEntity_InventTrans_1.Qty.ToString();
                        filaMovimiento["PACKING SLIP"] = AxdEntity_InventTrans_1.ValuePackingSlip;
                        dtTODO.Rows.Add(filaMovimiento);
                        filaMovimiento = null;
                    }
                }
                proxy_inventario.Close();

                foreach (DataRow filaAgrupada in dtMovimientosAgrupados.Rows)
                {
                    if (Convert.ToDecimal(filaAgrupada["CANTIDAD"]) > 0)
                    {
                        filaMovimiento = dtMovimientosPositivos.NewRow();
                        filaMovimiento["ITEM POSITIVO"] = filaAgrupada["ITEM"].ToString();
                        filaMovimiento["FECHA POSITIVO"] = Convert.ToDateTime(filaAgrupada["FECHA"]);
                        filaMovimiento["TIPO MOVIMIENTO POSITIVO"] = filaAgrupada["TIPO MOVIMIENTO"].ToString().ToUpper();
                        filaMovimiento["CANTIDAD POSITIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["CANTIDAD PROCESO POSITIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["PACKING SLIP POSITIVO"] = filaAgrupada["PACKING SLIP"];
                        dtMovimientosPositivos.Rows.Add(filaMovimiento);
                        filaMovimiento = null;
                    }

                    if (Convert.ToDecimal(filaAgrupada["CANTIDAD"]) < 0)
                    {
                        filaMovimiento = dtMovimientosNegativos.NewRow();
                        filaMovimiento["ITEM NEGATIVO"] = filaAgrupada["ITEM"].ToString();
                        filaMovimiento["FECHA NEGATIVO"] = Convert.ToDateTime(filaAgrupada["FECHA"]);
                        filaMovimiento["TIPO MOVIMIENTO NEGATIVO"] = filaAgrupada["TIPO MOVIMIENTO"].ToString().ToUpper();
                        filaMovimiento["CANTIDAD NEGATIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["CANTIDAD PROCESO NEGATIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["PACKING SLIP NEGATIVO"] = filaAgrupada["PACKING SLIP"];
                        dtMovimientosNegativos.Rows.Add(filaMovimiento);
                        filaMovimiento = null;
                    }
                }

                dvPositivo = dtMovimientosPositivos.DefaultView;
                dvPositivo.Sort = "[ITEM POSITIVO] ASC, [FECHA POSITIVO] ASC, [CANTIDAD PROCESO POSITIVO] DESC";
                dtMovimientosPositivos = null;
                dtMovimientosPositivos = dvPositivo.ToTable();

                dvNegativo = dtMovimientosNegativos.DefaultView;
                dvNegativo.Sort = "[ITEM NEGATIVO] ASC, [FECHA NEGATIVO] ASC, [CANTIDAD PROCESO NEGATIVO] DESC";
                dtMovimientosNegativos = null;
                dtMovimientosNegativos = dvNegativo.ToTable();

                dondeVa = "RECORRER 10";
                if (!String.IsNullOrEmpty(numero))
                {
                    dondeVa = "fecha base ficha artículo: entró";
                    fechaBaseFichaArticulo(ref listaOfertas, ref listaFechasOferta, ref listaArticulosPedido, ref listaFechasPedido, empresa, numero, diasDiferencia, diasRestar);
                    dondeVa = "fecha base ficha artículo: salió";

                    tabla = "fechaBaseFichaArticulo";
                    IDCapitulo = "Ficha " + numero;
                    campo = "fechaBaseFichaArticulo";

                    dondeVa = "crear listado artículos entró " + listaArticulosPedido.Count.ToString() + " // " + listaFechasPedido.Count.ToString();
                    articulos = ";";
                    articulosCambio = ";";
                    for (lineaCapitulo = 0; lineaCapitulo < listaArticulosPedido.Count; lineaCapitulo++)
                    {
                        dondeVa = "1 crear listado artículos va en " + lineaCapitulo.ToString();
                        articulos = articulos + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                        articulosConfiguracion = articulosConfiguracion + listaArticulosPedido.ElementAt(lineaCapitulo) + "|";
                        dondeVa = "2 crear listado artículos va en " + lineaCapitulo.ToString();
                        articulosCambio = articulosCambio + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                        if (listaFechasPedido.ElementAt(lineaCapitulo) < fechaPrecios)
                            fechaPrecios = listaFechasPedido.ElementAt(lineaCapitulo);
                    }
                    dondeVa = "crear listado artículos salió";
                }

                if (fechaPrecios != new DateTime())
                {
                    dondeVa = "insert log";
                    strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                    conexion = new SqlConnection(strConexion);
                    conexion.Open();
                    comando = conexion.CreateCommand();
                    comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                    comando.CommandType = CommandType.StoredProcedure;
                    comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                    comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                    comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                    comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                    comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                    comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                    comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                    comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                    comando.ExecuteNonQuery();
                    conexion.Close();

                    //conexiones.crearConexion();
                    //conexiones.comando = conexiones.conexion.CreateCommand();
                    //conexiones.comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                    //conexiones.comando.CommandType = CommandType.StoredProcedure;
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                    //conexiones.comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                    //conexiones.comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                    //conexiones.comando.ExecuteNonQuery();
                    //conexiones.conexion.Close();
                    primeraVez = false;

                    dondeVa = "localizar precios artículos";
                    dtArticulos = localizarPreciosArticulos(empresa, "", articulos, moneda, articulosCambio, numero, usuario);
                    dondeVa = "salio localizar precios artículos";
                    hayPrecio = true;
                }

                // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                dondeVa = "ROP_DatosConfiguracion";
                dtDatosConfiguracion = new System.Data.DataTable();
                horaDatosConfigurados_3 = DateTime.Now;
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosConfiguracion";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                comando.Parameters.AddWithValue("@moneda", moneda);
                comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                adaptadorDatosConfiguracion.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosConfiguracion";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                //adaptadorDatosConfiguracion = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                //adaptadorDatosConfiguracion.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                horaDatosConfigurados_4 = DateTime.Now.Subtract(horaDatosConfigurados_3);

                dondeVa = "localizarEstadoArticulos";
                dtArticulosLiquidacion = localizarEstadoArticulos(usuario, articulosConfiguracion);

                // RECORRER Y CALCULAR POR ITEM
                dondeVa = "listaArticulosPedido";
                for (linea = 0; linea <= listaArticulosPedido.Count - 1; linea++)
                {
                    item = listaArticulosPedido.ElementAt(linea);

                    // LOCALIZA PRECIO Y VALORES TAX-BONIFICACION
                    filaEncontrada = dtArticulos.Select("Articulo = '" + item + "'");
                    if (filaEncontrada.Count() == 0)
                    {
                        imgWarning.Visible = true;
                        lblMensajeError.Visible = true;
                        lblMensajeError.Text = lblMensajeError.Text + "(TAX) No se ha localizado el precio del articulo '" + item + "' // ";
                    }
                    foreach (DataRow filaprecio in filaEncontrada)
                    {
                        nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                        if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                        {
                            dondeVa = "precioCoste";
                            precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                            break;
                        }
                    }

                    dondeVa = "datos tax configurados";
                    costeSuperficie = 0;
                    taximetroConsumible = 0;
                    listaBonificacionesDesde.Clear();
                    listaBonificacionesHasta.Clear();
                    listaBonificacionesValor.Clear();
                    calcularPorSuperficie = false;
                    superficie = 0;
                    taximetroNoConsumible = 0;
                    diasDesdeTaxNoConsumible = 0;
                    diasHastaTaxNoConsumible = 0;
                    porcentajeBuenTrato = 0;
                    coeficienteBuenTrato = 0;

                    filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + item + "'");
                    foreach (DataRow filaTax in filaEncontrada)
                    {
                        if (Convert.ToString(filaTax["Concepto"]) == "Coste superficie")
                        {
                            cambio = Convert.ToDecimal(filaTax["Cambio"]);
                            costeSuperficie = Convert.ToDecimal(filaTax["Valor"]) * cambio;
                        }

                        if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro consumible")
                        {
                            taximetroConsumible = Convert.ToDecimal(filaTax["Valor"]) / 100;
                            listaBonificacionesDesde.Add(Convert.ToInt32(filaTax["Desde"]));
                            listaBonificacionesHasta.Add(Convert.ToInt32(filaTax["Hasta"]));
                            listaBonificacionesValor.Add(Convert.ToDecimal(filaTax["Ajuste"]));

                            if (!String.IsNullOrEmpty(Convert.ToString(filaTax["Valorar"])))
                                if (Convert.ToString(filaTax["Valorar"]).ToUpper() == "SUPERFICIE")
                                {
                                    calcularPorSuperficie = true;
                                    superficie = Convert.ToDecimal(filaTax["Superficie"]);
                                }
                        }
                        metersInvoicing = Convert.ToBoolean(filaTax["MetersInvoicing"]);
                        if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                        {
                            taximetroNoConsumible = (Convert.ToDecimal(filaTax["Valor"]) / 100);
                            diasDesdeTaxNoConsumible = Convert.ToInt32(filaTax["Desde"]);
                            diasHastaTaxNoConsumible = Convert.ToInt32(filaTax["Hasta"]);
                        }

                        if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                            porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                        if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                            coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                    }

                    if (taximetroConsumible == 0)
                    {
                        precioTaximetroNoConsumible = precioCoste;
                    }
                    else
                    {
                        if (calcularPorSuperficie)
                        {
                            if (!metersInvoicing)
                            {
                                precioTaximetroNoConsumible = precioCoste; // (precioCoste - (costeSuperficie * superficie));
                                precioTaximetroConsumible = 0;
                            }
                            else
                            {
                                precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                precioTaximetroConsumible = (costeSuperficie * superficie);
                            }
                        }
                        else
                        {
                            precioTaximetroNoConsumible = 0;
                            precioTaximetroConsumible = precioCoste;
                        }
                    }

                    filaEncontradaNegativa = dtMovimientosNegativos.Select("[ITEM NEGATIVO] = '" + item + "' AND [CANTIDAD PROCESO NEGATIVO] < 0", "[ITEM NEGATIVO] ASC, [FECHA NEGATIVO] ASC, [CANTIDAD PROCESO NEGATIVO] DESC");
                    foreach (DataRow filaNegativa in filaEncontradaNegativa)
                    {
                        dondeVa = "filaEncontradaNegativa";
                        cantidad = Convert.ToDecimal(filaNegativa["CANTIDAD NEGATIVO"]);
                        while (cantidad != 0)
                        {
                            filaEncontradaPositiva = dtMovimientosPositivos.Select("[ITEM POSITIVO] = '" + item + "' AND [CANTIDAD PROCESO POSITIVO] > 0", "[ITEM POSITIVO] ASC, [FECHA POSITIVO] ASC, [CANTIDAD PROCESO POSITIVO] DESC");
                            foreach (DataRow filaPositiva in filaEncontradaPositiva)
                            {
                                taximetroConsumibleBuenTrato = 0;
                                taximetroNoConsumibleBuenTrato = 0;

                                filaMovimiento = dtTax.NewRow();
                                filaMovimiento["BONIFICACION"] = 0;
                                filaMovimiento["ITEM"] = item;
                                filaMovimiento["TIPO MOVIMIENTO POSITIVO"] = filaPositiva["TIPO MOVIMIENTO POSITIVO"];
                                filaMovimiento["FECHA POSITIVO"] = filaPositiva["FECHA POSITIVO"];
                                filaMovimiento["CANTIDAD POSITIVO"] = filaPositiva["CANTIDAD POSITIVO"];
                                filaMovimiento["PACKING SLIP POSITIVO"] = filaPositiva["PACKING SLIP POSITIVO"];
                                filaMovimiento["TIPO MOVIMIENTO NEGATIVO"] = filaNegativa["TIPO MOVIMIENTO NEGATIVO"];
                                filaMovimiento["FECHA NEGATIVO"] = filaNegativa["FECHA NEGATIVO"];
                                filaMovimiento["CANTIDAD NEGATIVO"] = filaNegativa["CANTIDAD NEGATIVO"];
                                filaMovimiento["PACKING SLIP NEGATIVO"] = filaNegativa["PACKING SLIP NEGATIVO"];
                                filaMovimiento["CALCULAR POR SUPERFICIE"] = calcularPorSuperficie;
                                filaMovimiento["METROS"] = metersInvoicing;
                                filaMovimiento["COSTE SUPERFICIE"] = costeSuperficie;
                                filaMovimiento["SUPERFICIE"] = superficie;

                                dondeVa = "diasXMes " + diasxMes.ToString();

                                if (Math.Abs(cantidad) >= Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]))
                                {
                                    dondeVa = "entra positivo";
                                    filaMovimiento["CANTIDAD"] = Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]));
                                    filaMovimiento["DIAS"] = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;
                                    filaMovimiento["UNIDADES-DIA"] = Convert.ToDecimal(filaMovimiento["DIAS"]) * Convert.ToDecimal(filaMovimiento["CANTIDAD"]);
                                    cantidad = cantidad + Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]);

                                    dias = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;

                                    if (dias <= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = dias - diasDesdeTaxNoConsumible;
                                    if (dias >= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;
                                    taxNoConsumible = (Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"])) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes; ;
                                    filaMovimiento["TAX NO CONSUMIBLE"] = taxNoConsumible;
                                    taximetroNoConsumibleBuenTrato = taxNoConsumible;
                                    filaMovimiento["TAX CONSUMIBLE"] = (Convert.ToDecimal(filaMovimiento["CANTIDAD"]) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;
                                    taximetroConsumibleBuenTrato = (Convert.ToDecimal(filaMovimiento["CANTIDAD"]) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;

                                    diasCalculados = 0;
                                    diasMultiplicar = 0;
                                    importeCosteBonificacionTaximetroConsumible = 0;
                                    bonificacionTaximetroConsumibleBuenTrato = 0;
                                    while (diasCalculados < dias)
                                    {
                                        dondeVa = "lineasBonificacion";
                                        for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                        {
                                            if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                            {
                                                if (dias - diasCalculados >= diasxMes)
                                                    diasMultiplicar = diasxMes;
                                                else
                                                    diasMultiplicar = dias - diasCalculados;
                                                bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"])) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                bonificacionTaximetroConsumibleBuenTrato = bonificacionTaximetroConsumibleBuenTrato + ((Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"])) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);

                                            }
                                        }
                                        diasCalculados = diasCalculados + diasxMes;
                                    }
                                    filaMovimiento["BONIFICACION"] = importeCosteBonificacionTaximetroConsumible;
                                    filaMovimiento["PS"] = precioCoste;
                                    filaMovimiento["DIAS MES"] = diasxMes;
                                    filaMovimiento["% TAX CONSUMIBLE"] = taximetroConsumible;
                                    filaMovimiento["PRECIO TAX CONSUMIBLE"] = precioTaximetroConsumible;
                                    filaMovimiento["% TAX NO CONSUMIBLE"] = taximetroNoConsumible;
                                    filaMovimiento["PRECIO TAX NO CONSUMIBLE"] = precioTaximetroNoConsumible;
                                    dtTax.Rows.Add(filaMovimiento);
                                    filaMovimiento = null;

                                    filaPositiva["CANTIDAD PROCESO POSITIVO"] = 0;
                                    filaPositiva.AcceptChanges();

                                    if (porcentajeBuenTrato > 0 && (taximetroConsumibleBuenTrato != 0 || bonificacionTaximetroConsumibleBuenTrato != 0))
                                    {
                                        dondeVa = "porcentajeBuenTrato";

                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAA in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAA["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 6";
                                        oItemBuenTrato["Abono"] = bonificacionTaximetroConsumibleBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 9";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 10";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }

                                    dondeVa = "Si porcentaje buen trato";
                                    if (porcentajeBuenTrato > 0 && taximetroNoConsumibleBuenTrato > 0)
                                    {
                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAAF in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAAF["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroNoConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 7";
                                        oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                        dondeVa = "Buen trato 8";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 9";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }
                                }
                                else if (Math.Abs(cantidad) < Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]))
                                {
                                    filaMovimiento["CANTIDAD"] = Math.Abs(cantidad);
                                    filaMovimiento["DIAS"] = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;
                                    filaMovimiento["UNIDADES-DIA"] = Convert.ToDecimal(filaMovimiento["DIAS"]) * Convert.ToDecimal(filaMovimiento["CANTIDAD"]);

                                    dias = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;

                                    if (dias <= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = dias - diasDesdeTaxNoConsumible;
                                    if (dias >= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;
                                    taxNoConsumible = (Math.Abs(cantidad) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes; ;
                                    filaMovimiento["TAX NO CONSUMIBLE"] = taxNoConsumible;
                                    taximetroNoConsumibleBuenTrato = taxNoConsumible;
                                    filaMovimiento["TAX CONSUMIBLE"] = (Math.Abs(cantidad) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;
                                    taximetroConsumibleBuenTrato = (Math.Abs(cantidad) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;

                                    diasCalculados = 0;
                                    diasMultiplicar = 0;
                                    importeCosteBonificacionTaximetroConsumible = 0;
                                    bonificacionTaximetroConsumibleBuenTrato = 0;
                                    while (diasCalculados < dias)
                                    {
                                        for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                        {
                                            if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                            {
                                                if (dias - diasCalculados >= diasxMes)
                                                    diasMultiplicar = diasxMes;
                                                else
                                                    diasMultiplicar = dias - diasCalculados;
                                                bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Math.Abs(cantidad) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                bonificacionTaximetroConsumibleBuenTrato = bonificacionTaximetroConsumibleBuenTrato + ((Math.Abs(cantidad) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                            }
                                        }
                                        diasCalculados = diasCalculados + diasxMes;
                                    }
                                    filaMovimiento["BONIFICACION"] = importeCosteBonificacionTaximetroConsumible;
                                    filaMovimiento["PS"] = precioCoste;
                                    filaMovimiento["DIAS MES"] = diasxMes;
                                    filaMovimiento["% TAX CONSUMIBLE"] = taximetroConsumible;
                                    filaMovimiento["PRECIO TAX CONSUMIBLE"] = precioTaximetroConsumible;
                                    filaMovimiento["% TAX NO CONSUMIBLE"] = taximetroNoConsumible;
                                    filaMovimiento["PRECIO TAX NO CONSUMIBLE"] = precioTaximetroNoConsumible;
                                    dtTax.Rows.Add(filaMovimiento);
                                    filaMovimiento = null;

                                    filaPositiva["CANTIDAD PROCESO POSITIVO"] = Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]) + cantidad;
                                    filaPositiva.AcceptChanges();
                                    cantidad = 0;

                                    if (porcentajeBuenTrato > 0 && (taximetroConsumibleBuenTrato != 0 || bonificacionTaximetroConsumibleBuenTrato != 0))
                                    {
                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAA in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAA["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 6";
                                        oItemBuenTrato["Abono"] = bonificacionTaximetroConsumibleBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 9";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 10";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }

                                    dondeVa = "Si porcentaje buen trato";
                                    if (porcentajeBuenTrato > 0 && taximetroNoConsumibleBuenTrato > 0)
                                    {
                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAAF in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAAF["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroNoConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 7";
                                        oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                        dondeVa = "Buen trato 8";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 9";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }

                                    break;
                                }
                                if (cantidad == 0)
                                    break;
                            }
                        }
                    }
                }
                // FIN TAX - BONIFICACION

                dondeVa = "Calcular totales tax + bonificacion";
                importeCosteTaximetroNoConsumible = 0;
                importeCosteTaximetroConsumible = 0;
                importeCosteBonificacionTaximetroConsumible = 0;

                dondeVa = "Sumar tax + bonificacion";
                importeCosteTaximetroNoConsumible = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX NO CONSUMIBLE")));
                importeCosteTaximetroConsumible = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX CONSUMIBLE")));
                importeCosteBonificacionTaximetroConsumible = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("BONIFICACION")));

                // BUEN TRATO
                //taximetroConsumibleBuenTrato = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX CONSUMIBLE")));

                // VALES TRANSPORTE
                System.Collections.IEnumerator enumerator_VT;
                // CABECERA
                dondeVa = "contexto_1";
                tablaValesTransporte.CallContext contexto_VT = new tablaValesTransporte.CallContext();
                contexto_VT.Company = empresa;

                dondeVa = "criterio";
                tablaValesTransporte.QueryCriteria criterio_VT = new tablaValesTransporte.QueryCriteria();
                criterio_VT.CriteriaElement = new tablaValesTransporte.CriteriaElement[1];

                //ProjTable_1
                criterio_VT.CriteriaElement[0] = new tablaValesTransporte.CriteriaElement();
                criterio_VT.CriteriaElement[0].DataSourceName = "TransportTicketTable";
                criterio_VT.CriteriaElement[0].FieldName = "obraid";
                criterio_VT.CriteriaElement[0].Operator = tablaValesTransporte.Operator.Equal;
                criterio_VT.CriteriaElement[0].Value1 = numero;

                dondeVa = "credenciales";
                tablaValesTransporte.TransportTicketServiceClient proxy_VT = new tablaValesTransporte.TransportTicketServiceClient();
                proxy_VT.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_VT.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_VT.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "proxy TransportTicketTable";
                tablaValesTransporte.AxdTransportTicket AxdTransportTicket = proxy_VT.find(contexto_VT, criterio_VT);

                datosGenerales = "";
                dondeVa = "validar";
                cantidadPorte = 0;
                importeCostePorte = 0;
                if (AxdTransportTicket.TransportTicketTable is null)
                {
                    proxy_VT.Close();
                }
                else
                {
                    dondeVa = "primer data";
                    enumerator_VT = AxdTransportTicket.TransportTicketTable.GetEnumerator();
                    while (enumerator_VT.MoveNext())
                    {
                        tablaValesTransporte.AxdEntity_TransportTicketTable AxdEntity_TransportTicketTable = (tablaValesTransporte.AxdEntity_TransportTicketTable)enumerator_VT.Current;

                        dondeVa = "RECORRER";
                        cantidadPorte = cantidadPorte + 1;
                        capitulosPorte.Add(AxdEntity_TransportTicketTable.TypeTransportTicket.ToString());
                        dec_importeFacturacionPorteCapitulos.Add(0);
                        dec_importeCostePorteCapitulos.Add(Convert.ToDecimal(AxdEntity_TransportTicketTable.UPS));
                        dec_importeMargenPorteCapitulos.Add(0 - Convert.ToDecimal(AxdEntity_TransportTicketTable.UPS));
                        importeCostePorte = importeCostePorte + Convert.ToDecimal(AxdEntity_TransportTicketTable.UPS);

                        dondeVa = "guardar datos de transporte";
                        oValeTransporte = dtValesTransporte.NewRow();
                        oValeTransporte["Albaran"] = AxdEntity_TransportTicketTable.PackingSlipId.ToString();
                        oValeTransporte["Tipo transporte"] = AxdEntity_TransportTicketTable.TipoTransId.ToString();
                        dtValesTransporte.Rows.Add(oValeTransporte);
                        oValeTransporte = null;
                    }
                }
                proxy_VT.Close();

                // PEDIDOS DE LIQUIDACIÓN DE LA OBRA
                dondeVa = "Pedidos";
                System.Collections.IEnumerator enumerator_Pedido;
                // CABECERA
                tablaPedidos.CallContext contexto_Pedido = new tablaPedidos.CallContext();
                contexto_Pedido.Company = empresa;

                tablaPedidos.QueryCriteria criterio_Pedido = new tablaPedidos.QueryCriteria();
                criterio_Pedido.CriteriaElement = new tablaPedidos.CriteriaElement[2];

                criterio_Pedido.CriteriaElement[0] = new tablaPedidos.CriteriaElement();
                criterio_Pedido.CriteriaElement[0].DataSourceName = "SalesTable";
                criterio_Pedido.CriteriaElement[0].FieldName = "OBRAID";
                criterio_Pedido.CriteriaElement[0].Operator = tablaPedidos.Operator.Equal;
                criterio_Pedido.CriteriaElement[0].Value1 = numero;

                tablaPedidos.SalesOrdersServiceClient proxy_Pedido = new tablaPedidos.SalesOrdersServiceClient();
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                tablaPedidos.AxdSalesOrders axdtablaPedidos_Pedido = proxy_Pedido.find(contexto_Pedido, criterio_Pedido);

                if (axdtablaPedidos_Pedido.SalesTable is null)
                {
                    proxy_Pedido.Close();
                }
                else if (axdtablaPedidos_Pedido.SalesTable is null)
                {
                    proxy_Pedido.Close();
                }
                else
                {
                    enumerator_Pedido = axdtablaPedidos_Pedido.SalesTable.GetEnumerator();
                    while (enumerator_Pedido.MoveNext())
                    {
                        dondeVa = "recorrer pedidos";
                        tablaPedidos.AxdEntity_SalesTable axdEntity_SalesQuotationMasterTable = (tablaPedidos.AxdEntity_SalesTable)enumerator_Pedido.Current;
                        tablaPedidos.AxdEntity_SalesLine[] axdEntity_SalesQuotationTables = axdEntity_SalesQuotationMasterTable.SalesLine;
                        tablaPedidos.AxdEntity_SalesLine axdEntity_SalesQuotationTable;

                        //if (axdEntity_SalesQuotationMasterTable.SalesStatus.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesStatus.Invoiced.ToString().ToUpper())
                        if (axdEntity_SalesQuotationMasterTable.SalesStatus.ToString().ToUpper() != tablaPedidos.AxdEnum_SalesStatus.Canceled.ToString().ToUpper())
                        {
                            if (axdEntity_SalesQuotationMasterTable.SalesType.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesType.Alquiler.ToString().ToUpper())
                            {
                                filaPedidosAlquiler = dtPedidosAlquiler.NewRow();
                                filaPedidosAlquiler["Numero"] = axdEntity_SalesQuotationMasterTable.SalesId.ToString();
                                filaPedidosAlquiler["Tipo pedido"] = axdEntity_SalesQuotationMasterTable.SalesType.ToString();
                                filaPedidosAlquiler["Venta tipo"] = axdEntity_SalesQuotationMasterTable.TipoVenta.ToString();
                                filaPedidosAlquiler["Alquiler tipo"] = axdEntity_SalesQuotationMasterTable.TipoAlquiler.ToString();
                                dtPedidosAlquiler.Rows.Add(filaPedidosAlquiler);
                            }

                            for (lineaCapitulo = 0; lineaCapitulo < axdEntity_SalesQuotationTables.Length; lineaCapitulo++)
                            {
                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[lineaCapitulo];

                                filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    dondeVa = "encontró configuracion dataset // " + axdEntity_SalesQuotationTable.ItemId.ToString() + " // ";

                                    dondeVa = "Peso del artículo";
                                    pesoArticulo = Convert.ToDecimal(fila["WeightVolumeKg"]);
                                    dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                        tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                                    dondeVa = "encontró configuracion dataset // Coste superficie";
                                    dondeVa = "encontró configuracion dataset // Tipo producto";
                                    productType = Convert.ToString(fila["ProductTypeName_es"]);

                                    dondeVa = "encontró configuracion dataset // Correcion PS Nuevo";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Nuevo")
                                        coeficienteNuevo = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Correcion PS Usado";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Usado")
                                        coeficienteUsado = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Tipo artículo";
                                    tipoArticulo = Convert.ToString(fila["TipoArticulo"]);

                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Valorar"])))
                                    {
                                        if (Convert.ToString(fila["Valorar"]).ToUpper() == "SUPERFICIE")
                                        {
                                            calcularPorSuperficie = true;
                                            dondeVa = "encontró configuracion dataset // Superficie";
                                            superficie = Convert.ToDecimal(fila["Superficie"]);
                                        }
                                    }

                                    // Fenólico / Nuevo
                                    if (Convert.ToString(fila["Concepto"]) == "Porcentaje coste material nuevo")
                                        porcentajeCosteMaterialNuevo = Convert.ToDecimal(fila["Valor"]);
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel estándar")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEstandar = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel especial")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEspecial = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                }

                                articulosConfiguracion = articulosConfiguracion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                if (axdEntity_SalesQuotationMasterTable.SalesType.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesType.Sales.ToString().ToUpper())
                                {
                                    // COSTES
                                    filaEncontradaFenolico = dtArticulosPaneles.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                    foreach (DataRow filaFenolico in filaEncontradaFenolico)
                                    {
                                        if (Convert.ToBoolean(filaFenolico["Estandar"]))
                                            importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEstandar);
                                        else
                                            importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEspecial);
                                    }

                                    importeCosteVentaFenolicoNuevo = importeCosteVentaFenolicoNuevo + importeCosteMaterialFenolico;

                                    if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                        importeCosteVentaDepartamentoTecnico = importeCosteVentaDepartamentoTecnico + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste * coeficienteUsar;
                                    else if (tipoServicio.ToUpper() == "MONTAJES")
                                        importeCosteVentaMontajes = importeCosteVentaMontajes + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * precioCoste;
                                    else
                                    {
                                        if (productType.Trim().ToUpper() == "SERVICIO")
                                        {
                                            dondeVa = "VENTAS: Servicio";
                                            // Fenólico
                                            if (axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                                dondeVa = "VENTAS: Fenólico";
                                            // SVP/CIF
                                            else if (axdEntity_SalesQuotationTable.CanonImport.HasValue && axdEntity_SalesQuotationTable.CanonImport != 0)
                                                importeCosteVentaUneCif = importeCosteVentaUneCif + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste) * (Convert.ToDecimal(axdEntity_SalesQuotationTable.Canon) / 100));
                                            // OTROS SERVICIOS
                                            else
                                                importeCosteVentaOtrosServicios = importeCosteVentaOtrosServicios + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste));
                                        }
                                    }
                                    articulos = articulos + Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString()) + "|" + Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value) + ";";
                                }

                                if (axdEntity_SalesQuotationMasterTable.SalesType.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesType.Alquiler.ToString().ToUpper())
                                {
                                    // COSTES
                                }

                                // VALIDAR
                                if ((importeCosteMaterialNuevo != 0) && (importeCosteMaterialFenolico != 0))
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + (importeCosteMaterialNuevo - importeCosteMaterialFenolico);
                                else
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + importeCosteMaterialNuevo;

                                if (axdEntity_SalesQuotationMasterTable.TipoVenta.ToString().ToUpper() == tablaPedidos.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper())
                                {
                                    dondeVa = "es liquidación";
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[lineaCapitulo];
                                    filaPedidos = dtPedidos.NewRow();
                                    filaPedidos["TIPO"] = "LIQ";
                                    filaPedidos["FECHA_CREACION"] = Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString("yyyyMMdd"));
                                    filaPedidos["AAF"] = Convert.ToString("");
                                    filaPedidos["ITEM_ID"] = Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString());
                                    filaPedidos["SALESQTY"] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty).ToString();
                                    filaPedidos["SALES ID"] = axdEntity_SalesQuotationTable.SalesId.ToString();
                                    dtPedidos.Rows.Add(filaPedidos);
                                    filaPedidos = null;

                                    articulosLiquidacion = articulosLiquidacion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                    if (articulosLIQ.IndexOf(Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString())) < 0)
                                        articulosLIQ = articulosLIQ + Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString()) + "|" + Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value) + ";";
                                }
                            }
                        }
                    }
                }

                dondeVa = "salio RECORRER PEDIDOS";
                proxy_Pedido.Close();
                dtArticulosLIQ = localizarPreciosArticulos(empresa, "", articulosLIQ, moneda, articulosLIQ, numero, usuario);

                // SI HAY LIQUIDACIONES --> ALBARANES DE ENTREGA
                dondeVa = "albaranes de entrega";
                dec_importeCosteMPO = 0;
                cantidadMPOPositivo = 0;

                if (articulosLiquidacion != "")
                {
                    // SUMAR POR ITEMS LOS QUE TIENEN MÁS DE UNA LIQUIDACIÓN
                    var dataMovimientos = from d in dtTODO.AsEnumerable()
                                          where d.Field<string>("TIPO MOVIMIENTO") == "SALESJOBSITEOUT"
                                          group d by new
                                          {
                                              ITEM = d.Field<string>("ITEM"),
                                          } into grupo
                                          select new
                                          {
                                              item = grupo.Key.ITEM,
                                              Cantidad = grupo.Count()
                                          };

                    dondeVa = "copiar a dtCalculoTax";
                    dtCalculoTax = new DataTable();
                    dtCalculoTax.Columns.Add("ITEM");
                    dtCalculoTax.Columns.Add("CANTIDAD");

                    dondeVa = "copiando a dtCalculoTax";
                    int Van = 0;
                    foreach (var itemMov in dataMovimientos)
                    {
                        dtCalculoTax.Rows.Add(itemMov.item.ToString(), itemMov.Cantidad.ToString());
                        if (Convert.ToInt32(itemMov.Cantidad) > 1)
                        {
                            dtTODO.AsEnumerable().Where(row => row.Field<string>("ITEM") == itemMov.item).CopyToDataTable(dtMovimientosLiquidacion, LoadOption.OverwriteChanges);

                            // inicializar
                            taximetroNoConsumible = 0;
                            taximetroConsumible = 0;
                            precioTaximetroNoConsumible = 0;
                            precioTaximetroConsumible = 0;
                            listaBonificacionesDesde.Clear();
                            listaBonificacionesHasta.Clear();
                            listaBonificacionesValor.Clear();
                            costeSuperficie = 0;
                            taximetroConsumible = 0;
                            calcularPorSuperficie = false;
                            superficie = 0;
                            taximetroNoConsumible = 0;
                            diasDesdeTaxNoConsumible = 0;
                            diasHastaTaxNoConsumible = 0;
                            metersInvoicing = false;
                            productType = "";
                            coeficienteNuevo = 0;
                            coeficienteUsado = 0;
                            tipoArticulo = "";
                            coeficienteUsar = 0;
                            precioTaximetroConsumible = 0;
                            precioTaximetroNoConsumible = 0;

                            // RECPERAR PS
                            precioCoste = 0;
                            if (hayPrecio)
                            {
                                dondeVa = "buscar precio dataset // " + articulos;
                                filaEncontrada = dtArticulos.Select("Articulo = '" + itemMov.item.ToString() + "'");
                                if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(itemMov.item.ToString().ToUpper()) == -1)
                                {
                                    salvarIndicencia(empresa, "FICHA", itemMov.item.ToString(), "No hay PS del artículo.");

                                    imgWarning.Visible = true;
                                    lblMensajeError.Visible = true;
                                    lblMensajeInformacion.Text = "(MOV) No se ha localizado el precio del articulo '" + itemMov.item.ToString() + "'";
                                    //return;
                                }
                                foreach (DataRow filaprecio in filaEncontrada)
                                {
                                    nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                    dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                    if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                        precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                }
                            }

                            // RECUPERAR DATOS PARA EL TAXIMETRO
                            filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + itemMov.item.ToString() + "'");
                            foreach (DataRow filaTax in filaEncontrada)
                            {
                                dondeVa = "ENCONTRO TAX";

                                if (Convert.ToString(filaTax["Concepto"]) == "Coste superficie")
                                {
                                    cambio = Convert.ToDecimal(filaTax["Cambio"]);
                                    costeSuperficie = Convert.ToDecimal(filaTax["Valor"]) * cambio;
                                }
                                if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro consumible")
                                {
                                    taximetroConsumible = Convert.ToDecimal(filaTax["Valor"]) / 100;
                                    listaBonificacionesDesde.Add(Convert.ToInt32(filaTax["Desde"]));
                                    listaBonificacionesHasta.Add(Convert.ToInt32(filaTax["Hasta"]));
                                    listaBonificacionesValor.Add(Convert.ToDecimal(filaTax["Ajuste"]));

                                    if (!String.IsNullOrEmpty(Convert.ToString(filaTax["Valorar"])))
                                        if (Convert.ToString(filaTax["Valorar"]).ToUpper() == "SUPERFICIE")
                                        {
                                            calcularPorSuperficie = true;
                                            superficie = Convert.ToDecimal(filaTax["Superficie"]);
                                        }
                                }

                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje MPO abono TAX")
                                    porcentajeAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);
                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje Máximo MPO abono TAX")
                                    porcentajeMaxAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                                {
                                    taximetroNoConsumible = Convert.ToDecimal(filaTax["Valor"]) / 100;
                                    diasDesdeTaxNoConsumible = Convert.ToInt32(filaTax["Desde"]);
                                    diasHastaTaxNoConsumible = Convert.ToInt32(filaTax["Hasta"]);
                                }
                                metersInvoicing = Convert.ToBoolean(filaTax["MetersInvoicing"]);
                                productType = Convert.ToString(filaTax["ProductTypeName_es"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                    coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                    coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                tipoArticulo = Convert.ToString(filaTax["TipoArticulo"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                                    porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                                if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                                    coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                            }

                            if (tipoArticulo == "NUEVO")
                                coeficienteUsar = coeficienteNuevo;
                            else
                                coeficienteUsar = coeficienteUsado;

                            if (taximetroConsumible == 0)
                            {
                                precioTaximetroNoConsumible = precioCoste;
                            }
                            else
                            {
                                if (calcularPorSuperficie)
                                {
                                    if (!metersInvoicing)
                                    {
                                        precioTaximetroNoConsumible = precioCoste; //(precioCoste - (costeSuperficie * superficie));
                                        precioTaximetroConsumible = 0;
                                    }
                                    else
                                    {
                                        precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                        precioTaximetroConsumible = (costeSuperficie * superficie);
                                    }
                                }
                                else
                                {
                                    precioTaximetroNoConsumible = 0;
                                    precioTaximetroConsumible = precioCoste;
                                }
                            }

                            // recorrer dataset dtMovimientosLiquidacion: calcular días
                            filaEncontrada = dtMovimientosLiquidacion.Select("[TIPO MOVIMIENTO] = '" + "SALESJOBSITEOUT" + "'");
                            foreach (DataRow filaLiquidacion in filaEncontrada)
                            {
                                dondeVa = "creando columnas en dtCalculoTax";
                                Van = Van + 1;

                                DataColumnCollection columns = dtMovimientosLiquidacion.Columns;
                                if (!columns.Contains("FECHA FINAL " + Van.ToString()))
                                {
                                    dtMovimientosLiquidacion.Columns.Add("FECHA FINAL " + Van.ToString(), typeof(DateTime));
                                    dtMovimientosLiquidacion.Columns.Add("DIAS TC " + Van.ToString());
                                    dtMovimientosLiquidacion.Columns.Add("UNIDADES DIAS TC " + Van.ToString());
                                    dtMovimientosLiquidacion.Columns.Add("IMPORTE TC " + Van.ToString(), typeof(string), "");
                                    dtMovimientosLiquidacion.Columns.Add("ABONO TC " + Van.ToString(), typeof(string), "");
                                }

                                fechaFinal = Convert.ToDateTime(filaLiquidacion["FECHA"]);

                                foreach (DataRow fila in dtMovimientosLiquidacion.Rows)
                                {
                                    if ((fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days >= 0)
                                    {
                                        dondeVa = "fecha final";
                                        fila["FECHA FINAL " + Van.ToString()] = fechaFinal;
                                        dondeVa = "calculo dias";
                                        fila["DIAS TC " + Van.ToString()] = (fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days;
                                        duracion = (fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days;
                                        fila["UNIDADES DIAS TC " + Van.ToString()] = ((fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days * Convert.ToDecimal(fila["CANTIDAD"])).ToString("#,##0.00");
                                        totalUnidadesDias = Convert.ToInt32((fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days * Convert.ToDecimal(fila["CANTIDAD"]));
                                        cantidad = Convert.ToDecimal(fila["CANTIDAD"]);

                                        // CALCULAR TAX + ABONO
                                        dondeVa = "Recalcular tax especial y abono";
                                        fila["IMPORTE TC " + Van.ToString()] = ((totalUnidadesDias * precioTaximetroConsumible * taximetroConsumible) / diasxMes).ToString("#,##0.00");

                                        dondeVa = "CALCULAR BONIFICACION";
                                        diasCalculados = 0;
                                        diasMultiplicar = 0;
                                        importeBonificacion = 0;

                                        while (diasCalculados < duracion)
                                        {
                                            dondeVa = "CALCULAR BONIFICACION 3";
                                            for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                            {
                                                dondeVa = "CALCULAR BONIFICACION 4";
                                                if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                                {
                                                    dondeVa = "CALCULAR BONIFICACION 5";
                                                    if (duracion - diasCalculados >= diasxMes)
                                                        diasMultiplicar = diasxMes;
                                                    else
                                                        diasMultiplicar = duracion - diasCalculados;
                                                    dondeVa = "CALCULAR BONIFICACION 6";
                                                    bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);

                                                    dondeVa = "CALCULAR BONIFICACION 9";
                                                    importeBonificacion = importeBonificacion + ((Convert.ToDecimal(cantidad) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                }
                                            }
                                            dondeVa = "CALCULAR BONIFICACION 12";
                                            diasCalculados = diasCalculados + diasxMes;
                                            dondeVa = "CALCULAR BONIFICACION 13";
                                        }
                                        fila["ABONO TC " + Van.ToString()] = importeBonificacion.ToString("#,##0.00");
                                        fila.AcceptChanges();
                                    }
                                    else
                                        break;
                                }
                            }
                        }
                    }
                    dondeVa = "Datos gastos patio";
                    dtGastosPatio = new System.Data.DataTable();
                    dtGastosPatio = gastosPatio(empresa, articulos, fechaPrecios, moneda, usuario);
                    // Buscar estado de los artículos 
                    dondeVa = "Datos estado artículos";
                    dtArticulosLiquidacion = localizarEstadoArticulos(usuario, articulos + articulosLiquidacion + articulosConfiguracion);
                    if (dtArticulosLiquidacion.Columns.Count == 0)
                        dondeVa = "va a petar // " + articulosLiquidacion + " // usuario // " + usuario;
                    else
                    {
                        // Actualizo AAF en el data de pedidos
                        //dondeVa = "Actualizar AAF en dtPedidos";
                        foreach (DataRow filaPedido in dtPedidos.Rows)
                        {
                            filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + filaPedido["ITEM_ID"].ToString() + "'");
                            foreach (DataRow filaAAF in filaEncontrada)
                            {
                                filaPedido["AAF"] = Convert.ToString(filaAAF["AAF"]);
                                break;
                            }
                        }

                        dondeVa = "Datos ws albaranes de entrega";
                        System.Collections.IEnumerator enumerator_AlbaranEntrega_Coste;
                        // CABECERA
                        dondeVa = "contexto_AlbaranEntrega";
                        tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.CallContext();
                        contexto_AlbaranEntrega_Coste.Company = empresa;

                        dondeVa = "criterio";
                        tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.QueryCriteria();
                        criterio_AlbaranEntrega_Coste.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                        //ProjTable_AlbaranEntrega
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].FieldName = "ObraId";
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].Value1 = numero;

                        dondeVa = "credenciales";
                        tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.CustPackingServiceClient();
                        proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                        proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                        proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                        dondeVa = "proxy CustPackingSlipTrans";
                        tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking_Coste = proxy_AlbaranEntrega_Coste.find(contexto_AlbaranEntrega_Coste, criterio_AlbaranEntrega_Coste);
                        dondeVa = "validar";
                        if (AxdCustPacking_Coste.CustPackingSlipTrans is null)
                        {
                            proxy_AlbaranEntrega_Coste.Close();
                        }
                        else
                        {
                            dondeVa = "recorrer albaranes";
                            enumerator_AlbaranEntrega_Coste = AxdCustPacking_Coste.CustPackingSlipTrans.GetEnumerator();
                            while (enumerator_AlbaranEntrega_Coste.MoveNext())
                            {
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans AxdEntity_CustPackingSlipTrans = (tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans)enumerator_AlbaranEntrega_Coste.Current;
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipJour[] AxdEntity_CustPackingSlipJours = AxdEntity_CustPackingSlipTrans.CustPackingSlipJour;
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipJour AxdEntity_CustPackingSlipJour;

                                salesType = "";
                                if (AxdEntity_CustPackingSlipJours.Length > 0)
                                //for (lineaCapitulo = 0; lineaCapitulo < AxdEntity_CustPackingSlipJours.Length; lineaCapitulo++)
                                {
                                    AxdEntity_CustPackingSlipJour = AxdEntity_CustPackingSlipJours[0];
                                    salesType = AxdEntity_CustPackingSlipJour.SalesType.Value.ToString();
                                    //break;
                                }

                                articulosConfiguracion = articulosConfiguracion + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|";

                                tipoArticulo = "";
                                dondeVa = "recorrer albaranes filaEncontrada";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow filaTipo in filaEncontrada)
                                {
                                    dondeVa = "ajustar datos AAF y tipo de artículo";
                                    tipoArticulo = Convert.ToString(filaTipo["TipoArticulo"]).ToUpper().Trim();
                                    dondeVa = "tipo de artículo: " + tipoArticulo;
                                    AAF = Convert.ToString(filaTipo["AAF"]);
                                    dondeVa = "AAF: " + AAF;
                                    filaAlbaranes = dtAlbaranes.NewRow();
                                    dondeVa = "dtAlbaranes";
                                    dondeVa = "dtAlbaranes fecha: " + Convert.ToString(AxdEntity_CustPackingSlipTrans.DeliveryDate.ToString("yyyyMMdd"));
                                    filaAlbaranes[dtAlbaranes_fecha] = Convert.ToString(AxdEntity_CustPackingSlipTrans.DeliveryDate.ToString("yyyyMMdd"));
                                    dondeVa = "dtAlbaranes 1";
                                    filaAlbaranes[dtAlbaranes_aaf] = AAF;
                                    dondeVa = "dtAlbaranes 2";
                                    filaAlbaranes[dtAlbaranes_itemID] = Convert.ToString(AxdEntity_CustPackingSlipTrans.ItemId.ToString());
                                    dondeVa = "dtAlbaranes 3";
                                    filaAlbaranes[dtAlbaranes_cantidad] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty.ToString());
                                    dondeVa = "dtAlbaranes 4";
                                    filaAlbaranes[dtAlbaranes_estado] = tipoArticulo;
                                    dtAlbaranes.Rows.Add(filaAlbaranes);
                                    filaAlbaranes = null;
                                    break;
                                }

                                entrega = 0;
                                devolucion = 0;
                                naviera = 0;
                                precioGastosPatio = 0;
                                filaEncontrada = dtGastosPatio.Select("ProductId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Entrega"])))
                                        entrega = Convert.ToDecimal(fila["Entrega"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                        devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                        naviera = Convert.ToDecimal(fila["Naviera"]);
                                    precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                }

                                esNaviera = false;
                                filaEncontrada = dtValesTransporte.Select("Albaran = '" + AxdEntity_CustPackingSlipTrans.PackingSlipId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (fila["Tipo transporte"].ToString().Substring(0, 1).ToUpper() == "M" || fila["Tipo transporte"].ToString().Substring(0, 1).ToUpper() == "P")
                                        esNaviera = true;
                                }

                                // GASTOS PATIO VENTA ENTREGA
                                if (salesType == tablaAlbaranesEntrega.AxdEnum_SalesType.Sales.ToString())
                                {
                                    importeGastosPatioEntregaDevolucionVentas = 0;
                                    importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * precioGastosPatio;
                                    if (esNaviera)
                                        importeGastosPatioEntregaDevolucionVentas = importeGastosPatioEntregaDevolucionVentas + (Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * naviera * precioGastosPatio);
                                    importeGastosVariablesEntregaDevolucionVentaCapitulos = importeGastosVariablesEntregaDevolucionVentaCapitulos + importeGastosPatioEntregaDevolucionVentas;

                                    oGastosPatio = dtGastosPatioCargaDescarga.NewRow();
                                    oGastosPatio["ALBARAN"] = AxdEntity_CustPackingSlipTrans.PackingSlipId.ToString();
                                    oGastosPatio["TIPO"] = "VENTA";
                                    oGastosPatio["ITEM"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    oGastosPatio["CANTIDAD"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    oGastosPatio["ENTREGA"] = entrega;
                                    oGastosPatio["DEVOLUCION"] = 0;
                                    if (esNaviera)
                                        oGastosPatio["NAVIERA"] = naviera;
                                    else
                                        oGastosPatio["NAVIERA"] = 0;
                                    oGastosPatio["PRECIO"] = precioGastosPatio;
                                    oGastosPatio["TOTAL"] = importeGastosPatioEntregaDevolucionVentas;
                                    dtGastosPatioCargaDescarga.Rows.Add(oGastosPatio);
                                }
                                // GASTOS PATIO ALQUILER ENTREGA
                                if (salesType == tablaAlbaranesEntrega.AxdEnum_SalesType.Alquiler.ToString())
                                {
                                    importeGastosPatioEntregaDevolucionAlquiler = 0;
                                    importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * precioGastosPatio;

                                    if (esNaviera)
                                        importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * naviera * precioGastosPatio);
                                    importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;

                                    oGastosPatio = dtGastosPatioCargaDescarga.NewRow();
                                    oGastosPatio["ALBARAN"] = AxdEntity_CustPackingSlipTrans.PackingSlipId.ToString();
                                    oGastosPatio["TIPO"] = "ALQUILER";
                                    oGastosPatio["ITEM"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    oGastosPatio["CANTIDAD"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    oGastosPatio["ENTREGA"] = entrega;
                                    oGastosPatio["DEVOLUCION"] = 0;
                                    if (esNaviera)
                                        oGastosPatio["NAVIERA"] = naviera;
                                    else
                                        oGastosPatio["NAVIERA"] = 0;
                                    oGastosPatio["PRECIO"] = precioGastosPatio;
                                    oGastosPatio["TOTAL"] = importeGastosPatioEntregaDevolucionAlquiler;
                                    dtGastosPatioCargaDescarga.Rows.Add(oGastosPatio);
                                }

                                // tabla para gastos de devolución
                                AAF = "";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow filaAA in filaEncontrada)
                                {
                                    dondeVa = "Datos AAF";
                                    AAF = Convert.ToString(filaAA["AAF"]);
                                }

                                insertar = true;
                                //filaEncontrada = dtDevoluciones.Select("AAF = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                filaEncontrada = dtDevoluciones.Select("AAF = '" + AAF + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (esNaviera)
                                    {
                                        fila["CANTIDAD CON NAVIERA"] = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        fila["CANTIDAD CON NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    }
                                    else
                                    {
                                        fila["CANTIDAD SIN NAVIERA"] = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        fila["CANTIDAD SIN NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    }
                                    fila.AcceptChanges();
                                    insertar = false;
                                    break;
                                }
                                if (insertar)
                                {
                                    oDevoluciones = dtDevoluciones.NewRow();
                                    oDevoluciones["AAF"] = AAF;
                                    oDevoluciones["ITEM"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    if (esNaviera)
                                    {
                                        oDevoluciones["CANTIDAD CON NAVIERA"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        oDevoluciones["CANTIDAD CON NAVIERA QUEDAN"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        oDevoluciones["CANTIDAD SIN NAVIERA"] = 0;
                                        oDevoluciones["CANTIDAD SIN NAVIERA QUEDAN"] = 0;
                                    }
                                    else
                                    {
                                        oDevoluciones["CANTIDAD CON NAVIERA"] = 0;
                                        oDevoluciones["CANTIDAD CON NAVIERA QUEDAN"] = 0;
                                        oDevoluciones["CANTIDAD SIN NAVIERA"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        oDevoluciones["CANTIDAD SIN NAVIERA QUEDAN"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    }
                                    dtDevoluciones.Rows.Add(oDevoluciones);
                                }
                            }
                        }
                        proxy_AlbaranEntrega_Coste.Close();

                        // APLASTAR DTPEDIDOS POR FECHA / ITEM / AAF
                        // 40006251
                        dondeVa = "aplastar dtPedidos";
                        var dataPedidos = from d in dtPedidos.AsEnumerable()
                                          orderby d.Field<string>("FECHA_CREACION"), d.Field<string>("AAF")
                                          group d by new
                                          {
                                              FECHA_CREACION = d.Field<string>("FECHA_CREACION"),
                                              TIPO = d.Field<string>("TIPO"),
                                              ITEM = d.Field<string>("ITEM_ID"),
                                              CODIGO_AAF = d.Field<string>("AAF"),
                                          } into grupo
                                          select new
                                          {
                                              tipo = grupo.Key.TIPO,
                                              fecha = grupo.Key.FECHA_CREACION,
                                              aaf = grupo.Key.CODIGO_AAF,
                                              articulo = grupo.Key.ITEM,
                                              cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("SALESQTY")))
                                          };

                        dondeVa = "copiar a dtPedidosAgrupado";
                        dtPedidosAgrupado = new System.Data.DataTable();

                        dondeVa = "creando columnas en dtPedidosAgrupado";
                        dtPedidosAgrupado.Columns.Add("TIPO");
                        dtPedidosAgrupado.Columns.Add("FECHA");
                        dtPedidosAgrupado.Columns.Add("AAF");
                        dtPedidosAgrupado.Columns.Add("ARTICULO");
                        dtPedidosAgrupado.Columns.Add("CANTIDAD");
                        dtPedidosAgrupado.Columns.Add("USADO");
                        dtPedidosAgrupado.Columns.Add("MIXTO");
                        dtPedidosAgrupado.Columns.Add("NUEVO");

                        dondeVa = "copiando a dtPedidosAgrupado";
                        foreach (var itemPedidos in dataPedidos)
                            dtPedidosAgrupado.Rows.Add(itemPedidos.tipo.ToString(), itemPedidos.fecha.ToString(), itemPedidos.aaf.ToString(), itemPedidos.articulo.ToString(), itemPedidos.cantidad.ToString(), "0", "0", "0");

                        // APLASTAR DTALBARANES POR FECHA / AAF / TIPO
                        // 40006251
                        dondeVa = "aplastar dtAlbaranes";
                        var dataAlbaranes = from d in dtAlbaranes.AsEnumerable()
                                            orderby d.Field<string>("FECHA"), d.Field<string>("AAF"), d.Field<string>("Estado")
                                            group d by new
                                            {
                                                FECHA_ALBARAN = d.Field<string>("FECHA"),
                                                CODIGO_AAF = d.Field<string>("AAF"),
                                                ESTADO_ARTICULO = d.Field<string>("Estado"),
                                            } into grupo
                                            select new
                                            {
                                                fecha = grupo.Key.FECHA_ALBARAN,
                                                aaf = grupo.Key.CODIGO_AAF,
                                                estado = grupo.Key.ESTADO_ARTICULO,
                                                cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("QTY")))
                                            };

                        dondeVa = "copiar a dtAlbaranesAgrupado";
                        dtAlbaranesAgrupado = new System.Data.DataTable();

                        dondeVa = "creando columnas en dtAlbaranesAgrupado";
                        dtAlbaranesAgrupado.Columns.Add("FECHA");
                        dtAlbaranesAgrupado.Columns.Add("AAF");
                        dtAlbaranesAgrupado.Columns.Add("CANTIDAD");
                        dtAlbaranesAgrupado.Columns.Add("CANTIDAD_QUEDA");
                        dtAlbaranesAgrupado.Columns.Add("ESTADO");

                        dondeVa = "copiando a dtAlbaranesAgrupado";
                        foreach (var itemAlbaran in dataAlbaranes)
                            dtAlbaranesAgrupado.Rows.Add(itemAlbaran.fecha.ToString(), itemAlbaran.aaf.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.estado.ToString());

                        // DISTRIBUIR DTPEDIDOS NUEVO / MIXTO / USADO
                        dondeVa = "distribuir nuevo / mixto / usado";
                        foreach (DataRow filaPedido in dtPedidosAgrupado.Rows)
                        {
                            // aquí quitando positivos
                            if (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]) >= 0)
                            {
                                faltan = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) - Convert.ToInt32(filaPedido[dtPedidosAgrupados_mixto]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]);

                                // NUEVO
                                if (faltan != 0)
                                {
                                    filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'NUEVO' AND CANTIDAD_QUEDA > '0'");
                                    foreach (DataRow filaCantidad in filaEncontrada)
                                    {
                                        if (faltan > Math.Abs(Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])))
                                        {
                                            filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            filaCantidad["CANTIDAD_QUEDA"] = "0";
                                        }
                                        if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                        {
                                            filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + faltan;
                                            filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                            faltan = 0;
                                        }
                                        if (faltan == 0)
                                            break;
                                    }
                                }

                                // MIXTO
                                if (faltan != 0)
                                {
                                    filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'MIXTO' AND CANTIDAD_QUEDA > '0'");
                                    foreach (DataRow filaCantidad in filaEncontrada)
                                    {
                                        if (faltan > Math.Abs(Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])))
                                        {
                                            filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            filaCantidad["CANTIDAD_QUEDA"] = "0";
                                        }
                                        if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                        {
                                            filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + faltan;
                                            filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                            faltan = 0;
                                        }
                                        if (faltan == 0)
                                            break;
                                    }
                                }

                                // USADO
                                if (faltan != 0)
                                {
                                    filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'USADO' AND CANTIDAD_QUEDA > '0'");
                                    foreach (DataRow filaCantidad in filaEncontrada)
                                    {
                                        if (faltan > Math.Abs(Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])))
                                        {
                                            filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            filaCantidad["CANTIDAD_QUEDA"] = "0";
                                        }
                                        if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                        {
                                            filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + faltan;
                                            filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                            faltan = 0;
                                        }
                                        if (faltan == 0)
                                            break;
                                    }
                                }

                                // SI QUEDA ALGO POR ASIGNAR ES USADO
                                if (faltan != 0)
                                    filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + faltan;

                                // CALCULO filaPedido[dtPedidosAgrupados_usado] / filaPedido[dtPedidosAgrupados_mixto]  / filaPedido[dtPedidosAgrupados_nuevo]
                                dondeVa = "recuperar coeficiente";
                                coeficienteNuevo = 0;
                                coeficienteUsado = 0;
                                filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "'");
                                foreach (DataRow filaTax in filaEncontrada)
                                {
                                    if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                        coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                    if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                    {
                                        coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                        coeficienteMixto = Convert.ToDecimal(filaTax["Valor"]);
                                    }

                                    if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje MPO abono TAX")
                                        porcentajeAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);
                                    if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje Máximo MPO abono TAX")
                                        porcentajeMaxAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);
                                }

                                precioCoste = 0;
                                dondeVa = "recuperar precio";
                                if (hayPrecio)
                                {
                                    dondeVa = "buscar precio dataset // " + articulos;
                                    filaEncontrada = dtArticulos.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                    if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(filaPedido[dtPedidosAgrupados_articulo].ToString().ToUpper()) == -1)
                                    {
                                        filaEncontrada = dtArticulosLIQ.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                        if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(filaPedido[dtPedidosAgrupados_articulo].ToString().ToUpper()) == -1)
                                        {
                                            salvarIndicencia(empresa, "FICHA", filaPedido[dtPedidosAgrupados_articulo].ToString(), "No hay PS del artículo.");

                                            imgWarning.Visible = true;
                                            lblMensajeError.Visible = true;
                                            lblMensajeError.Text = lblMensajeError.Text + "(PED) No se ha localizado el precio del articulo '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' //";
                                        }
                                        else
                                        {
                                            foreach (DataRow filaprecio in filaEncontrada)
                                            {
                                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                    precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (DataRow filaprecio in filaEncontrada)
                                        {
                                            nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                            if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                        }
                                    }
                                }

                                dondeVa = "calcular coste MPO";
                                dec_importeCosteMPO = 0;
                                dec_importeCosteLIQ = 0;
                                if (filaPedido[dtPedidosAgrupados_tipo].ToString() == "MPO" || filaPedido[dtPedidosAgrupados_tipo].ToString() == "LIQ")
                                {
                                    if (filaPedido[dtPedidosAgrupados_tipo].ToString() == "MPO")
                                    {
                                        dec_importeCosteMPO = (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                                        dec_importeCosteMPO = dec_importeCosteMPO + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                                        dec_importeCosteMPO = dec_importeCosteMPO + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                                    }

                                    if (filaPedido[dtPedidosAgrupados_tipo].ToString() == "LIQ")
                                    {
                                        dec_importeCosteLIQ = (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                                        dec_importeCosteLIQ = dec_importeCosteLIQ + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                                        dec_importeCosteLIQ = dec_importeCosteLIQ + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                                    }

                                    dec_importeTotalCosteMPOUsado = dec_importeTotalCosteMPOUsado + dec_importeCosteMPO;
                                    dec_importeTotalCosteLIQUsado = dec_importeTotalCosteLIQUsado + dec_importeCosteLIQ;

                                    dondeVa = "calcular cantidad MPO positivo";
                                    cantidadMPOPositivo = dtTax.AsEnumerable()
                                        .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && y.Field<string>("TIPO MOVIMIENTO POSITIVO") == "LOSTJOBSITEOUT" && Convert.ToDecimal(y.Field<decimal>("CANTIDAD")) > 0)
                                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                                    dondeVa = "calcular abono MPO";
                                    if (limitarAbonoTaxMPO && cantidadMPOPositivo == 0)
                                    {
                                        abonoMax1 = 0;
                                        abonoMax2 = 0;
                                        totalTax = 0;
                                        totalBonificacion = 0;
                                        totalCantidadTaxBonificacion = 0;
                                        totalCantidad = 0;
                                        totalCantidadVan = 0;

                                        filaEncontrada = dtAbonoMPO.Select("ITEM = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                        if (filaEncontrada.Count() == 0)
                                        {
                                            filaEncontrada = dtMovimientosLiquidacion.Select("ITEM = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                            if (filaEncontrada.Count() != 0)
                                            {
                                                foreach (DataRow fila in filaEncontrada)
                                                {
                                                    int columna = 1;
                                                    while (columna <= (dtMovimientosLiquidacion.Columns.Count - 10) / 5)
                                                    {
                                                        dondeVa = "calcular abono MPO tax consumible";
                                                        DateTime fechaMax = Convert.ToDateTime(fila["FECHA FINAL " + columna.ToString()].ToString());

                                                        // TAX CONSUMIBLE
                                                        totalTax = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE TC " + columna.ToString())));

                                                        totalBonificacion = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("ABONO TC " + columna.ToString())));

                                                        dondeVa = "totalCantidadTaxBonificacion";
                                                        totalCantidadTaxBonificacion = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && y.Field<DateTime>("FECHA") <= fechaMax && Convert.ToDecimal(y.Field<string>("CANTIDAD")) > 0)
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("CANTIDAD")));

                                                        dondeVa = "totalCantidad";
                                                        totalCantidad = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && y.Field<DateTime>("FECHA") == fechaMax && y.Field<string>("TIPO MOVIMIENTO") == "SALESJOBSITEOUT")
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("CANTIDAD")));

                                                        totalCantidadTaxBonificacion = totalCantidadTaxBonificacion - totalCantidadVan;
                                                        totalCantidadVan = Math.Abs(totalCantidadVan) + Math.Abs(totalCantidad);

                                                        dondeVa = "abonoMax2";
                                                        if (totalCantidadTaxBonificacion != 0)
                                                            abonoMax2 = abonoMax2 + ((((totalTax - totalBonificacion) / totalCantidadTaxBonificacion) * Convert.ToDecimal(totalCantidad)) * porcentajeMaxAbonoTaxMPO) / 100;
                                                        columna = columna + 1;
                                                    }

                                                    dondeVa = "calcular abono 1 y 2";
                                                    abonoMax1 = ((dec_importeCosteMPO + dec_importeCosteLIQ) * porcentajeAbonoTaxMPO) / 100;
                                                    if (abonoMax1 < abonoMax2)
                                                        abonoMPOTC = abonoMPOTC + abonoMax1;
                                                    else
                                                        abonoMPOTC = abonoMPOTC + abonoMax2;

                                                    dondeVa = "calcular incluir datatable";
                                                    oItemAbonoMPO = dtAbonoMPO.NewRow();
                                                    oItemAbonoMPO["ITEM"] = filaPedido[dtPedidosAgrupados_aaf].ToString();
                                                    oItemAbonoMPO["TIPO"] = "CONSUMIBLE";
                                                    oItemAbonoMPO["TAX-ABONO"] = (totalTax + totalBonificacion).ToString("#,##0.00");
                                                    oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                                                    oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                                                    if (abonoMax1 < abonoMax2)
                                                        oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                                                    else
                                                        oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                                                    dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                                                    oItemAbonoMPO = null;

                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                dondeVa = "calcular abono MPO tax consumible";
                                                // TAX CONSUMIBLE
                                                totalTax = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX CONSUMIBLE")));

                                                totalBonificacion = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("BONIFICACION")));

                                                totalCantidadTaxBonificacion = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && (y.Field<decimal>("TAX CONSUMIBLE") >= 0 || y.Field<decimal>("TAX CONSUMIBLE") <= 0))
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                                                dondeVa = "calcular total cantidad tax bonificación";
                                                totalCantidadTaxBonificacion = totalCantidadTaxBonificacion - Math.Abs(cantidadMPOPositivo);

                                                if (totalCantidadTaxBonificacion != 0)
                                                    abonoMax2 = ((((totalTax + totalBonificacion) / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])) * porcentajeMaxAbonoTaxMPO) / 100;

                                                dondeVa = "calcular abono 1 y 2";
                                                abonoMax1 = ((dec_importeCosteMPO + dec_importeCosteLIQ) * porcentajeAbonoTaxMPO) / 100;
                                                if (abonoMax1 < abonoMax2)
                                                    abonoMPOTC = abonoMPOTC + abonoMax1;
                                                else
                                                    abonoMPOTC = abonoMPOTC + abonoMax2;

                                                dondeVa = "calcular incluir datatable";
                                                oItemAbonoMPO = dtAbonoMPO.NewRow();
                                                oItemAbonoMPO["ITEM"] = filaPedido[dtPedidosAgrupados_aaf].ToString();
                                                oItemAbonoMPO["CANTIDAD"] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]).ToString("#,##0");
                                                oItemAbonoMPO["PRECIO"] = precioCoste.ToString("#,##0.00");
                                                oItemAbonoMPO["COEFICIENTE"] = coeficienteUsado.ToString("#,##0.00");
                                                oItemAbonoMPO["TIPO"] = "CONSUMIBLE";
                                                oItemAbonoMPO["TAX-ABONO"] = (totalTax + totalBonificacion).ToString("#,##0.00");
                                                oItemAbonoMPO["CANTIDAD TAX-ABONO"] = totalCantidadTaxBonificacion.ToString("#,##0");
                                                if (totalCantidadTaxBonificacion != 0)
                                                    oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = (((totalTax + totalBonificacion) / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])).ToString("#,##0.00");
                                                else
                                                    oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = "0.00";
                                                oItemAbonoMPO["COSTE MPO"] = (dec_importeCosteMPO + dec_importeCosteLIQ).ToString("#,##0.00");
                                                oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                                                oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                                                if (abonoMax1 < abonoMax2)
                                                    oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                                                else
                                                    oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                                                dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                                                oItemAbonoMPO = null;
                                            }

                                            dondeVa = "calcular abono MPO tax NO consumible";
                                            // TAX NO CONSUMIBLE
                                            abonoMax1 = 0;
                                            abonoMax2 = 0;
                                            totalTax = 0;

                                            totalTax = dtTax.AsEnumerable()
                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                            .Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX NO CONSUMIBLE")));

                                            totalCantidadTaxBonificacion = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && (y.Field<decimal>("TAX NO CONSUMIBLE") >= 0 || y.Field<decimal>("TAX NO CONSUMIBLE") <= 0))
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                                            dondeVa = "calcular total cantidad tax bonificación";
                                            totalCantidadTaxBonificacion = totalCantidadTaxBonificacion - Math.Abs(cantidadMPOPositivo);

                                            if (porcentajeAbonoTaxMPO != 0)
                                                abonoMax1 = ((dec_importeCosteMPO + dec_importeCosteLIQ) * porcentajeAbonoTaxMPO) / 100;
                                            if (totalCantidadTaxBonificacion != 0)
                                                abonoMax2 = (((totalTax / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])) * porcentajeMaxAbonoTaxMPO) / 100;
                                            if (abonoMax1 < abonoMax2)
                                                abonoMPOTNC = abonoMPOTNC + abonoMax1;
                                            else
                                                abonoMPOTNC = abonoMPOTNC + abonoMax2;

                                            oItemAbonoMPO = dtAbonoMPO.NewRow();
                                            oItemAbonoMPO["ITEM"] = filaPedido[dtPedidosAgrupados_aaf].ToString();
                                            oItemAbonoMPO["CANTIDAD"] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]).ToString("#,##0");
                                            oItemAbonoMPO["PRECIO"] = precioCoste.ToString("#,##0.00");
                                            oItemAbonoMPO["COEFICIENTE"] = coeficienteUsado.ToString("#,##0.00");
                                            oItemAbonoMPO["TIPO"] = "NO CONSUMIBLE";
                                            oItemAbonoMPO["TAX-ABONO"] = totalTax.ToString("#,##0.00");
                                            oItemAbonoMPO["CANTIDAD TAX-ABONO"] = totalCantidadTaxBonificacion.ToString("#,##0");
                                            if (totalCantidadTaxBonificacion != 0)
                                                oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = ((totalTax / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])).ToString("#,##0.00");
                                            else
                                                oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = "0.00";
                                            oItemAbonoMPO["COSTE MPO"] = (dec_importeCosteMPO + dec_importeCosteLIQ).ToString("#,##0.00");
                                            oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                                            oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                                            if (abonoMax1 < abonoMax2)
                                                oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                                            else
                                                oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                                            dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                                            oItemAbonoMPO = null;
                                        }
                                    }
                                } // aqui eliminado positivos
                            }
                            else
                            {
                                importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                                importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                                importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                            }

                        }
                    }
                }


                dondeVa = "Datos ws albaranes de entrega";
                System.Collections.IEnumerator enumerator_AlbaranEntrega;
                // CABECERA
                dondeVa = "contexto_AlbaranEntrega";
                tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega = new tablaAlbaranesEntrega.CallContext();
                contexto_AlbaranEntrega.Company = empresa;

                dondeVa = "criterio";
                tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega = new tablaAlbaranesEntrega.QueryCriteria();
                criterio_AlbaranEntrega.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                //ProjTable_AlbaranEntrega
                criterio_AlbaranEntrega.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                criterio_AlbaranEntrega.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                criterio_AlbaranEntrega.CriteriaElement[0].FieldName = "ObraId";
                criterio_AlbaranEntrega.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                criterio_AlbaranEntrega.CriteriaElement[0].Value1 = numero;

                dondeVa = "credenciales";
                tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega = new tablaAlbaranesEntrega.CustPackingServiceClient();
                proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "proxy CustPackingSlipTrans";
                tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking = proxy_AlbaranEntrega.find(contexto_AlbaranEntrega, criterio_AlbaranEntrega);
                datosGenerales = "";
                dondeVa = "validar";
                if (AxdCustPacking.CustPackingSlipTrans is null)
                {
                    proxy_AlbaranEntrega.Close();
                }
                else
                {
                    dondeVa = "recorrer albaranes";
                    enumerator_AlbaranEntrega = AxdCustPacking.CustPackingSlipTrans.GetEnumerator();

                    while (enumerator_AlbaranEntrega.MoveNext())
                    {
                        tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans AxdEntity_CustPackingSlipTrans = (tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans)enumerator_AlbaranEntrega.Current;
                        tipoArticulo = "";
                        dondeVa = "recorrer albaranes dtArticulosLiquidacion";
                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                        foreach (DataRow filaTipo in filaEncontrada)
                        {
                            dondeVa = "ajustar datos AAF y tipo de artículo";
                            tipoArticulo = Convert.ToString(filaTipo["TipoArticulo"]).ToUpper().Trim();
                            dondeVa = "Tipo de artículo: " + tipoArticulo;
                            AAF = Convert.ToString(filaTipo["AAF"]);
                            dondeVa = "AAF: " + AAF;

                            precioCoste = 0;
                            filaEncontrada = dtArticulos.Select("Articulo = '" + AAF + "'"); // AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                            foreach (DataRow filaprecio in filaEncontrada)
                            {
                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                    precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                break;
                            }

                            if (precioCoste == 0)
                            {
                                dondeVa = "ROP_PreciosArticulos";
                                conexion = new SqlConnection(strConexion);
                                conexion.Open();
                                comando = conexion.CreateCommand();
                                comando.CommandText = "ROP_PreciosArticulos";
                                comando.CommandTimeout = 240000;
                                comando.CommandType = CommandType.StoredProcedure;
                                comando.Parameters.AddWithValue("@empresa", empresa);
                                if (delegacion == "")
                                    comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                else
                                    comando.Parameters.AddWithValue("@delegacion", delegacion);
                                //conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@articulos", AAF + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@moneda", moneda);
                                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@articulosCambio", AAF + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@ficha", numero);
                                comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                comando.Parameters.AddWithValue("@usuario", usuario);
                                dtTabla = new System.Data.DataTable();
                                adaptador = new SqlDataAdapter(comando);
                                adaptador.Fill(dtTabla);
                                adaptador.Dispose();
                                comando.Dispose();
                                conexion.Close();
                                conexion.Dispose();

                                //conexiones.crearConexion();
                                //conexiones.comando = conexiones.conexion.CreateCommand();
                                //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                                //conexiones.comando.CommandTimeout = 240000;
                                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                //if (delegacion == "")
                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                //else
                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                                ////conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@articulos", AAF + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                ////conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AAF + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@ficha", numero);
                                //conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                                //dtTabla = new System.Data.DataTable();
                                //adaptador = new SqlDataAdapter(conexiones.comando);
                                //adaptador.Fill(dtTabla);
                                //adaptador.Dispose();
                                //conexiones.comando.Dispose();
                                //conexiones.conexion.Close();
                                //conexiones.conexion.Dispose();

                                if (dtTabla.Rows.Count > 0)
                                    precioCoste = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[0]["Precio"]));
                            }

                            dondeVa = "tramitar albaranes entrega";
                            insertar = true;
                            coeficienteNuevo = 0;
                            coeficienteUsado = 0;
                            porcentajeBuenTrato = 0;
                            filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                            foreach (DataRow filaTax in filaEncontrada)
                            {
                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                    coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                    coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                                    porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                                if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                                    coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                            }
                            if (porcentajeBuenTrato > 0)
                            {
                                insertar = true;
                                filaEncontrada = dtBuenTrato.Select("[Item entregadas] = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (tipoArticulo == "NUEVO")
                                        fila["Unidades nuevo entregado"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                    else
                                        fila["Unidades usado entregado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();

                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        fila["Unidades alquiler"] = (Convert.ToDecimal(fila["Unidades alquiler"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        break;
                                    }
                                    fila.AcceptChanges();
                                    insertar = false;
                                }
                                if (insertar)
                                {
                                    AAF = "";
                                    filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                    foreach (DataRow filaAA in filaEncontrada)
                                    {
                                        dondeVa = "Datos AAF";
                                        AAF = Convert.ToString(filaAA["AAF"]);
                                    }

                                    if (!listaArticulosBuenTrato.Contains(AAF))
                                        listaArticulosBuenTrato.Add(AAF);

                                    oItemBuenTrato = dtBuenTrato.NewRow();
                                    oItemBuenTrato["Item entregadas"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    if (tipoArticulo == "NUEVO")
                                        oItemBuenTrato["Unidades nuevo entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    else
                                        oItemBuenTrato["Unidades usado entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion nuevo entregado"] = coeficienteNuevo.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion usado entregado"] = coeficienteUsado.ToString("#,##0.00");
                                    oItemBuenTrato["AAF"] = AAF;
                                    oItemBuenTrato["Unidades alquiler"] = "0";
                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        oItemBuenTrato["Unidades alquiler"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty).ToString();
                                        break;
                                    }
                                    dtBuenTrato.Rows.Add(oItemBuenTrato);
                                    oItemBuenTrato = null;
                                }
                            }
                            else
                            {
                                // CHATARRA
                                insertar = true;
                                filaEncontrada = dtChatarra.Select("[Item entregadas] = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (tipoArticulo == "NUEVO")
                                    {
                                        fila["Unidades nuevo entregado"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        fila["Unidades entregadas nuevo"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                    }
                                    else
                                    {
                                        fila["Unidades usado entregado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        fila["Unidades entregadas usado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                    }
                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        fila["Unidades alquiler"] = (Convert.ToDecimal(fila["Unidades alquiler"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        break;
                                    }
                                    fila.AcceptChanges();
                                    insertar = false;
                                }
                                if (insertar)
                                {
                                    AAF = "";
                                    filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                    foreach (DataRow filaAA in filaEncontrada)
                                    {
                                        dondeVa = "Datos AAF";
                                        AAF = Convert.ToString(filaAA["AAF"]);
                                    }

                                    oItemBuenTrato = dtChatarra.NewRow();
                                    oItemBuenTrato["Item entregadas"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    if (tipoArticulo == "NUEVO")
                                    {
                                        oItemBuenTrato["Unidades nuevo entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                        oItemBuenTrato["Unidades entregadas nuevo"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    }
                                    else
                                    {
                                        oItemBuenTrato["Unidades usado entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                        oItemBuenTrato["Unidades entregadas usado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    }
                                    oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion nuevo entregado"] = coeficienteNuevo.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion usado entregado"] = coeficienteUsado.ToString("#,##0.00");
                                    oItemBuenTrato["AAF"] = AAF;
                                    oItemBuenTrato["Unidades alquiler"] = "0";
                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        oItemBuenTrato["Unidades alquiler"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty).ToString();
                                        break;
                                    }
                                    dtChatarra.Rows.Add(oItemBuenTrato);
                                    oItemBuenTrato = null;
                                }
                            }
                            break;
                        }
                    }
                }
                proxy_AlbaranEntrega.Close();

                // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                dtDatosConfiguracion = new System.Data.DataTable();
                horaDatosConfigurados_3 = DateTime.Now;
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosConfiguracion";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@usuario", "diana"); // Environment.UserName);
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                comando.Parameters.AddWithValue("@moneda", moneda);
                comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                adaptadorDatosConfiguracion.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosConfiguracion";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@usuario", "diana"); // Environment.UserName);
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                //adaptadorDatosConfiguracion = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                //adaptadorDatosConfiguracion.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                horaDatosConfigurados_4 = DateTime.Now.Subtract(horaDatosConfigurados_3);

                //dtArticulosLiquidacion = localizarEstadoArticulos(usuario, "");

                // FACTURACION
                dondeVa = "Facturación cabecera WS";
                System.Collections.IEnumerator enumerator_facturas;

                // CABECERA
                tablaCabeceraFacturas.CallContext contexto_facturasCabecera = new tablaCabeceraFacturas.CallContext();
                contexto_facturasCabecera.Company = empresa;

                tablaCabeceraFacturas.QueryCriteria criterio_facturasCabecera = new tablaCabeceraFacturas.QueryCriteria();
                criterio_facturasCabecera.CriteriaElement = new tablaCabeceraFacturas.CriteriaElement[1];

                criterio_facturasCabecera.CriteriaElement[0] = new tablaCabeceraFacturas.CriteriaElement();
                criterio_facturasCabecera.CriteriaElement[0].DataSourceName = "CustInvoiceJour";
                criterio_facturasCabecera.CriteriaElement[0].FieldName = "ObraId";
                criterio_facturasCabecera.CriteriaElement[0].Operator = tablaCabeceraFacturas.Operator.Equal;
                criterio_facturasCabecera.CriteriaElement[0].Value1 = numero;

                tablaCabeceraFacturas.DiarioFacturasServiceClient proxy_facturasCabacera = new tablaCabeceraFacturas.DiarioFacturasServiceClient();
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "Facturación WS proxy";
                tablaCabeceraFacturas.AxdDiarioFacturas axdtablaCabeceraFacturas_1 = proxy_facturasCabacera.find(contexto_facturasCabecera, criterio_facturasCabecera);
                if (axdtablaCabeceraFacturas_1.CustInvoiceJour is null)
                {
                    proxy_facturasCabacera.Close();
                }
                else
                {
                    enumerator_facturas = axdtablaCabeceraFacturas_1.CustInvoiceJour.GetEnumerator();
                    while (enumerator_facturas.MoveNext())
                    {
                        tablaCabeceraFacturas.AxdEntity_CustInvoiceJour AxdEntity_CustInvoiceTrans = (tablaCabeceraFacturas.AxdEntity_CustInvoiceJour)enumerator_facturas.Current;
                        if (AxdEntity_CustInvoiceTrans.RentCanon.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_RentCanon.Canon.ToString().ToUpper() || AxdEntity_CustInvoiceTrans.RentCanon.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_RentCanon.CanonFenolico.ToString().ToUpper())
                        {
                            oItemFacturaCanon = dtFacturasCanon.NewRow();
                            oItemFacturaCanon["TIPO"] = AxdEntity_CustInvoiceTrans.RentCanon.ToString().ToUpper();
                            oItemFacturaCanon["FACTURA"] = AxdEntity_CustInvoiceTrans.InvoiceId.ToString();
                            if (AxdEntity_CustInvoiceTrans.InvoiceAmount is null)
                                oItemFacturaCanon["IMPORTE"] = 0;
                            else
                                oItemFacturaCanon["IMPORTE"] = AxdEntity_CustInvoiceTrans.InvoiceAmount;
                            dtFacturasCanon.Rows.Add(oItemFacturaCanon);
                        }
                        else
                        {
                            if (AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper())
                            {
                                oItemFacturaCanon = dtFacturasCanon.NewRow();
                                oItemFacturaCanon["TIPO"] = AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper();
                                oItemFacturaCanon["FACTURA"] = AxdEntity_CustInvoiceTrans.InvoiceId.ToString();
                                if (AxdEntity_CustInvoiceTrans.InvoiceAmount is null)
                                    oItemFacturaCanon["IMPORTE"] = 0;
                                else
                                    oItemFacturaCanon["IMPORTE"] = AxdEntity_CustInvoiceTrans.InvoiceAmount;
                                dtFacturasCanon.Rows.Add(oItemFacturaCanon);
                            }
                            // Es liquidación
                            if (AxdEntity_CustInvoiceTrans.RentInvoicePrintType.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_RentInvoicePrintType.Beam.ToString().ToUpper())
                            {
                                oItemFacturaCanon = dtFacturasCanon.NewRow();
                                oItemFacturaCanon["TIPO"] = tablaCabeceraFacturas.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper();
                                oItemFacturaCanon["FACTURA"] = AxdEntity_CustInvoiceTrans.InvoiceId.ToString();
                                if (AxdEntity_CustInvoiceTrans.InvoiceAmount is null)
                                    oItemFacturaCanon["IMPORTE"] = 0;
                                else
                                    oItemFacturaCanon["IMPORTE"] = AxdEntity_CustInvoiceTrans.InvoiceAmount;
                                dtFacturasCanon.Rows.Add(oItemFacturaCanon);
                            }
                        }
                    }
                }
                proxy_facturasCabacera.Close();

                // LINEAS
                tablaLineasFacturas.CallContext contexto_facturas = new tablaLineasFacturas.CallContext();
                contexto_facturas.Company = empresa;

                tablaLineasFacturas.QueryCriteria criterio_facturas = new tablaLineasFacturas.QueryCriteria();
                criterio_facturas.CriteriaElement = new tablaLineasFacturas.CriteriaElement[1];

                criterio_facturas.CriteriaElement[0] = new tablaLineasFacturas.CriteriaElement();
                criterio_facturas.CriteriaElement[0].DataSourceName = "CustInvoiceTrans";
                criterio_facturas.CriteriaElement[0].FieldName = "ObraId";
                criterio_facturas.CriteriaElement[0].Operator = tablaLineasFacturas.Operator.Equal;
                criterio_facturas.CriteriaElement[0].Value1 = numero;

                tablaLineasFacturas.LineasFacturasServiceClient proxy_facturas = new tablaLineasFacturas.LineasFacturasServiceClient();
                proxy_facturas.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_facturas.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_facturas.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                tablaLineasFacturas.AxdLineasFacturas axdtablaFacturas_1 = proxy_facturas.find(contexto_facturas, criterio_facturas);

                if (axdtablaFacturas_1.CustInvoiceTrans is null)
                {
                    proxy_facturas.Close();
                }
                else
                {
                    dondeVa = "Enumerator Facturación";
                    enumerator_facturas = axdtablaFacturas_1.CustInvoiceTrans.GetEnumerator();
                    dondeVa = "MoveNext Facturación";
                    while (enumerator_facturas.MoveNext())
                    {
                        dondeVa = "Current Facturación";
                        tablaLineasFacturas.AxdEntity_CustInvoiceTrans AxdEntity_CustInvoiceTrans = (tablaLineasFacturas.AxdEntity_CustInvoiceTrans)enumerator_facturas.Current;

                        esCanon = false;
                        esCanonFenolico = false;
                        esLiquidacion = false;
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "' AND TIPO = '" + tablaCabeceraFacturas.AxdEnum_RentCanon.Canon.ToString().ToUpper() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            esCanon = true;
                            break;
                        }
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "' AND TIPO = '" + tablaCabeceraFacturas.AxdEnum_RentCanon.CanonFenolico.ToString().ToUpper() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            esCanonFenolico = true;
                            break;
                        }
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "' AND TIPO = '" + tablaCabeceraFacturas.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            esLiquidacion = true;
                            break;
                        }

                        tipoServicio = "";
                        productType = "";
                        tipoArticulo = "";

                        filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AxdEntity_CustInvoiceTrans.ItemId.ToString() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            dondeVa = "encontró configuracion dataset // " + AxdEntity_CustInvoiceTrans.ItemId.ToString() + " // ";

                            dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                            if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                            dondeVa = "encontró configuracion dataset // Tipo producto";
                            productType = Convert.ToString(fila["ProductTypeName_es"]);
                            dondeVa = "encontró configuracion dataset // Tipo artículo";
                            tipoArticulo = Convert.ToString(fila["TipoArticulo"]);
                            break;
                        }

                        oItemGastosFijos = dtGastosFijos.NewRow();
                        oItemGastosFijos["ITEM"] = AxdEntity_CustInvoiceTrans.ItemId.ToString().ToUpper();
                        oItemGastosFijos["TIPO"] = AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper();
                        oItemGastosFijos["IMPORTE TOTAL"] = 0;
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            oItemGastosFijos["IMPORTE TOTAL"] = Convert.ToDecimal(fila["IMPORTE"]);
                            break;
                        }
                        oItemGastosFijos["IMPORTE"] = Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                        dtGastosFijos.Rows.Add(oItemGastosFijos);

                        //if (AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_SalesType.Alquiler.ToString().ToUpper())
                        //{
                        //    // facturacion alquiler
                        //}
                        //else
                        //{
                        if (codigosTransporte.IndexOf(AxdEntity_CustInvoiceTrans.ItemId.ToString().ToUpper()) >= 0)
                            importePorte_TR001 = importePorte_TR001 + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                        else
                        {
                            if (esCanon)
                                importeFacturacionVentaUneCif = importeFacturacionVentaUneCif + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                            else if (esCanonFenolico)
                                importeFacturacionVentFenolicoNuevo = importeFacturacionVentFenolicoNuevo + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                            else
                            {
                                if (AxdEntity_CustInvoiceTrans.SalesType == tablaLineasFacturas.AxdEnum_SalesType.Alquiler)
                                    importeFacturacionAlquiler = importeFacturacionAlquiler + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                else
                                {
                                    if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                        importeFacturacionVentaDepartamentoTecnico = importeFacturacionVentaDepartamentoTecnico + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    else if (tipoServicio.ToUpper() == "MONTAJES")
                                        importeFacturacionVentaMontajes = importeFacturacionVentaMontajes + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    else
                                    {
                                        if (productType.Trim().ToUpper() != "SERVICIO")
                                        {
                                            if (esLiquidacion)
                                                importeFacturacionVentaLiquidacion = importeFacturacionVentaLiquidacion + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                            else
                                                importeFacturacionVentaProducto = importeFacturacionVentaProducto + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                        }
                                        else
                                            importeFacturacionVentaOtrosServicios = importeFacturacionVentaOtrosServicios + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    }
                                }
                            }
                        }
                        //}
                    }
                }
                proxy_facturas.Close();

                // HOJAS DE TRABAJO: BUEN TRATO TABLERO
                // 0: None  Usado
                // 1: Repair  Usado
                // 2: BadItem  Chatarra
                // 3: New  Nuevo
                // 4: Seminew  Mal estado
                // Para buen trato tablero Mal estado = Chatarra para la familia 001
                // Para abono buen trato tablero Mal estado != Chatarra
                if (fichaCerrada)
                {
                    dondeVa = "Hojas de trabajo: llamar WS";
                    System.Collections.IEnumerator enumerator_HojasTrabajoLineas;
                    tablaHojasTrabajoLineas.CallContext contexto_HojasTrabajoLineas = new tablaHojasTrabajoLineas.CallContext();
                    contexto_HojasTrabajoLineas.Company = empresa;

                    tablaHojasTrabajoLineas.QueryCriteria criterio_HojasTrabajoLineas = new tablaHojasTrabajoLineas.QueryCriteria();
                    criterio_HojasTrabajoLineas.CriteriaElement = new tablaHojasTrabajoLineas.CriteriaElement[1];

                    criterio_HojasTrabajoLineas.CriteriaElement[0] = new tablaHojasTrabajoLineas.CriteriaElement();
                    criterio_HojasTrabajoLineas.CriteriaElement[0].DataSourceName = "WorkPaperPaletTable";
                    criterio_HojasTrabajoLineas.CriteriaElement[0].FieldName = "ObraId";
                    criterio_HojasTrabajoLineas.CriteriaElement[0].Operator = tablaHojasTrabajoLineas.Operator.Equal;
                    criterio_HojasTrabajoLineas.CriteriaElement[0].Value1 = numero;

                    tablaHojasTrabajoLineas.WorkPaperLinesServiceClient proxy_HojasTrabajoLineas = new tablaHojasTrabajoLineas.WorkPaperLinesServiceClient();
                    proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                    proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                    proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                    dondeVa = "Hojas de trabajo: proxy";
                    tablaHojasTrabajoLineas.AxdWorkPaperLines axdtablaHojasTrabajoLineas_1 = proxy_HojasTrabajoLineas.find(contexto_HojasTrabajoLineas, criterio_HojasTrabajoLineas);

                    if (!axdtablaHojasTrabajoLineas_1.WorkPaperPaletTable.Equals(null))
                    {
                        dondeVa = "Hojas de trabajo procesar";

                        enumerator_HojasTrabajoLineas = axdtablaHojasTrabajoLineas_1.WorkPaperPaletTable.GetEnumerator();
                        while (enumerator_HojasTrabajoLineas.MoveNext())
                        {
                            tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletTable AxdEntity_WorkPaperPaletTable = (tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletTable)enumerator_HojasTrabajoLineas.Current;
                            tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletLines[] AxdEntity_WorkPaperPaletLines = AxdEntity_WorkPaperPaletTable.WorkPaperPaletLines;
                            tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletLines AxdEntity_WorkPaperPaletLine;

                            PlannedHours = 0;
                            RealHours = 0;
                            if (AxdEntity_WorkPaperPaletTable.OprId.ToString() == "122" || AxdEntity_WorkPaperPaletTable.OprId.ToString() == "522")
                            {
                                PlannedHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.TheoreticalHours);
                                RealHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.RealHours);
                            }
                            if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Classify.ToString().ToUpper() && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "122" && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "522")
                            {
                                PlannedHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.TheoreticalHours);
                                RealHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.RealHours);
                            }
                            if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Repair.ToString().ToUpper())
                            {
                                PlannedHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.TheoreticalHours);
                                RealHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.RealHours);
                            }

                            for (linea = 0; linea < AxdEntity_WorkPaperPaletLines.Length; linea++)
                            {
                                AxdEntity_WorkPaperPaletLine = AxdEntity_WorkPaperPaletLines[linea];

                                precioGastosPatio = 0;
                                clasificarRepararDirecto = 0;
                                clasificarRepararIndirecto = 0;
                                clasificarDirecto = 0;
                                clasificarIndirecto = 0;
                                repararDirecto = 0;
                                repararIndirecto = 0;
                                devolucion = 0;
                                naviera = 0;
                                filaEncontrada = dtGastosPatio.Select("ProductId = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                        devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                        naviera = Convert.ToDecimal(fila["Naviera"]);

                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarReparar"])))
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararDirecto"])))
                                            clasificarRepararDirecto = Convert.ToDecimal(fila["ClasificarRepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararIndirecto"])))
                                            clasificarRepararIndirecto = Convert.ToDecimal(fila["ClasificarRepararIndirecto"]);
                                    }
                                    else
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarDirecto"])))
                                            clasificarDirecto = Convert.ToDecimal(fila["ClasificarDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarIndirecto"])))
                                            clasificarIndirecto = Convert.ToDecimal(fila["ClasificarIndirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararDirecto"])))
                                            repararDirecto = Convert.ToDecimal(fila["RepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararIndirecto"])))
                                            repararIndirecto = Convert.ToDecimal(fila["RepararIndirecto"]);
                                    }
                                    precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                }

                                // GASTOS DEVOLUCIONES
                                AAF = "";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                foreach (DataRow filaAA in filaEncontrada)
                                {
                                    dondeVa = "Datos AAF";
                                    AAF = Convert.ToString(filaAA["AAF"]);
                                }

                                cantidad = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty);
                                //filaEncontrada = dtDevoluciones.Select("ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                filaEncontrada = dtDevoluciones.Select("AAF = '" + AAF + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) > 0)
                                    {
                                        if (Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) >= cantidad)
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = cantidad * devolucion * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (cantidad * devolucion * naviera * precioGastosPatio);
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            fila["CANTIDAD CON NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) - cantidad;
                                            cantidad = 0;
                                        }
                                        else
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) * devolucion * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) * devolucion * naviera * precioGastosPatio);
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            cantidad = cantidad - Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]);
                                            fila["CANTIDAD CON NAVIERA QUEDAN"] = 0;
                                        }
                                        fila.AcceptChanges();

                                        if (cantidad > 0)
                                            break;
                                    }

                                    if (Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) > 0)
                                    {
                                        if (Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) >= cantidad)
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = cantidad * devolucion * precioGastosPatio;
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            fila["CANTIDAD SIN NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) - cantidad;
                                            cantidad = 0;
                                        }
                                        else
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) * devolucion * precioGastosPatio;
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            cantidad = cantidad - Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]);
                                            fila["CANTIDAD SIN NAVIERA QUEDAN"] = 0;
                                        }
                                        fila.AcceptChanges();

                                        if (cantidad > 0)
                                            break;
                                    }
                                }

                                // GASTOS PATIO CLASIFICAR + REPARAR
                                if (AxdEntity_WorkPaperPaletTable.OprId.ToString() == "122" || AxdEntity_WorkPaperPaletTable.OprId.ToString() == "522")
                                {
                                    insertar = true;
                                    filaEncontrada = dtGastosPatioCalculo.Select("TIPO = 'CLASIFICAR + REPARAR' AND [HOJA TRABAJO] = '" + AxdEntity_WorkPaperPaletTable.WorkPaperPaletId.ToString().ToUpper() + "' AND ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        if (PlannedHours != 0)
                                            fila["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            fila["RATIO"] = 0;
                                        fila["PLANNED HOURS ITEM"] = (Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours));
                                        fila["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) * Convert.ToDecimal(fila["RATIO"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * clasificarIndirecto * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila.AcceptChanges();
                                        insertar = false;
                                        break;
                                    }

                                    if (insertar)
                                    {
                                        oGastosPatio = dtGastosPatioCalculo.NewRow();
                                        oGastosPatio["HOJA TRABAJO"] = AxdEntity_WorkPaperPaletTable.WorkPaperPaletId;
                                        oGastosPatio["TIPO"] = "CLASIFICAR + REPARAR";
                                        oGastosPatio["PLANNED HOURS HT"] = PlannedHours;
                                        oGastosPatio["REAL HOURS HT"] = RealHours;
                                        if (PlannedHours != 0)
                                            oGastosPatio["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            oGastosPatio["RATIO"] = 0;
                                        oGastosPatio["ITEM"] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        oGastosPatio["PLANNED HOURS ITEM"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours);
                                        oGastosPatio["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * Convert.ToDecimal(oGastosPatio["RATIO"]);
                                        oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"] = precioGastosPatio;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(oGastosPatio["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * clasificarIndirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR"] = 0;
                                        oGastosPatio["TOTAL REPARAR INDIRECTO"] = 0;
                                        dtGastosPatioCalculo.Rows.Add(oGastosPatio);
                                    }
                                }

                                // GASTOS PATIO CLASIFICAR
                                if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Classify.ToString().ToUpper() && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "122" && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "522")
                                {
                                    insertar = true;
                                    filaEncontrada = dtGastosPatioCalculo.Select("TIPO = 'CLASIFICAR' AND [HOJA TRABAJO] = '" + AxdEntity_WorkPaperPaletTable.WorkPaperPaletId.ToString().ToUpper() + "' AND ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        if (PlannedHours != 0)
                                            fila["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            fila["RATIO"] = 0;
                                        fila["PLANNED HOURS ITEM"] = (Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours));
                                        fila["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) * Convert.ToDecimal(fila["RATIO"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * clasificarIndirecto * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila.AcceptChanges();
                                        insertar = false;
                                        break;
                                    }

                                    if (insertar)
                                    {
                                        oGastosPatio = dtGastosPatioCalculo.NewRow();
                                        oGastosPatio["HOJA TRABAJO"] = AxdEntity_WorkPaperPaletTable.WorkPaperPaletId;
                                        oGastosPatio["TIPO"] = "CLASIFICAR";
                                        oGastosPatio["PLANNED HOURS HT"] = PlannedHours;
                                        oGastosPatio["REAL HOURS HT"] = RealHours;
                                        if (PlannedHours != 0)
                                            oGastosPatio["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            oGastosPatio["RATIO"] = 0;
                                        oGastosPatio["ITEM"] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        oGastosPatio["PLANNED HOURS ITEM"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours);
                                        oGastosPatio["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * Convert.ToDecimal(oGastosPatio["RATIO"]);
                                        oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"] = precioGastosPatio;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(oGastosPatio["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * clasificarIndirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR"] = 0;
                                        oGastosPatio["TOTAL REPARAR INDIRECTO"] = 0;
                                        dtGastosPatioCalculo.Rows.Add(oGastosPatio);
                                    }
                                }

                                // GASTOS PATIO REPARAR
                                if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Repair.ToString().ToUpper())
                                {
                                    insertar = true;
                                    filaEncontrada = dtGastosPatioCalculo.Select("TIPO = 'REPARAR' AND [HOJA TRABAJO] = '" + AxdEntity_WorkPaperPaletTable.WorkPaperPaletId.ToString().ToUpper() + "' AND ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        fila["CANTIDAD REPARAR"] = Convert.ToDecimal(fila["CANTIDAD REPARAR"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty);
                                        fila["TOTAL REPARAR"] = (Convert.ToDecimal(fila["CANTIDAD REPARAR"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty)) * repararDirecto * precioGastosPatio;
                                        fila["TOTAL REPARAR INDIRECTO"] = (Convert.ToDecimal(fila["CANTIDAD REPARAR"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty)) * repararIndirecto * precioGastosPatio;
                                        fila.AcceptChanges();
                                        insertar = false;
                                        break;
                                    }

                                    if (insertar)
                                    {
                                        oGastosPatio = dtGastosPatioCalculo.NewRow();
                                        oGastosPatio["HOJA TRABAJO"] = AxdEntity_WorkPaperPaletTable.WorkPaperPaletId;
                                        oGastosPatio["TIPO"] = "REPARAR";
                                        oGastosPatio["ITEM"] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        oGastosPatio["CANTIDAD REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty);
                                        oGastosPatio["PRECIO REPARAR"] = precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty) * repararDirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR INDIRECTO"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty) * repararIndirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR"] = 0;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = 0;
                                        dtGastosPatioCalculo.Rows.Add(oGastosPatio);
                                    }
                                }

                                if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.None || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Repair || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                {
                                    coeficienteNuevo = 0;
                                    coeficienteUsado = 0;
                                    porcentajeBuenTrato = 0;
                                    coeficienteBuenTrato = 0;
                                    filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow filaTax in filaEncontrada)
                                    {
                                        if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                                            porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;
                                        if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                                            coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                                    }

                                    if (porcentajeBuenTrato > 0)
                                    {
                                        itemBuenTrato = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                        {
                                            dondeVa = "ROP_Producto";
                                            conexion = new SqlConnection(strConexion);
                                            conexion.Open();
                                            comando = conexion.CreateCommand();
                                            comando.CommandText = "ROP_Producto";
                                            comando.CommandTimeout = 240000;
                                            comando.CommandType = CommandType.StoredProcedure;
                                            comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                                comando.Parameters.AddWithValue("@tipo", 1);
                                            else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                comando.Parameters.AddWithValue("@tipo", 2);
                                            dtTabla = new System.Data.DataTable();
                                            adaptador = new SqlDataAdapter(comando);
                                            adaptador.Fill(dtTabla);
                                            adaptador.Dispose();
                                            comando.Dispose();
                                            conexion.Close();
                                            conexion.Dispose();
                                            //conexiones.crearConexion();
                                            //conexiones.comando = conexiones.conexion.CreateCommand();
                                            //conexiones.comando.CommandText = "ROP_Producto";
                                            //conexiones.comando.CommandTimeout = 240000;
                                            //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                            //conexiones.comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 1);
                                            //else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 2);
                                            //dtTabla = new System.Data.DataTable();
                                            //adaptador = new SqlDataAdapter(conexiones.comando);
                                            //adaptador.Fill(dtTabla);
                                            //adaptador.Dispose();
                                            //conexiones.comando.Dispose();
                                            //conexiones.conexion.Close();
                                            //conexiones.conexion.Dispose();

                                            if (dtTabla.Rows.Count > 0)
                                                itemBuenTrato = Convert.ToString(dtTabla.Rows[0]["ItemId"]);
                                        }

                                        precioHT = 0;
                                        filaEncontrada = dtArticulos.Select("Articulo = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                        foreach (DataRow filaprecio in filaEncontrada)
                                        {
                                            nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                            dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                            if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                precioHT = Convert.ToDecimal(filaprecio["Precio"]);
                                            break;
                                        }

                                        if (precioHT == 0)
                                        {
                                            dondeVa = "ROP_PreciosArticulos (3)";
                                            conexion = new SqlConnection(strConexion);
                                            conexion.Open();
                                            comando = conexion.CreateCommand();
                                            comando.CommandText = "ROP_PreciosArticulos";
                                            comando.CommandTimeout = 240000;
                                            comando.CommandType = CommandType.StoredProcedure;
                                            comando.Parameters.AddWithValue("@empresa", empresa);
                                            if (delegacion == "")
                                                comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                            else
                                                comando.Parameters.AddWithValue("@delegacion", delegacion);
                                            comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            comando.Parameters.AddWithValue("@moneda", moneda);
                                            comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            comando.Parameters.AddWithValue("@ficha", numero);
                                            comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                            comando.Parameters.AddWithValue("@usuario", usuario);
                                            dtTabla = new System.Data.DataTable();
                                            adaptador = new SqlDataAdapter(comando);
                                            adaptador.Fill(dtTabla);
                                            adaptador.Dispose();
                                            comando.Dispose();
                                            conexion.Close();
                                            conexion.Dispose();

                                            //conexiones.crearConexion();
                                            //conexiones.comando = conexiones.conexion.CreateCommand();
                                            //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                                            //conexiones.comando.CommandTimeout = 240000;
                                            //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                            //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                            //if (delegacion == "")
                                            //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                            //else
                                            //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                                            //conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                            //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            //conexiones.comando.Parameters.AddWithValue("@ficha", numero);
                                            //conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                            //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                                            //dtTabla = new System.Data.DataTable();
                                            //adaptador = new SqlDataAdapter(conexiones.comando);
                                            //adaptador.Fill(dtTabla);
                                            //adaptador.Dispose();
                                            //conexiones.comando.Dispose();
                                            //conexiones.conexion.Close();
                                            //conexiones.conexion.Dispose();

                                            if (dtTabla.Rows.Count > 0)
                                                precioHT = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[0]["Precio"]));
                                        }

                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + itemBuenTrato + "'");
                                        foreach (DataRow filaAA in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAA["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "VMD Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "VMD";
                                        oItemBuenTrato["Item Dev."] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.None || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Repair)
                                            oItemBuenTrato["Item usado"] = itemBuenTrato;
                                        else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            oItemBuenTrato["Item chatarra"] = itemBuenTrato;
                                        else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            oItemBuenTrato["Item mal estado"] = itemBuenTrato;
                                        oItemBuenTrato["Unidades clasificadas"] = AxdEntity_WorkPaperPaletLine.Qty.ToString("#,##0");
                                        oItemBuenTrato["PS devolucion"] = precioHT.ToString("#,##0.00");

                                        oItemBuenTrato["ID tipo del item"] = AxdEntity_WorkPaperPaletLine.ItemDevolutionType;
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.None)
                                            oItemBuenTrato["Tipo del item"] = "None";
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            oItemBuenTrato["Tipo del item"] = "Seminew";
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Repair)
                                            oItemBuenTrato["Tipo del item"] = "Repair";
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            oItemBuenTrato["Tipo del item"] = "BadItem";

                                        //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        {
                                            if (!listaChatarra.Contains(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato))
                                            {
                                                listaChatarra.Add(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato);
                                            }
                                        }

                                        filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + itemBuenTrato + "'");
                                        foreach (DataRow filaTax in filaEncontrada)
                                        {
                                            if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                                coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                            if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                                coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                        }

                                        oItemBuenTrato["Correccion nuevo devuelto"] = coeficienteNuevo.ToString("#,##0.00");
                                        oItemBuenTrato["Correccion usado devuelto"] = coeficienteUsado.ToString("#,##0.00");
                                        oItemBuenTrato["AAF"] = AAF;
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }
                                    else
                                    {
                                        //CHATARRA
                                        itemBuenTrato = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        {
                                            dondeVa = "ROP_Producto (2)";
                                            conexion = new SqlConnection(strConexion);
                                            conexion.Open();
                                            comando = conexion.CreateCommand();
                                            comando.CommandText = "ROP_Producto";
                                            comando.CommandTimeout = 240000;
                                            comando.CommandType = CommandType.StoredProcedure;
                                            comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 1);
                                            //else 
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                comando.Parameters.AddWithValue("@tipo", 2);
                                            dtTabla = new System.Data.DataTable();
                                            adaptador = new SqlDataAdapter(comando);
                                            adaptador.Fill(dtTabla);
                                            adaptador.Dispose();
                                            comando.Dispose();
                                            conexion.Close();
                                            conexion.Dispose();

                                            //conexiones.crearConexion();
                                            //conexiones.comando = conexiones.conexion.CreateCommand();
                                            //conexiones.comando.CommandText = "ROP_Producto";
                                            //conexiones.comando.CommandTimeout = 240000;
                                            //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                            //conexiones.comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            ////if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            ////    conexiones.comando.Parameters.AddWithValue("@tipo", 1);
                                            ////else 
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 2);
                                            //dtTabla = new System.Data.DataTable();
                                            //adaptador = new SqlDataAdapter(conexiones.comando);
                                            //adaptador.Fill(dtTabla);
                                            //adaptador.Dispose();
                                            //conexiones.comando.Dispose();
                                            //conexiones.conexion.Close();
                                            //conexiones.conexion.Dispose();

                                            if (dtTabla.Rows.Count > 0)
                                                itemBuenTrato = Convert.ToString(dtTabla.Rows[0]["ItemId"]);

                                            precioHT = 0;
                                            filaEncontrada = dtArticulos.Select("Articulo = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                            foreach (DataRow filaprecio in filaEncontrada)
                                            {
                                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                                dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                    precioHT = Convert.ToDecimal(filaprecio["Precio"]);
                                                break;
                                            }

                                            if (precioHT == 0)
                                            {
                                                dondeVa = "ROP_PreciosArticulos (2)";
                                                conexion = new SqlConnection(strConexion);
                                                conexion.Open();
                                                comando = conexion.CreateCommand();
                                                comando.CommandText = "ROP_PreciosArticulos";
                                                comando.CommandTimeout = 240000;
                                                comando.CommandType = CommandType.StoredProcedure;
                                                comando.Parameters.AddWithValue("@empresa", empresa);
                                                if (delegacion == "")
                                                    comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                                else
                                                    comando.Parameters.AddWithValue("@delegacion", delegacion);
                                                comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                comando.Parameters.AddWithValue("@moneda", moneda);
                                                comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                comando.Parameters.AddWithValue("@ficha", numero);
                                                comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                                comando.Parameters.AddWithValue("@usuario", usuario);
                                                dtTabla = new System.Data.DataTable();
                                                adaptador = new SqlDataAdapter(comando);
                                                adaptador.Fill(dtTabla);
                                                adaptador.Dispose();
                                                comando.Dispose();
                                                conexion.Close();
                                                conexion.Dispose();

                                                //conexiones.crearConexion();
                                                //conexiones.comando = conexiones.conexion.CreateCommand();
                                                //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                                                //conexiones.comando.CommandTimeout = 240000;
                                                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                                //if (delegacion == "")
                                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                                //else
                                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                                                //conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                //conexiones.comando.Parameters.AddWithValue("@ficha", numero);
                                                //conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                                                //dtTabla = new System.Data.DataTable();
                                                //adaptador = new SqlDataAdapter(conexiones.comando);
                                                //adaptador.Fill(dtTabla);
                                                //adaptador.Dispose();
                                                //conexiones.comando.Dispose();
                                                //conexiones.conexion.Close();
                                                //conexiones.conexion.Dispose();

                                                if (dtTabla.Rows.Count > 0)
                                                    precioHT = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[0]["Precio"]));
                                            }

                                            AAF = "";
                                            filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + itemBuenTrato + "'");
                                            foreach (DataRow filaAA in filaEncontrada)
                                            {
                                                dondeVa = "Datos AAF";
                                                AAF = Convert.ToString(filaAA["AAF"]);
                                            }

                                            if (!listaChatarra.Contains(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato))
                                            {
                                                listaChatarra.Add(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato);
                                            }

                                            dondeVa = "VMD Buen trato 1";
                                            oItemBuenTrato = dtChatarra.NewRow();
                                            dondeVa = "VMD";
                                            oItemBuenTrato["Item Dev."] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                oItemBuenTrato["Item chatarra"] = itemBuenTrato;
                                            //else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    oItemBuenTrato["Item mal estado"] = itemBuenTrato;
                                            oItemBuenTrato["Unidades clasificadas"] = AxdEntity_WorkPaperPaletLine.Qty.ToString("#,##0");
                                            oItemBuenTrato["PS devolucion"] = precioHT.ToString("#,##0.00");

                                            oItemBuenTrato["ID tipo del item"] = AxdEntity_WorkPaperPaletLine.ItemDevolutionType;
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    oItemBuenTrato["Tipo del item"] = "Seminew";
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                oItemBuenTrato["Tipo del item"] = "BadItem";

                                            filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + itemBuenTrato + "'");
                                            foreach (DataRow filaTax in filaEncontrada)
                                            {
                                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                                    coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                                    coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                            }

                                            oItemBuenTrato["Correccion nuevo devuelto"] = coeficienteNuevo.ToString("#,##0.00");
                                            oItemBuenTrato["Correccion usado devuelto"] = coeficienteUsado.ToString("#,##0.00");
                                            oItemBuenTrato["AAF"] = AAF;
                                            dtChatarra.Rows.Add(oItemBuenTrato);
                                            oItemBuenTrato = null;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    proxy_HojasTrabajoLineas.Close();
                }

                // CALCULAR BUEN TRATO
                decimal taximetroAbono = 0;
                decimal porcentajeAmortizado = 0;
                decimal totalEntregado = 0;
                decimal total = 0;
                decimal totalEntrega = 0;
                decimal totalDevolucion = 0;
                decimal totalMPO = 0;
                decimal totalMPOVan = 0;
                decimal totalVME = 0;
                decimal totalVMD = 0;
                decimal entregado = 0;
                decimal coeficienteCorreccion = 0;
                decimal totalImporteAbonoBuenTrato = 0;
                decimal importeAbonoBuenTrato = 0;
                decimal totalChatarra = 0;
                decimal quedanUsadas = 0;
                decimal quedanNuevas = 0;
                decimal chatarraNuevas = 0;
                decimal chatarraUsadas = 0;
                decimal totalChatarraNuevas = 0;
                decimal totalChatarraUsadas = 0;

                for (lineasBuenTrato = 0; lineasBuenTrato < listaArticulosBuenTrato.Count; lineasBuenTrato++)
                {
                    AAF = listaArticulosBuenTrato.ElementAt(lineasBuenTrato);
                    taximetroAbono = 0;
                    porcentajeBuenTrato = 0;
                    coeficienteBuenTrato = 0;
                    porcentajeAmortizado = 0;
                    totalEntregado = 0;
                    total = 0;
                    totalEntrega = 0;
                    totalDevolucion = 0;
                    totalMPO = 0;
                    totalMPOVan = 0;
                    totalVME = 0;
                    totalVMD = 0;
                    entregado = 0;
                    coeficienteCorreccion = 0;
                    importeAbonoBuenTrato = 0;

                    filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AAF + "'");
                    foreach (DataRow filaTax in filaEncontrada)
                    {
                        if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                            porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                        if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                            coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                    }

                    // CALCULAR MPO DEVUELTO
                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades nuevo entregado")));

                    totalEntrega = total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades usado entregado")));

                    totalEntrega = totalEntrega + total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades clasificadas")));

                    totalDevolucion = total;
                    totalMPO = totalEntrega - totalDevolucion;

                    oItemBuenTrato = dtBuenTrato.NewRow();
                    oItemBuenTrato["AAF"] = AAF;
                    oItemBuenTrato["Unidades MPO"] = totalMPO.ToString("#,##0.00");
                    dtBuenTrato.Rows.Add(oItemBuenTrato);
                    oItemBuenTrato = null;

                    // CALCULAR BUEN TRATO: % Amortizado
                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Taximetro")));

                    taximetroAbono = total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Abono")));

                    taximetroAbono = taximetroAbono - total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => (Convert.ToDecimal(x.Field<string>("PS entregado")) * Convert.ToDecimal(x.Field<string>("Unidades alquiler"))));

                    totalEntregado = total;

                    if (totalEntregado != 0)
                        porcentajeAmortizado = taximetroAbono / totalEntregado;
                    else
                        porcentajeAmortizado = 0;

                    // CALCULAR BUEN TRATO: VME
                    totalMPO = Math.Abs(totalMPO);
                    if (totalMPO > 0) // se resta primero del nuevo
                    {
                        dondeVa = "calcular donde resta MPO";
                        totalMPOVan = totalMPO;
                        filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades nuevo entregado] <> '' AND [Unidades nuevo entregado] <> '0'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            dondeVa = "recorrer las unidades nuevas";
                            entregado = Convert.ToDecimal(fila["Unidades nuevo entregado"].ToString());
                            if (entregado >= totalMPOVan)
                            {
                                fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                fila["Unidades entregadas nuevo"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                totalMPOVan = 0;
                            }
                            else
                            {
                                fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                fila["Unidades entregadas nuevo"] = 0.ToString("#,##0.00");
                                totalMPOVan = totalMPOVan - entregado;
                            }
                            fila.AcceptChanges();
                            if (totalMPOVan == 0)
                                break;
                        }
                        if (totalMPOVan > 0)
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                dondeVa = "recorrer las unidades usadas";
                                entregado = Convert.ToDecimal(fila["Unidades usado entregado"].ToString());
                                if (entregado >= totalMPOVan)
                                {
                                    fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                    fila["Unidades entregadas usado"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                    totalMPOVan = 0;
                                }
                                else
                                {
                                    fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                    fila["Unidades entregadas usado"] = 0.ToString("#,##0.00");
                                    totalMPOVan = totalMPOVan - entregado;
                                }
                                fila.AcceptChanges();
                                if (totalMPOVan == 0)
                                    break;
                            }
                        }
                        else
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                fila["Unidades entregadas usado"] = fila["Unidades usado entregado"].ToString();
                                fila.AcceptChanges();
                            }
                        }
                    }
                    else // se resta primero del usado
                    {
                        filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            dondeVa = "recorrer las unidades usadas";
                            entregado = Convert.ToDecimal(fila["Unidades usado entregado"].ToString());
                            if (entregado >= totalMPOVan)
                            {
                                fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                fila["Unidades entregadas usado"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                totalMPOVan = 0;
                            }
                            else
                            {
                                fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                fila["Unidades entregadas usado"] = 0.ToString("#,##0.00");
                                totalMPOVan = totalMPOVan - entregado;
                            }
                            fila.AcceptChanges();
                            if (totalMPOVan == 0)
                                break;
                        }
                        if (totalMPOVan > 0)
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades nuevo entregado] <> '' AND [Unidades nuevo entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                dondeVa = "recorrer las unidades nuevas";
                                entregado = Convert.ToDecimal(fila["Unidades nuevo entregado"].ToString());
                                if (entregado >= totalMPOVan)
                                {
                                    fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                    fila["Unidades entregadas nuevo"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                    totalMPOVan = 0;
                                }
                                else
                                {
                                    fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                    fila["Unidades entregadas nuevo"] = 0.ToString("#,##0.00");
                                    totalMPOVan = totalMPOVan - entregado;
                                }
                                fila.AcceptChanges();
                                if (totalMPOVan == 0)
                                    break;
                            }
                        }
                        else
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                fila["Unidades entregadas nuevo"] = fila["Unidades nuevo entregado"].ToString();
                                fila.AcceptChanges();
                            }
                        }
                    }

                    total = dtBuenTrato.AsEnumerable()
                            .Where(y => y.Field<string>("AAF") == AAF) // && y.Field<string>("Unidades nuevo entregado") != "")
                            .Sum(x => (Convert.ToDecimal(x.Field<string>("PS entregado")) * Convert.ToDecimal(x.Field<string>("Correccion nuevo entregado")) * Convert.ToDecimal(x.Field<string>("Unidades entregadas nuevo"))));

                    totalVME = total;

                    total = dtBuenTrato.AsEnumerable()
                            .Where(y => y.Field<string>("AAF") == AAF)
                            .Sum(x => (Convert.ToDecimal(x.Field<string>("PS entregado")) * Convert.ToDecimal(x.Field<string>("Correccion usado entregado")) * Convert.ToDecimal(x.Field<string>("Unidades entregadas usado"))));

                    totalVME = totalVME + total;

                    // CALCULAR BUEN TRATO: VMD
                    total = dtBuenTrato.AsEnumerable()
                            .Where(y => y.Field<string>("AAF") == AAF)
                            .Sum(x => (Convert.ToDecimal(x.Field<string>("PS devolucion")) * Convert.ToDecimal(x.Field<string>("Correccion usado devuelto")) * Convert.ToDecimal(x.Field<string>("Unidades clasificadas"))));

                    totalVMD = total;

                    // CALCULAR BUEN TRATO: INCLUIR RESULTADOS
                    oItemBuenTrato = dtBuenTrato.NewRow();
                    oItemBuenTrato["AAF"] = AAF;
                    oItemBuenTrato["Taximetro-Abono"] = taximetroAbono.ToString("#,##0.00");
                    oItemBuenTrato["PS Total Entregado"] = totalEntregado.ToString("#,##0.00");
                    oItemBuenTrato["Pje. Amortizado"] = porcentajeAmortizado.ToString("#,##0.00");
                    oItemBuenTrato["VMD"] = totalVMD.ToString("#,##0.00");
                    oItemBuenTrato["VME"] = totalVME.ToString("#,##0.00");
                    oItemBuenTrato["Coeficiente buen trato"] = coeficienteBuenTrato.ToString("#,##0.00");
                    oItemBuenTrato["Porcentaje buen trato"] = porcentajeBuenTrato.ToString("#,##0.00");
                    oItemBuenTrato["Porcentaje buen trato"] = porcentajeBuenTrato.ToString("#,##0.00");
                    coeficienteCorreccion = 0;
                    if (totalVME != 0)
                        coeficienteCorreccion = (totalVME - totalVMD) / totalVME;
                    oItemBuenTrato["Porcentaje consumido"] = coeficienteCorreccion.ToString("#,##0.00");
                    oItemBuenTrato["Aplicar"] = (porcentajeAmortizado - (coeficienteBuenTrato * coeficienteCorreccion)).ToString("#,##0.00");
                    if ((porcentajeAmortizado - (coeficienteBuenTrato * coeficienteCorreccion)) > 0)
                        importeAbonoBuenTrato = porcentajeBuenTrato * taximetroAbono * (porcentajeAmortizado - (coeficienteBuenTrato * coeficienteCorreccion));
                    oItemBuenTrato["Abono buen trato"] = importeAbonoBuenTrato.ToString("#,##0.00");
                    totalImporteAbonoBuenTrato = totalImporteAbonoBuenTrato + importeAbonoBuenTrato;
                    dtBuenTrato.Rows.Add(oItemBuenTrato);
                    oItemBuenTrato = null;
                }

                // CALCULAR CHATARRA
                dondeVa = "Calculo de chatarra";
                string parsear = "";
                string itemDev = "";
                string itemChatarra = "";
                decimal MPOnuevas = 0;
                decimal MPOusadas = 0;
                dec_importeCosteChatarra = 0;
                totalChatarraNuevas = 0;
                totalChatarraUsadas = 0;
                dtChatarra.Merge(dtBuenTrato, false, MissingSchemaAction.Ignore);
                for (lineasBuenTrato = 0; lineasBuenTrato < listaChatarra.Count; lineasBuenTrato++)
                {
                    totalChatarra = 0;
                    quedanUsadas = 0;
                    quedanNuevas = 0;
                    chatarraNuevas = 0;
                    chatarraUsadas = 0;
                    totalChatarraNuevas = 0;
                    totalChatarraUsadas = 0;
                    MPOnuevas = 0;
                    MPOusadas = 0;
                    chatarraNuevas = 0;
                    chatarraUsadas = 0;

                    parsear = listaChatarra.ElementAt(lineasBuenTrato);
                    AAF = parsear.Substring(0, parsear.IndexOf("|"));
                    itemDev = parsear.Substring(parsear.IndexOf("|") + 1, parsear.IndexOf("/") - parsear.IndexOf("|") - 1);
                    itemChatarra = parsear.Substring(parsear.IndexOf("/") + 1, parsear.Length - parsear.IndexOf("/") - 1);

                    totalChatarra = dtChatarra.AsEnumerable()
                        .Where(y => y.Field<string>("Item Dev.") == itemDev && y.Field<string>("Item chatarra") == itemChatarra && y.Field<string>("ID tipo del item").ToUpper() == "BADITEM")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades clasificadas")));

                    // QUEDAN NUEVAS
                    quedanNuevas = dtChatarra.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == itemDev && y.Field<string>("Unidades nuevo entregado") != "" && y.Field<string>("Unidades nuevo entregado") != "0")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades nuevo entregado")));

                    //if (quedanNuevas == 0)
                    //{
                    // QUEDAN NUEVAS
                    //quedanNuevas = dtChatarra.AsEnumerable()
                    //        .Where(y => y.Field<string>("AAF") == AAF && y.Field<string>("Unidades nuevo entregado") != "" && y.Field<string>("Unidades nuevo entregado") != "0")
                    //        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades nuevo entregado")));
                    //}

                    //// QUEDAN USADAS
                    quedanUsadas = dtChatarra.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == itemDev && y.Field<string>("Unidades usado entregado") != "" && y.Field<string>("Unidades usado entregado") != "0")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades usado entregado")));

                    //if (quedanUsadas == 0)
                    //{
                    // QUEDAN USADAS
                    //quedanUsadas = dtChatarra.AsEnumerable()
                    //        .Where(y => y.Field<string>("AAF") == AAF && y.Field<string>("Unidades usado entregado") != "" && y.Field<string>("Unidades usado entregado") != "0")
                    //        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades usado entregado")));
                    //} 

                    if (dtPedidosAgrupado.Rows.Count > 0)
                    {
                        // MPO nuevas
                        dondeVa = "Calculo de chatarra // MPO nuevas: " + itemChatarra;
                        filaEncontrada = dtPedidosAgrupado.Select("[AAF] = '" + AAF + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            if (fila["NUEVO"].ToString().Length > 0)
                                MPOnuevas = Convert.ToDecimal(fila["NUEVO"]);
                            break;
                        }

                        // MPO usadas
                        dondeVa = "Calculo de chatarra // MPO usadas: " + itemChatarra;
                        filaEncontrada = dtPedidosAgrupado.Select("[AAF] = '" + AAF + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            if (fila["USADO"].ToString().Length > 0)
                                MPOusadas = Convert.ToDecimal(fila["USADO"]);
                            break;
                        }
                    }

                    quedanNuevas = quedanNuevas - MPOnuevas;
                    quedanUsadas = quedanUsadas - MPOusadas;

                    if (totalChatarra >= quedanNuevas)
                    {
                        if (quedanNuevas > 0)
                        {
                            chatarraNuevas = quedanNuevas;
                            chatarraUsadas = totalChatarra - quedanNuevas;
                        }
                        else
                        {
                            chatarraNuevas = 0;
                            chatarraUsadas = totalChatarra;
                        }
                    }
                    else
                    {
                        chatarraNuevas = totalChatarra;
                        chatarraUsadas = 0;
                    }

                    filaEncontrada = dtChatarra.Select("[Item Dev.] = '" + itemDev + "' AND ([Item chatarra] = '" + itemChatarra + "' OR [Item mal estado] = '" + itemChatarra + "')");
                    foreach (DataRow fila in filaEncontrada)
                    {
                        totalChatarraNuevas = Convert.ToDecimal(fila["PS devolucion"]) * Convert.ToDecimal(fila["Correccion nuevo devuelto"]) * Convert.ToDecimal(chatarraNuevas);
                        totalChatarraUsadas = Convert.ToDecimal(fila["PS devolucion"]) * Convert.ToDecimal(fila["Correccion usado devuelto"]) * Convert.ToDecimal(chatarraUsadas);
                        break;
                    }

                    dec_importeCosteChatarra = dec_importeCosteChatarra + totalChatarraNuevas + totalChatarraUsadas;

                    filaEncontrada = dtChatarra.Select("[AAF] = '" + AAF + "'");
                    foreach (DataRow fila in filaEncontrada)
                    {
                        if (chatarraNuevas != 0)
                            if (fila["Unidades nuevo entregado"].ToString().Length > 0)
                                fila["Unidades nuevo entregado"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) - chatarraNuevas).ToString();
                            else
                                fila["Unidades nuevo entregado"] = ((-1) * chatarraNuevas).ToString();
                        if (chatarraUsadas != 0)
                            if (fila["Unidades usado entregado"].ToString().Length > 0)
                                fila["Unidades usado entregado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) - chatarraUsadas).ToString();
                            else
                                fila["Unidades usado entregado"] = ((-1) * chatarraUsadas).ToString();
                        fila.AcceptChanges();
                        break;
                    }

                    // DESDE AQUI
                    if (limitarAbonoTaxMPO)
                    {
                        abonoMax1 = 0;
                        abonoMax2 = 0;
                        totalTax = 0;
                        totalBonificacion = 0;
                        totalCantidadTaxBonificacion = 0;
                        totalCantidad = 0;
                        totalCantidadVan = 0;

                        dondeVa = "calcular abono MPO tax NO consumible";
                        // TAX NO CONSUMIBLE
                        abonoMax1 = 0;
                        abonoMax2 = 0;
                        totalTax = 0;

                        totalTax = dtTax.AsEnumerable()
                            .Where(y => y.Field<string>("ITEM") == itemDev)
                            .Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX NO CONSUMIBLE")));

                        totalCantidadTaxBonificacion = dtTax.AsEnumerable()
                                .Where(y => y.Field<string>("ITEM") == itemDev && (y.Field<decimal>("TAX NO CONSUMIBLE") >= 0 || y.Field<decimal>("TAX NO CONSUMIBLE") <= 0))
                                .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                        dondeVa = "calcular total cantidad tax bonificación";
                        //totalCantidadTaxBonificacion = totalCantidadTaxBonificacion;// - Math.Abs(cantidadMPOPositivo);

                        if (porcentajeAbonoTaxMPO != 0)
                            abonoMax1 = ((totalChatarraNuevas + totalChatarraUsadas) * porcentajeAbonoTaxMPO) / 100;
                        if (totalCantidadTaxBonificacion != 0)
                            abonoMax2 = (((totalTax / totalCantidadTaxBonificacion) * (chatarraNuevas + chatarraUsadas)) * porcentajeMaxAbonoTaxMPO) / 100;
                        if (abonoMax1 < abonoMax2)
                            abonoMPOTNC = abonoMPOTNC + abonoMax1;
                        else
                            abonoMPOTNC = abonoMPOTNC + abonoMax2;

                        oItemAbonoMPO = dtAbonoMPO.NewRow();
                        oItemAbonoMPO["ITEM"] = itemDev;
                        oItemAbonoMPO["CANTIDAD"] = (chatarraNuevas + chatarraUsadas).ToString("#,##0");
                        oItemAbonoMPO["PRECIO"] = precioCoste.ToString("#,##0.00");
                        oItemAbonoMPO["COEFICIENTE"] = coeficienteUsado.ToString("#,##0.00");
                        oItemAbonoMPO["TIPO"] = "NO CONSUMIBLE";
                        oItemAbonoMPO["TAX-ABONO"] = totalTax.ToString("#,##0.00");
                        oItemAbonoMPO["CANTIDAD TAX-ABONO"] = totalCantidadTaxBonificacion.ToString("#,##0");
                        if (totalCantidadTaxBonificacion != 0)
                            oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = ((totalTax / totalCantidadTaxBonificacion) * (chatarraNuevas + chatarraUsadas)).ToString("#,##0.00");
                        else
                            oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = "0.00";
                        oItemAbonoMPO["COSTE MPO"] = (totalChatarraNuevas + totalChatarraUsadas).ToString("#,##0.00");
                        oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                        oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                        if (abonoMax1 < abonoMax2)
                            oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                        else
                            oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                        dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                        oItemAbonoMPO = null;
                    }
                }

                // GASTOS PATIO
                dondeVa = "Calculo de gastos patio";
                decimal totalClasificacionReparacion = 0;
                importeGastosVariablesClaisificacionReparacion = 0;
                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL HORAS CLASIFICAR REPARAR")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;

                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL HORAS CLASIFICAR REPARAR INDIRECTO")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;

                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL REPARAR")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;

                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                       .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL REPARAR INDIRECTO")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;


                //// GASTOS OFICINA
                //totalAnual = 0;
                //totalAdministrativo = 0;
                //varAdministrativo = 0;
                //totalComercial = 0;
                //varComercial = 0;
                //costeDT = 0;
                //preciosEnCero = 0;
                //dtDatosGastosOficina = gastosOficina(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable);
                //foreach (DataRow fila in dtDatosGastosOficina.Rows)
                //{
                //    dondeVa = "encontró precio coste dataset dtDatosGastosOficina";
                //    totalAnual = Convert.ToDecimal(fila["fact_anual_empresa"]);
                //    totalAdministrativo = Convert.ToDecimal(fila["total_admin"]);
                //    varAdministrativo = Convert.ToDecimal(fila["var_admin"]);
                //    totalComercial = Convert.ToDecimal(fila["total_comerc"]);
                //    varComercial = Convert.ToDecimal(fila["var_comerc"]);
                //    costeDT = Convert.ToDecimal(fila["costeDT"]);
                //    preciosEnCero = Convert.ToInt32(fila["preciosEnCero"]);
                //}
                //if (preciosEnCero != 0)
                //{
                //    salvarIndicencia(empresa, "FICHA", "", "En el cálculo de coste gastos oficina DT hay precios en cero.");
                //    imgWarning.Visible = true;
                //    lblMensajeError.Visible = true;
                //    lblMensajeError.Text = "En el cálculo de coste gastos oficina DT hay precios en cero.";
                //}

                //decimal totalAlquiler = 0;
                //decimal totalVenta = 0;
                //decimal totalPortes = 0;
                //decimal costeDTPorratear = 0;
                //decimal totalGastosOficinaAdministrativoCapitulo = 0;
                //decimal totalGastosOficinaComercialCapitulo = 0;

                //totalAlquiler = importeFacturacionAlquiler;
                //totalVenta = importeFacturacionVentaProducto + importeFacturacionVentaLiquidacion + importeFacturacionVentaMontajes + importeFacturacionVentaDepartamentoTecnico + importeFacturacionVentFenolicoNuevo + importeFacturacionVentaUneCif;
                //totalPortes = importePorte_TR001;

                ////if (chkBoxPortes.Checked)
                //    total = totalAlquiler + totalVenta + totalPortes;
                ////else
                ////    total = totalAlquiler + totalVenta;

                //if (total * porcentajeMaximoTotalFacturacion > costeDT)
                //    costeDTPorratear = costeDT;
                //else
                //    costeDTPorratear = total * porcentajeMaximoTotalFacturacion;

                //DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                //    oItemGastosOficina["CAPITULO"] = numero + " / " + nombreFicha;
                //    //oItemGastosOficina["ITEM"] = fila["ITEM"].ToString();
                //    oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                //    oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                //    oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                //    oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                //    oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                //    oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                //    oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                //    oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                //    oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                //    oItemGastosOficina["IMPORTE"] = "0.00";

                //    oItemGastosOficina["TOTAL FACTURACION"] = total.ToString("#,##0.00");
                //    oItemGastosOficina["MAX FACTURACION"] = (total * porcentajeMaximoTotalFacturacion).ToString("#,##0.00");
                //    oItemGastosOficina["COSTE DT"] = costeDT.ToString("#,##0.00");

                //    //if (chkBoxPortes.Checked)
                //    //{
                //    //    if (totalAlquiler + totalVenta != 0)
                //    //        totalPortesLinea = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])) * totalPortes) / (totalAlquiler + totalVenta);
                //    //    else
                //    //        totalPortesLinea = 0;
                //    //}

                //    // ADMINISTRACION
                //    if (totalAnual != 0)
                //    {
                //        //if (chkBoxPortes.Checked)
                //        //{
                //            // gastos oficina venta
                //            totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (totalVenta + totalAlquiler + totalPortes)) / totalAnual);
                //            totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (totalVenta + totalAlquiler + totalPortes)) / totalAnual);
                //            oItemGastosOficina["GASTOS ADMINISTRATIVO"] = (varAdministrativo * ((totalVenta + totalAlquiler + totalPortes)) / totalAnual).ToString("#,##0.00");
                //            oItemGastosOficina["GASTOS COMERCIAL"] = (varComercial * ((totalVenta + totalAlquiler + totalPortes)) / totalAnual).ToString("#,##0.00");
                //    //    }
                //    //    else
                //    //    {
                //    //    // gastos oficina venta
                //    //    totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (totalVenta + totalAlquiler)) / totalAnual);
                //    //    totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (totalVenta + totalAlquiler)) / totalAnual);
                //    //    oItemGastosOficina["GASTOS ADMINISTRATIVO"] = (varAdministrativo * ((totalVenta + totalAlquiler)) / totalAnual).ToString("#,##0.00");
                //    //    oItemGastosOficina["GASTOS COMERCIAL"] = (varComercial * ((totalVenta + totalAlquiler)) / totalAnual).ToString("#,##0.00");
                //    //}
                //}

                //    //// DT
                //    //if (chkBoxPortes.Checked)
                //    //{
                //    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea).ToString("#,##0.00");
                //    //    oItemGastosOficina["GASTOS DT"] = (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total).ToString("#,##0.00");
                //    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total);
                //    //}
                //    //else
                //    //{
                //    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])).ToString("#,##0.00");
                //    //    oItemGastosOficina["GASTOS DT"] = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) * costeDTPorratear) / total).ToString("#,##0.00");
                //    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + ((Convert.ToDecimal(oItemGastosOficina["IMPORTE"]) * costeDTPorratear) / total);
                //    //}

                //    dtGastosOficina.Rows.Add(oItemGastosOficina);
                //    oItemGastosOficina = null;
                ////}
                ////if (tituloAnterior != "")
                ////{
                //if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                //{
                //    dondeVa = "Gastos Oficina Administrativo y Comercial";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                ////    //if (totalGastosOficinaDToCapitulo != 0)
                ////    //{
                ////    //    dondeVa = "Gastos Oficina Tecnico";
                ////    //    filaValores = dtValores.NewRow();
                ////    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                ////    //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                ////    //    filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                ////    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                ////    //    dtValores.Rows.Add(filaValores);
                ////    //    filaValores = null;
                ////    //}
                ////}


                //// GASTOS FIJOS
                //decimal fact_anual_empresa = 0;
                //decimal facturacion_alquiler = 0;
                //decimal facturacion_venta = 0;
                //decimal total_admin = 0;
                //decimal var_admin = 0;
                //decimal total_comerc = 0;
                //decimal var_comerc = 0;
                //decimal total_gf_bu = 0;
                //decimal total_gf_hq = 0;
                //decimal KVBU = 0;
                //decimal KABU = 0;
                //decimal KVHQ = 0;
                //decimal KAHQ = 0;

                //decimal totalGastosFijosBU = 0;
                //decimal totalGastosFijosCentral = 0;

                //dtDatosGastosFijos = gastosFijos(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable, coeficienteGastosFijosAlquilerVenta);
                //foreach (DataRow fila in dtDatosGastosFijos.Rows)
                //{
                //    dondeVa = "encontró precio coste dataset dtDatosGastosFijos";
                //    fact_anual_empresa = Convert.ToDecimal(fila["fact_anual_empresa"]);
                //    facturacion_alquiler = Convert.ToDecimal(fila["facturacion_alquiler"]);
                //    facturacion_venta = Convert.ToDecimal(fila["facturacion_venta"]);
                //    total_admin = Convert.ToDecimal(fila["total_admin"]);
                //    var_admin = Convert.ToDecimal(fila["var_admin"]);
                //    total_comerc = Convert.ToDecimal(fila["total_comerc"]);
                //    var_comerc = Convert.ToDecimal(fila["var_comerc"]);
                //    total_gf_bu = Convert.ToDecimal(fila["total_gf_bu"]);
                //    total_gf_hq = Convert.ToDecimal(fila["total_gf_hq"]);
                //    KVBU = Convert.ToDecimal(fila["KVBU"]);
                //    KABU = Convert.ToDecimal(fila["KABU"]);
                //    KVHQ = Convert.ToDecimal(fila["KVHQ"]);
                //    KAHQ = Convert.ToDecimal(fila["KAHQ"]);
                //}
                //foreach (DataRow fila in dtGastosFijos.Rows)
                //{
                //    fila["fact_anual_empresa"] = fact_anual_empresa;
                //    fila["facturacion_alquiler"] = facturacion_alquiler;
                //    fila["facturacion_venta"] = facturacion_venta;
                //    fila["total_admin"] = total_admin;
                //    fila["var_admin"] = var_admin; 
                //    fila["total_comerc"] = total_comerc;
                //    fila["var_comerc"] = var_comerc;
                //    fila["total_gf_bu"] = total_gf_bu;
                //    fila["total_gf_hq"] = total_gf_hq;
                //    fila["KVBU"] = KVBU;
                //    fila["KABU"] = KABU;
                //    fila["KVHQ"] = KVHQ;
                //    fila["KAHQ"] = KAHQ;

                //    fila["BU ALQUILER"] = 0;
                //    fila["BU VENTA"] = 0;
                //    fila["CENTRAL ALQUILER"] = 0;
                //    fila["CENTRAL VENTA"] = 0;

                //    fila.AcceptChanges();
                //}

                //if (totalGastosFijosBU != 0)
                //{
                //    dondeVa = "Gastos Fijos BU";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = totalGastosFijosBU.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (totalGastosFijosCentral != 0)
                //{
                //    dondeVa = "Gastos Fijos Central";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRAL";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = totalGastosFijosCentral.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //hora_2 = DateTime.Now.Subtract(hora_1);
                //oItemTiempo = dtTiempos.NewRow();
                //oItemTiempo["EMPRESA-NUMERO-#"] = empresa + " " + numero + " / " + cual.ToString();
                //oItemTiempo["CONCEPTO"] = "TIEMPO TOTAL PROCESO";
                //oItemTiempo["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                //dtTiempos.Rows.Add(oItemTiempo);

                //hora_1 = DateTime.Now;

                //if (totalImporteAbonoBuenTrato != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ABONO_BUEN_TRATO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = totalImporteAbonoBuenTrato.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionAlquiler != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ALQUILERES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionAlquiler.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaDepartamentoTecnico != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "DEPARTAMENTO_TECNICO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaDepartamentoTecnico.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaDepartamentoTecnico != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_DEPARTAMENTO_TECNICO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaDepartamentoTecnico).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentFenolicoNuevo != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "FENÓLICO_NUEVO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentFenolicoNuevo.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaFenolicoNuevo != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_FENOLICO_NUEVO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaFenolicoNuevo).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaOtrosServicios != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "OTROS_SERVICIOS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaOtrosServicios.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaOtrosServicios != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_OTROS_SERVICIOS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaOtrosServicios).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaMontajes != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "MONTAJES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaMontajes.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaMontajes != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_MONTAJES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaMontajes).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaUneCif != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "SVP_CIF";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaUneCif.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaUneCif != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_UNE_CIF";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaUneCif).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaProducto != 0)
                //{
                //    dondeVa = "Importes/cantidades venta productos 1";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "VENTAS_DIRECTAS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProducto.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                ////if (importeFacturacionVentaLiquidacion != 0)
                ////{
                ////    dondeVa = "Importes/cantidades venta productos 1";
                ////    filaValores = dtValores.NewRow();
                ////    filaValores[dtValores_ETIQUETA] = "VENTAS_LIQUIDACIONES";
                ////    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                ////    filaValores[dtValores_IMPORTE] = importeFacturacionVentaLiquidacion.ToString("#,##0.00");
                ////    filaValores[dtValores_PORCENTAJE] = "0.00";
                ////    dtValores.Rows.Add(filaValores);
                ////    filaValores = null;
                ////}

                //if (importeFacturacionVentaLiquidacion != 0)
                //{
                //    dondeVa = "Importes/cantidades venta productos 1";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaLiquidacion.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                ////if (chkBoxPortes.Checked &&  importePorte_TR001 != 0)
                ////{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importePorte_TR001.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                ////}

                //////importeCostePorte = (-1) * (importePorte_TR001 * (1 - margenPorte));
                ////if (chkBoxPortes.Checked && importeCostePorte !=0)
                ////{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeCostePorte.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                ////}

                //if (importeCosteVenta != 0)
                //{
                //    dondeVa = "Importes/cantidades venta 2";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_VENTAS_DIRECTAS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVenta).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (dec_importeTotalCosteMPOUsado != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * dec_importeTotalCosteMPOUsado).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (dec_importeCosteChatarra != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_CHATARRA";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * dec_importeCosteChatarra).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (dec_importeTotalCosteLIQUsado != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; //"COSTE_VENTAS_MATERIAL_ALQUILADO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha + " - USADO";
                //    filaValores[dtValores_IMPORTE] = ((-1) * dec_importeTotalCosteLIQUsado).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}


                //if (importeCosteTaximetroNoConsumible != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 2";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "TAXIMETRO_NO_CONSUMIBLE";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroNoConsumible).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteTaximetroConsumible != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 3";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "TAXIMETRO_CONSUMIBLE";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroConsumible).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteBonificacionTaximetroConsumible != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 4";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "AJUSTE_TAXIMETRO_CONSUMIBLE";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeCosteBonificacionTaximetroConsumible.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (abonoMPOTC != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 4";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ABONO_MPO_TC";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = abonoMPOTC.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (abonoMPOTNC != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 4";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ABONO_MPO_TNC";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = abonoMPOTNC.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeGastosVariablesEntregaDevolucionAlquilerCapitulos != 0 || importeGastosVariablesEntregaDevolucionVentaCapitulos != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 6";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosVariablesEntregaDevolucionVentaCapitulos)).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeGastosVariablesClaisificacionReparacion != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 6";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesClaisificacionReparacion).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //// MARGEN
                //filaValores = dtValores.NewRow();
                //filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                //filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //filaValores[dtValores_IMPORTE] = (importePorte_TR001 + importeCostePorte).ToString("#,##0.00");
                //if (((importePorte_TR001) / (1 - margenPorte)) == 0)
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //else
                //    filaValores[dtValores_PORCENTAJE] = (((importePorte_TR001 + importeCostePorte) / importePorte_TR001) * 100).ToString("#,##0.00");
                //dtValores.Rows.Add(filaValores);
                //filaValores = null;

                if (importeFacturacionVentaMontajes != 0 || importeCosteVentaMontajes != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajes - importeCosteVentaMontajes).ToString("#,##0.00");
                    if (importeFacturacionVentaMontajes == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaMontajes - importeCosteVentaMontajes) / importeFacturacionVentaMontajes) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaProducto != 0 || importeCosteVenta != 0)
                {
                    dondeVa = "Importes/cantidades venta 3";
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProducto - importeCosteVenta).ToString("#,##0.00");
                    if (importeFacturacionVentaProducto == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProducto - importeCosteVenta) / importeFacturacionVentaProducto) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionAlquiler != 0 || importeCosteTaximetroNoConsumible != 0 || importeCosteTaximetroConsumible != 0 || importeCosteBonificacionTaximetroConsumible != 0)
                {
                    dondeVa = "Importes/cantidades alquiler 5";
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_ALQUILER";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionAlquiler - importeCosteTaximetroNoConsumible - importeCosteTaximetroConsumible + importeCosteBonificacionTaximetroConsumible).ToString("#,##0.00");
                    if (importeFacturacionAlquiler == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionAlquiler - importeCosteTaximetroNoConsumible - importeCosteTaximetroConsumible + importeCosteBonificacionTaximetroConsumible) / importeFacturacionAlquiler) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaDepartamentoTecnico != 0 || importeCosteVentaDepartamentoTecnico != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnico - importeCosteVentaDepartamentoTecnico).ToString("#,##0.00");
                    if (importeFacturacionVentaDepartamentoTecnico == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaDepartamentoTecnico - importeCosteVentaDepartamentoTecnico) / importeFacturacionVentaDepartamentoTecnico) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentFenolicoNuevo != 0 || importeCosteVentaFenolicoNuevo != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevo - importeCosteVentaFenolicoNuevo).ToString("#,##0.00");
                    if (importeFacturacionVentFenolicoNuevo == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentFenolicoNuevo - importeCosteVentaFenolicoNuevo) / importeFacturacionVentFenolicoNuevo) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaUneCif != 0 || importeCosteVentaUneCif != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCif - importeCosteVentaUneCif).ToString("#,##0.00");
                    if (importeFacturacionVentaUneCif == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaUneCif - importeCosteVentaUneCif) / importeFacturacionVentaUneCif) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaOtrosServicios != 0 || importeCosteVentaOtrosServicios != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_OTROS_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaOtrosServicios - importeCosteVentaOtrosServicios).ToString("#,##0.00");
                    if (importeFacturacionVentaOtrosServicios == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaOtrosServicios - importeCosteVentaOtrosServicios) / importeFacturacionVentaOtrosServicios) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaProducto != 0)
                {
                    dondeVa = "Importes/cantidades venta 3";
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES"; //"MARGEN_VENTAS_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProducto - dec_importeCosteMPONuevo - dec_importeCosteMPO).ToString("#,##0.00");
                    if (importeFacturacionVentaProducto == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProducto - dec_importeCosteMPONuevo - dec_importeCosteMPO) / importeFacturacionVentaProducto) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                //datosGenerales = numero + " / " + fechaFicha.ToString("dd/MM/yyyy") + " / " + nombreFicha + " / " + moneda + " / " + delegacion;
                //nombreInforme = Server.MapPath("~/Ficheros excel/Ficha_" + numero + "_" + DateTime.Now.ToString("yyyy_MM_dd") + ".xlsx");
                //SLDocument sl = new SLDocument();
                //sl.ImportDataTable(1, 1, dtTax, true);
                //sl.SaveAs(nombreInforme);

                hora_2 = DateTime.Now.Subtract(hora_1);
                horaProcesar_2 = DateTime.Now.Subtract(horaProcesar_1);

                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@usuario", usuario);
                comando.ExecuteNonQuery();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                //conexiones.comando.ExecuteNonQuery();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();
                //dataTiempos.DataSource = dtTiempos;
                //dataTiempos.DataBind();
                //dataTiempos.Visible = true;

                pintarArbol(ref dtValores, false, false);

                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "FICHA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["COSTE"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                //dataResultados.DataSource = null;
                //dataResultados.Columns.Clear();
                //dataResultados.DataSource = dtResultados;
                //dataResultados.DataBind();
                //dataResultados.Visible = true;
            }
            catch (Exception ex)
            {
                hora_2 = DateTime.Now.Subtract(hora_1);
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular ficha // " + dondeVa + " // " + ex.Message;
                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "FICHA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularFichaMasivo(ref DataTable dtResultados, int cual, string empresa, List<string> listaNumeros)
        {
            string numero = "";
            string codigosTransporte = "";
            DateTime hora_1 = default(DateTime);
            TimeSpan hora_2 = default(TimeSpan);
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DateTime horaProcesar_1 = default(DateTime);
            TimeSpan horaProcesar_2 = default(TimeSpan);

            System.Data.DataTable dtValores;
            dtValores = new System.Data.DataTable();
            dtValores.Columns.Add("ETIQUETA");
            dtValores.Columns.Add("CONCEPTO");
            dtValores.Columns.Add("IMPORTE");
            dtValores.Columns.Add("PORCENTAJE");

            List<string> listaArticulosSinFicha = new List<string>();
            List<string> listaArticulosPedido = new List<string>();
            List<DateTime> listaFechasPedido = new List<DateTime>();
            List<string> listaOfertas = new List<string>();
            List<DateTime> listaFechasOferta = new List<DateTime>();

            SqlDataAdapter adaptador;
            System.Data.DataTable dtTabla = new System.Data.DataTable();

            DataRow oItemResultados;

            DataTable dtGastosPatio = new DataTable();
            DataTable dtCalculoTax = new DataTable();
            DataTable dtValesTransporte = new DataTable();
            DataTable dtAbonoMPO = new DataTable();
            DataTable dtBuenTrato = new DataTable();
            DataTable dtChatarra = new DataTable();
            DataTable dtDevoluciones = new DataTable();
            DataTable dtArticulosPaneles;

            List<int> listaBonificacionesDesde = new List<int>();
            List<int> listaBonificacionesHasta = new List<int>();
            List<decimal> listaBonificacionesValor = new List<decimal>();

            decimal pesoArticulo = 0;
            int cantidadPorte = 0;
            decimal importePorte_TR001 = 0;
      
            decimal importeCosteTaximetroNoConsumible = 0;
            decimal importeCosteTaximetroConsumible = 0;
            decimal importeCosteVenta = 0;
            decimal importeCostePorte = 0;

            decimal dec_importeCosteMPONuevo = 0;
            decimal dec_importeTotalCosteMPOUsado = 0;
            decimal dec_importeTotalCosteLIQUsado = 0;
            decimal dec_importeCosteLIQ = 0;
            decimal dec_importeCosteChatarra = 0;

            List<string> listaArticulosBuenTrato = new List<string>();
            List<string> listaChatarra = new List<string>();

            List<string> capitulosAlquiler = new List<string>();
            List<string> capitulosTaximetroNoConsumible = new List<string>();
            List<string> capitulosTaximetroConsumible = new List<string>();
            List<string> capitulosVenta = new List<string>();
            List<string> capitulosVentaServicio = new List<string>();
            List<string> capitulosVentaProducto = new List<string>();
            List<string> capitulosPorte = new List<string>();
            List<decimal> dec_importeFacturacionPorteCapitulos = new List<decimal>();
            List<decimal> dec_importeCostePorteCapitulos = new List<decimal>();
            List<decimal> dec_importeMargenPorteCapitulos = new List<decimal>();

            string moneda = "";
            string masterObra = "";
            string nombreFicha = "";
            string delegacion = "";
            string articulosLiquidacion = "";
            codigosTransporte = "";
            calcularCodigosTransporte(ref codigosTransporte, empresa, "");

            DateTime fechaFinal = default(DateTime);
            DateTime fechaFinObra = default(DateTime);
        
            DataTable dtFacturasCanon = new DataTable();
            DataRow oItemFacturaCanon;
            dtFacturasCanon.Columns.Add("TIPO");
            dtFacturasCanon.Columns.Add("FACTURA");
            dtFacturasCanon.Columns.Add("IMPORTE", typeof(Decimal));

            string dondeVa = "";
            DataRow filaValores;
            int linea = 0;
            decimal dec_importeCosteMPO = 0;

            DataTable dtMovimientosLiquidacion = new DataTable();
            DataTable dtPedidosAlquiler = new DataTable();
            DataTable dtAlbaranes = new DataTable();
            DataTable dtAlbaranesAgrupado = new DataTable();

            dtAlbaranes.Columns.Add("FECHA");
            dtAlbaranes.Columns.Add("AAF");
            dtAlbaranes.Columns.Add("ItemId");
            dtAlbaranes.Columns.Add("Qty");
            dtAlbaranes.Columns.Add("Estado");

            dtPedidosAlquiler.Columns.Add("Numero");
            dtPedidosAlquiler.Columns.Add("Tipo pedido");
            dtPedidosAlquiler.Columns.Add("Venta tipo");
            dtPedidosAlquiler.Columns.Add("Alquiler tipo");

            bool esNaviera = false;
            string salesType = "";
            decimal precioHT = 0;
            string itemBuenTrato = "";
            int lineasBuenTrato = 0;

            // vales de transporte
            DataRow oValeTransporte;
            dtValesTransporte = new DataTable();
            dtValesTransporte.Columns.Add("Albaran");
            dtValesTransporte.Columns.Add("Tipo transporte");

            // abono tax MPO
            decimal importeBonificacion = 0;
            bool limitarAbonoTaxMPO = false;
            decimal porcentajeAbonoTaxMPO = 0;
            decimal porcentajeMaxAbonoTaxMPO = 0;
            decimal totalTax = 0;
            decimal totalBonificacion = 0;
            decimal totalCantidadTaxBonificacion = 0;
            decimal totalCantidadVan = 0;
            decimal totalCantidad = 0;
            decimal abonoMax1 = 0;
            decimal abonoMax2 = 0;
            decimal abonoMPOTC = 0;
            decimal abonoMPOTNC = 0;
            decimal cantidadMPOPositivo = 0;

            DataRow oItemAbonoMPO;
            dtAbonoMPO = new DataTable();
            dtAbonoMPO.Columns.Add("ITEM");
            dtAbonoMPO.Columns.Add("CANTIDAD");
            dtAbonoMPO.Columns.Add("PRECIO");
            dtAbonoMPO.Columns.Add("COEFICIENTE");
            dtAbonoMPO.Columns.Add("TIPO");
            dtAbonoMPO.Columns.Add("TAX-ABONO");
            dtAbonoMPO.Columns.Add("CANTIDAD TAX-ABONO");
            dtAbonoMPO.Columns.Add("TAX-ABONO PROPORCIONAL");
            dtAbonoMPO.Columns.Add("COSTE MPO");
            dtAbonoMPO.Columns.Add("ABONO MAX 1");
            dtAbonoMPO.Columns.Add("ABONO MAX 2");
            dtAbonoMPO.Columns.Add("ABONO MPO");

            // buen trato tablero
            DataRow oItemBuenTrato;
            dtBuenTrato = new DataTable();
            dtBuenTrato.Columns.Add("AAF");
            dtBuenTrato.Columns.Add("Item");
            dtBuenTrato.Columns.Add("Buen Trato Porcentaje");
            dtBuenTrato.Columns.Add("Buen Trato Coeficiente");
            dtBuenTrato.Columns.Add("Taximetro");
            dtBuenTrato.Columns.Add("Abono");
            dtBuenTrato.Columns.Add("Unidades alquiler");
            dtBuenTrato.Columns.Add("Item entregadas");
            dtBuenTrato.Columns.Add("PS entregado");
            dtBuenTrato.Columns.Add("Correccion nuevo entregado");
            dtBuenTrato.Columns.Add("Correccion usado entregado");
            dtBuenTrato.Columns.Add("Unidades nuevo entregado");
            dtBuenTrato.Columns.Add("Unidades usado entregado");
            dtBuenTrato.Columns.Add("Restar MPO");
            dtBuenTrato.Columns.Add("Unidades entregadas nuevo");
            dtBuenTrato.Columns.Add("Unidades entregadas usado");
            dtBuenTrato.Columns.Add("ID tipo del item");
            dtBuenTrato.Columns.Add("Tipo del item");
            dtBuenTrato.Columns.Add("Item Dev.");
            dtBuenTrato.Columns.Add("Item usado");
            dtBuenTrato.Columns.Add("Item chatarra");
            dtBuenTrato.Columns.Add("Item mal estado");
            dtBuenTrato.Columns.Add("Unidades clasificadas");
            dtBuenTrato.Columns.Add("PS devolucion");
            dtBuenTrato.Columns.Add("Correccion nuevo devuelto");
            dtBuenTrato.Columns.Add("Correccion usado devuelto");
            dtBuenTrato.Columns.Add("Unidades MPO");
            dtBuenTrato.Columns.Add("Taximetro-Abono");
            dtBuenTrato.Columns.Add("PS Total Entregado");
            dtBuenTrato.Columns.Add("Pje. Amortizado");
            dtBuenTrato.Columns.Add("VME");
            dtBuenTrato.Columns.Add("VMD");
            dtBuenTrato.Columns.Add("Porcentaje consumido");
            dtBuenTrato.Columns.Add("Coeficiente buen trato");
            dtBuenTrato.Columns.Add("Porcentaje buen trato");
            dtBuenTrato.Columns.Add("Aplicar");
            dtBuenTrato.Columns.Add("Abono buen trato");

            // chatarra
            dtChatarra= new DataTable();
            dtChatarra.Columns.Add("AAF");
            dtChatarra.Columns.Add("Item");
            dtChatarra.Columns.Add("Unidades alquiler");
            dtChatarra.Columns.Add("Item entregadas");
            dtChatarra.Columns.Add("PS entregado");
            dtChatarra.Columns.Add("Correccion nuevo entregado");
            dtChatarra.Columns.Add("Correccion usado entregado");
            dtChatarra.Columns.Add("Unidades nuevo entregado");
            dtChatarra.Columns.Add("Unidades usado entregado");
            dtChatarra.Columns.Add("Restar MPO");
            dtChatarra.Columns.Add("Unidades entregadas nuevo");
            dtChatarra.Columns.Add("Unidades entregadas usado");
            dtChatarra.Columns.Add("ID tipo del item");
            dtChatarra.Columns.Add("Tipo del item");
            dtChatarra.Columns.Add("Item Dev.");
            dtChatarra.Columns.Add("Item usado");
            dtChatarra.Columns.Add("Item chatarra");
            dtChatarra.Columns.Add("Item mal estado");
            dtChatarra.Columns.Add("Unidades clasificadas");
            dtChatarra.Columns.Add("PS devolucion");
            dtChatarra.Columns.Add("Correccion nuevo devuelto");
            dtChatarra.Columns.Add("Correccion usado devuelto");
            dtChatarra.Columns.Add("Unidades MPO");

            DataRow filaMovimiento;
            bool insertar = false;
            bool esCanon = false;
            bool esCanonFenolico = false;
            bool esLiquidacion = false;

            DateTime fecha = DateTime.Today;
            decimal cantidad = 0;
            int restarDias = 0;
            int sumarDias = 0;
            System.Data.DataTable dtPedidosAgrupado = new DataTable();
            const int dtPedidosAgrupados_tipo = 0;
            const int dtPedidosAgrupados_fechaCreacion = 1;
            const int dtPedidosAgrupados_aaf = 2;
            const int dtPedidosAgrupados_articulo = 3;
            const int dtPedidosAgrupados_cantidad = 4;
            const int dtPedidosAgrupados_usado = 5;
            const int dtPedidosAgrupados_mixto = 6;
            const int dtPedidosAgrupados_nuevo = 7;

            const int dtAlbaranes_fecha = 0;
            const int dtAlbaranes_aaf = 1;
            const int dtAlbaranes_itemID = 2;
            const int dtAlbaranes_cantidad = 3;
            const int dtAlbaranes_estado = 4;

            // fenolico // departamento técnico / servicios
            decimal porcentajeCosteMaterialNuevo = 0;
            decimal costeFenolicoNuevoEstandar = 0;
            decimal costeFenolicoNuevoEspecial = 0;
            decimal importeCosteMaterialNuevo = 0;
            decimal importeCosteMaterialFenolico = 0;
            decimal importeCosteVentaFenolicoNuevo = 0;
            decimal importeCosteVentaNuevoCapitulos = 0;
            decimal importeCosteVentaDepartamentoTecnico = 0;
            decimal importeCosteVentaMontajes = 0;
            decimal importeCosteVentaUneCif = 0;
            decimal importeCosteVentaOtrosServicios = 0;
            decimal importeFacturacionVentaDepartamentoTecnico = 0;
            decimal importeFacturacionVentaUneCif = 0;
            decimal importeFacturacionVentFenolicoNuevo = 0;
            decimal importeFacturacionVentaOtrosServicios = 0;
            decimal importeFacturacionAlquiler = 0;
            decimal importeFacturacionVentaMontajes = 0;
            decimal importeFacturacionVentaProducto = 0;
            decimal importeFacturacionVentaLiquidacion = 0;
            decimal importeCosteBonificacionTaximetroConsumible = 0;
            DataRow[] filaEncontradaFenolico;

            // gastos variables oficina
            int mesPresupuestoValido = 0;
            decimal porcentajeGastoAdmministrativoVariable = 0;
            decimal porcentajeGastoComercialVariable = 0;
            decimal porcentajeMaximoTotalFacturacion = 0;
            DataTable dtDatosGastosOficina;
            DataTable dtGastosOficina = new DataTable();
            dtGastosOficina.Columns.Add("CAPITULO");
            dtGastosOficina.Columns.Add("ITEM");
            dtGastosOficina.Columns.Add("MES PRESUPUESTO VALIDO");
            dtGastosOficina.Columns.Add("PORCENTAJE GASTO ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("PORCENTAJE GASTO COMERCIAL");
            dtGastosOficina.Columns.Add("PORCENTAJE MAXIMO TOTAL FACTURACON");
            dtGastosOficina.Columns.Add("TOTAL ANUAL");
            dtGastosOficina.Columns.Add("TOTAL ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("VAR ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("GASTOS ADMINISTRATIVO");
            dtGastosOficina.Columns.Add("TOTAL COMERCIAL");
            dtGastosOficina.Columns.Add("VAR COMERCIAL");
            dtGastosOficina.Columns.Add("GASTOS COMERCIAL");
            dtGastosOficina.Columns.Add("TOTAL FACTURACION");
            dtGastosOficina.Columns.Add("MAX FACTURACION");
            dtGastosOficina.Columns.Add("IMPORTE");
            dtGastosOficina.Columns.Add("COSTE DT");
            dtGastosOficina.Columns.Add("GASTOS DT");
            //decimal totalAnual = 0;
            //decimal totalAdministrativo = 0;
            //decimal varAdministrativo = 0;
            //decimal totalComercial = 0;
            //decimal varComercial = 0;
            //decimal costeDT = 0;
            //int preciosEnCero = 0;

            // gastos variables patio
            dtDevoluciones = new DataTable();
            DataRow oDevoluciones;
            dtDevoluciones.Columns.Add("AAF");
            dtDevoluciones.Columns.Add("ITEM");
            dtDevoluciones.Columns.Add("CANTIDAD SIN NAVIERA", typeof(Decimal));
            dtDevoluciones.Columns.Add("CANTIDAD CON NAVIERA", typeof(Decimal));
            dtDevoluciones.Columns.Add("CANTIDAD SIN NAVIERA QUEDAN", typeof(Decimal));
            dtDevoluciones.Columns.Add("CANTIDAD CON NAVIERA QUEDAN", typeof(Decimal));

            decimal importeGastosPatioEntregaDevolucionVentas = 0;
            decimal importeGastosPatioEntregaDevolucionAlquiler = 0;
            decimal importeGastosVariablesClaisificacionReparacion = 0;

            decimal importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
            decimal importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
           
            decimal PlannedHours = 0;
            decimal RealHours = 0;
            DataTable dtGastosPatioCargaDescarga = new DataTable();
            dtGastosPatioCargaDescarga.Columns.Add("ALBARAN");
            dtGastosPatioCargaDescarga.Columns.Add("TIPO");
            dtGastosPatioCargaDescarga.Columns.Add("ITEM");
            dtGastosPatioCargaDescarga.Columns.Add("CANTIDAD", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("ENTREGA", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("DEVOLUCION", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("NAVIERA", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("PRECIO", typeof(Decimal));
            dtGastosPatioCargaDescarga.Columns.Add("TOTAL", typeof(Decimal));

            DataRow oGastosPatio;
            DataTable dtGastosPatioCalculo = new DataTable();
            dtGastosPatioCalculo.Columns.Add("HOJA TRABAJO");
            dtGastosPatioCalculo.Columns.Add("TIPO");
            dtGastosPatioCalculo.Columns.Add("PLANNED HOURS HT", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("REAL HOURS HT", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("RATIO", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("ITEM");
            dtGastosPatioCalculo.Columns.Add("PLANNED HOURS ITEM", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("HORAS CLASIFICAR REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("PRECIO HORAS CLASIFICAR REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL HORAS CLASIFICAR REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL HORAS CLASIFICAR REPARAR INDIRECTO", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("CANTIDAD REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("PRECIO REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL REPARAR", typeof(Decimal));
            dtGastosPatioCalculo.Columns.Add("TOTAL REPARAR INDIRECTO", typeof(Decimal));

            decimal clasificarRepararDirecto;
            decimal clasificarRepararIndirecto;
            decimal clasificarDirecto;
            decimal clasificarIndirecto;
            decimal repararDirecto;
            decimal repararIndirecto;
            decimal entrega = 0;
            decimal devolucion = 0;
            decimal naviera = 0;
            decimal precioGastosPatio = 0;

            // gastos fijos
            decimal coeficienteGastosFijosAlquilerVenta = 0;
            DataTable dtDatosGastosFijos;
            DataTable dtGastosFijos = new DataTable();
            DataRow oItemGastosFijos;
            dtGastosFijos.Columns.Add("fact_anual_empresa", typeof(Decimal));
            dtGastosFijos.Columns.Add("facturacion_alquiler", typeof(Decimal));
            dtGastosFijos.Columns.Add("facturacion_venta", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_admin", typeof(Decimal));
            dtGastosFijos.Columns.Add("var_admin", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_comerc", typeof(Decimal));
            dtGastosFijos.Columns.Add("var_comerc", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_gf_bu", typeof(Decimal));
            dtGastosFijos.Columns.Add("total_gf_hq", typeof(Decimal));
            dtGastosFijos.Columns.Add("KVBU", typeof(Decimal));
            dtGastosFijos.Columns.Add("KABU", typeof(Decimal));
            dtGastosFijos.Columns.Add("KVHQ", typeof(Decimal));
            dtGastosFijos.Columns.Add("KAHQ", typeof(Decimal));
            dtGastosFijos.Columns.Add("ITEM");
            dtGastosFijos.Columns.Add("TIPO");
            dtGastosFijos.Columns.Add("IMPORTE TOTAL");
            dtGastosFijos.Columns.Add("IMPORTE", typeof(Decimal));
            dtGastosFijos.Columns.Add("BU ALQUILER", typeof(Decimal));
            dtGastosFijos.Columns.Add("BU VENTA", typeof(Decimal));
            dtGastosFijos.Columns.Add("CENTRAL ALQUILER", typeof(Decimal));
            dtGastosFijos.Columns.Add("CENTRAL VENTA", typeof(Decimal));

            try
            {
                string usuario = "";
                var guid = Guid.NewGuid();
                var justNumbers = new String(guid.ToString().Where(Char.IsDigit).ToArray());
                var seed = int.Parse(justNumbers.Substring(0, 4));
                var rnd = new Random(seed);
                //Random rnd = new Random(10);
                int numeroRandom;

                hora_1 = DateTime.Now;

                numeroRandom = rnd.Next();
                usuario = User.Identity.Name.ToString() + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();
                if (User.Identity.Name.ToString() == "")
                    usuario = "diana" + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();

                listaArticulosBuenTrato.Clear();
                listaChatarra.Clear();
    
                System.Data.DataTable dtArticulosLiquidacion = new System.Data.DataTable();

                DataRow filaPedidosAlquiler;
                DataRow filaAlbaranes;
                DataRow[] filaEncontrada;
                DataRow[] filaEncontradaVenta;
                int lineaCapitulo;
                string tipoServicio = "";
                string tipoArticulo = "";
                string productType = "";
                string AAF = "";
                decimal faltan = 0;

                bool fichaCerrada = false;

                SqlDataAdapter adaptadorDatosConfiguracion;
                SqlDataAdapter adaptadorDatosMovimiento;
                System.Data.DataTable dtDatosConfiguracion = new System.Data.DataTable();
                System.Data.DataTable dtDatosMovimientos;
                int lineasBonificacion;
                int duracion = 0;
                int diasCalculados = 0;
                int diasMultiplicar = 0;
                int totalUnidadesDias = 0;
                int diasDesdeTaxNoConsumible = 0;
                int diasHastaTaxNoConsumible = 0;
                int diasTaximetroNoConsumibleCalcular = 0;
                decimal porcentajeBuenTrato = 0;
                decimal coeficienteBuenTrato = 0;
                decimal taximetroConsumibleBuenTrato = 0;
                decimal taximetroNoConsumibleBuenTrato = 0;
                decimal bonificacionTaximetroConsumibleBuenTrato = 0;

                dtMovimientosLiquidacion.Columns.Add("OBRA");
                dtMovimientosLiquidacion.Columns.Add("ITEM");
                dtMovimientosLiquidacion.Columns.Add("FECHA", typeof(DateTime));
                dtMovimientosLiquidacion.Columns.Add("TIPO MOVIMIENTO");
                dtMovimientosLiquidacion.Columns.Add("CANTIDAD");
                dtMovimientosLiquidacion.Columns.Add("ULTIMO MOV");
                dtMovimientosLiquidacion.Columns.Add("SUMAR");
                dtMovimientosLiquidacion.Columns.Add("RESTAR");
                dtMovimientosLiquidacion.Columns.Add("DURACION");
                dtMovimientosLiquidacion.Columns.Add("UNIDADES DIA");

                decimal coeficienteNuevo = 0;
                decimal coeficienteUsado = 0;
                decimal coeficienteUsar = 0;
                decimal coeficienteMixto = 0;
                decimal bonificacionTaximetroConsumible = 0;

                bool metersInvoicing = false;
                bool calcularPorSuperficie = false;
                decimal superficie = 0;
                decimal cambio = 0;
                decimal costeSuperficie = 0;
                string articulosConfiguracion = "";
                decimal taximetroNoConsumible = 0;
                decimal taximetroConsumible = 0;
                decimal precioTaximetroNoConsumible = 0;
                decimal precioTaximetroConsumible = 0;
                string IDCapitulo = "";
                string tabla = "";
                string campo = "";
                int dias = 0;
                int diasxMes = 0;
                int diasDiferencia = 0;
                int diasRestar = 0;
                DateTime fechaPrecio = DateTime.Now;
                DateTime fechaPrecios = DateTime.Now;
                DateTime fechaFicha = DateTime.Now;
                bool hayPrecio = false;
                System.Data.DataTable dtArticulos = new System.Data.DataTable();
                bool primeraVez = true;
                string articulos = "";
                string articulosCambio = "";
                string articulosLIQ = "";
                DataTable dtArticulosLIQ = new DataTable();
                decimal precioCoste = 0;
              
                delegacion = "";
                nombreFicha = "";

                dondeVa = "WS FICHA";
               System.Collections.IEnumerator enumerator_Obra;

                // CABECERA
                horaLlamada_1 = DateTime.Now;
                tablaObras.CallContext contexto_Obra = new tablaObras.CallContext();
                contexto_Obra.Company = empresa;

                tablaObras.QueryCriteria criterio_Obra = new tablaObras.QueryCriteria();
                criterio_Obra.CriteriaElement = new tablaObras.CriteriaElement[1];

                //ProjTable_1
                dondeVa = "WS FICHA CRITERIOS";
                criterio_Obra.CriteriaElement[0] = new tablaObras.CriteriaElement();
                criterio_Obra.CriteriaElement[0].DataSourceName = "ObraTable_1";
                criterio_Obra.CriteriaElement[0].FieldName = "ObraId";
                criterio_Obra.CriteriaElement[0].Operator = tablaObras.Operator.Equal;
                criterio_Obra.CriteriaElement[0].Value1 = numero;

                dondeVa = "WS FICHA CONEXION";
                tablaObras.ObrasServiceClient proxy_Obra = new tablaObras.ObrasServiceClient();
                proxy_Obra.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_Obra.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_Obra.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "WS FICHA PROXY";
                tablaObras.AxdObras axdtablaObras_1 = proxy_Obra.find(contexto_Obra, criterio_Obra);
             
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                horaProcesar_1 = DateTime.Now;
                
                //if (axdtablaObras_1.ObraTable_1.Equals(null))
                if (axdtablaObras_1.ObraTable_1 is null)
                {
                    proxy_Obra.Close();
                }
                else
                {
                    enumerator_Obra = axdtablaObras_1.ObraTable_1.GetEnumerator();

                    dondeVa = "WS FICHA RECORRER";
                    while (enumerator_Obra.MoveNext())
                    {
                        dondeVa = "WS FICHA TABLA 1";
                        tablaObras.AxdEntity_ObraTable_1 AxdEntity_ObraTable = (tablaObras.AxdEntity_ObraTable_1)enumerator_Obra.Current;
                        dondeVa = "WS FICHA TABLA 2";
                        moneda = AxdEntity_ObraTable.CurrencyCode;
                        masterObra = AxdEntity_ObraTable.MasterObrasId;
                        fechaFicha = AxdEntity_ObraTable.FechaApertura;
                        moneda= AxdEntity_ObraTable.CurrencyCode;
                        if (AxdEntity_ObraTable.FechaCierre is null)
                        {
                            fechaFinObra = DateTime.Now;
                            fichaCerrada = false;
                        }
                        else
                        {
                            fechaFinObra = Convert.ToDateTime(AxdEntity_ObraTable.FechaCierre);
                            fichaCerrada = true;
                        }

                        dondeVa = "WS FICHA CON FECHA CIERRE";
                        break;
                    }
                }
                proxy_Obra.Close();
                dondeVa = "WS FICHA SALIR";

                // DATOS PANELES
                dtArticulosPaneles = new DataTable();
                dtArticulosPaneles = localizarPaneles(Convert.ToDateTime(fechaFicha));

                dondeVa = "Recuperar versión a aplicar";
                localizarVersion(fechaFicha);

                // DATOS CONFIGURACION
                 SqlConnection conexion;
                string strConexion;

                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                SqlCommand comando;

                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                comando = conexion.CreateCommand();
                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                comando.CommandText = "ROP_DatosConfiguracionGeneral";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@delegacion", null);
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                dtTabla = new System.Data.DataTable();
                adaptador = new SqlDataAdapter(comando);
                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                adaptador.Fill(dtTabla);
                dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                adaptador.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();
                dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                //conexiones.comando.CommandText = "ROP_DatosConfiguracionGeneral";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@delegacion", null);
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //dtTabla = new System.Data.DataTable();
                //adaptador= new SqlDataAdapter(conexiones.comando);
                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                //adaptador.Fill(dtTabla);
                //dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                //adaptador.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                //dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                for (int i = 0; i < dtTabla.Rows.Count; i++)
                {
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "DÍAS POR MES")
                        diasxMes = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                        diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                        diasRestar = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                        mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                        porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                        porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                        porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);

                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "LIMITAR ABONO TAX MPO")
                    {
                        if (Convert.ToInt32(dtTabla.Rows[i]["Valor"]) == 0)
                            limitarAbonoTaxMPO = false;
                        else
                            limitarAbonoTaxMPO = true;
                    }
                        
                    if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "COEFICIENTE DE GASTOS FIJOS ALQUILER / VENTA")
                        coeficienteGastosFijosAlquilerVenta = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                }

                 // CABECERA
                cantidadPorte = 0;
                importeCosteTaximetroNoConsumible = 0;
                importeCosteTaximetroConsumible = 0;
                importeCosteVenta = 0;
                importePorte_TR001 = 0;
                importeCostePorte = 0;
               
                dondeVa = "RECUPERAR DATOS DE TIPOS MOVIMIENTOS DIAS";
                 // RECUPERAR DATOS DE TIPOS MOVIMIENTOS DIAS
                dtDatosMovimientos = new System.Data.DataTable();
                horaDatosConfigurados_3 = DateTime.Now;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "MovimientosAjusteFechaConsulta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                adaptadorDatosMovimiento = new SqlDataAdapter(comando);
                adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                adaptadorDatosMovimiento.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "MovimientosAjusteFechaConsulta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //adaptadorDatosMovimiento = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                //adaptadorDatosMovimiento.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                dondeVa = "LLAMADA";
                 // INICIO TAX - BONIFICACION
                int movimientosVan;
                decimal taxNoConsumible = 0;
                DataRow filaPedidos;

                DataView dvPositivo;
                DataView dvNegativo;
                DataRow[] filaEncontradaPositiva;
                DataRow[] filaEncontradaNegativa;
                string item;

                System.Collections.IEnumerator enumerator_Inventario;
                System.Data.DataTable dtItems = new System.Data.DataTable();

                dtItems.Columns.Add("ITEM");

                System.Data.DataTable dtPositivos = new System.Data.DataTable();
                System.Data.DataTable dtNegativos = new System.Data.DataTable();

                System.Data.DataTable dtTODO = new System.Data.DataTable();
                dtTODO.Columns.Add("TIPO MOVIMIENTO");
                dtTODO.Columns.Add("ITEM");
                dtTODO.Columns.Add("FECHA", typeof(DateTime));
                dtTODO.Columns.Add("CANTIDAD", typeof(Decimal));
                dtTODO.Columns.Add("PACKING SLIP");

                DataTable dtPedidos;
                dtPedidos = new System.Data.DataTable();
                dtPedidos.Columns.Add("TIPO");
                dtPedidos.Columns.Add("FECHA_CREACION");
                dtPedidos.Columns.Add("AAF");
                dtPedidos.Columns.Add("ITEM_ID");
                dtPedidos.Columns.Add("SALESQTY");
                dtPedidos.Columns.Add("SALES ID");

                System.Data.DataTable dtMovimientosAgrupados = new System.Data.DataTable();
                dtMovimientosAgrupados.Columns.Add("TIPO MOVIMIENTO");
                dtMovimientosAgrupados.Columns.Add("ITEM");
                dtMovimientosAgrupados.Columns.Add("FECHA", typeof(DateTime));
                dtMovimientosAgrupados.Columns.Add("CANTIDAD", typeof(Decimal));
                dtMovimientosAgrupados.Columns.Add("PACKING SLIP");

                System.Data.DataTable dtMovimientosPositivos = new System.Data.DataTable();
                dtMovimientosPositivos.Columns.Add("TIPO MOVIMIENTO POSITIVO");
                dtMovimientosPositivos.Columns.Add("ITEM POSITIVO");
                dtMovimientosPositivos.Columns.Add("FECHA POSITIVO", typeof(DateTime));
                dtMovimientosPositivos.Columns.Add("CANTIDAD POSITIVO", typeof(Decimal));
                dtMovimientosPositivos.Columns.Add("INVENT LOCATION ID POSITIVO");
                dtMovimientosPositivos.Columns.Add("PACKING SLIP POSITIVO");
                dtMovimientosPositivos.Columns.Add("CANTIDAD PROCESO POSITIVO", typeof(Decimal));

                System.Data.DataTable dtMovimientosNegativos = new System.Data.DataTable();
                dtMovimientosNegativos.Columns.Add("TIPO MOVIMIENTO NEGATIVO");
                dtMovimientosNegativos.Columns.Add("ITEM NEGATIVO");
                dtMovimientosNegativos.Columns.Add("FECHA NEGATIVO", typeof(DateTime));
                dtMovimientosNegativos.Columns.Add("CANTIDAD NEGATIVO", typeof(Decimal));
                dtMovimientosNegativos.Columns.Add("INVENT LOCATION ID NEGATIVO");
                dtMovimientosNegativos.Columns.Add("PACKING SLIP NEGATIVO");
                dtMovimientosNegativos.Columns.Add("CANTIDAD PROCESO NEGATIVO", typeof(Decimal));

                DataTable dtTax;
                dtTax = new System.Data.DataTable();
                dtTax.Columns.Add("ITEM");
                dtTax.Columns.Add("TIPO MOVIMIENTO POSITIVO");
                dtTax.Columns.Add("FECHA POSITIVO", typeof(DateTime));
                dtTax.Columns.Add("CANTIDAD POSITIVO", typeof(Decimal));
                dtTax.Columns.Add("PACKING SLIP POSITIVO");
                dtTax.Columns.Add("TIPO MOVIMIENTO NEGATIVO");
                dtTax.Columns.Add("FECHA NEGATIVO", typeof(DateTime));
                dtTax.Columns.Add("CANTIDAD NEGATIVO", typeof(Decimal));
                dtTax.Columns.Add("PACKING SLIP NEGATIVO");
                dtTax.Columns.Add("CANTIDAD", typeof(Decimal));
                dtTax.Columns.Add("DIAS", typeof(Decimal));
                dtTax.Columns.Add("UNIDADES-DIA", typeof(Decimal));
                dtTax.Columns.Add("PS", typeof(Decimal));
                dtTax.Columns.Add("DIAS MES", typeof(Decimal));
                dtTax.Columns.Add("CALCULAR POR SUPERFICIE", typeof(bool));
                dtTax.Columns.Add("METROS", typeof(Decimal));
                dtTax.Columns.Add("COSTE SUPERFICIE", typeof(Decimal));
                dtTax.Columns.Add("SUPERFICIE", typeof(Decimal));
                dtTax.Columns.Add("% TAX CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("PRECIO TAX CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("TAX CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("% TAX NO CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("PRECIO TAX NO CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("TAX NO CONSUMIBLE", typeof(Decimal));
                dtTax.Columns.Add("BONIFICACION", typeof(Decimal));

                // RECUPERAR DATOS DE TIPOS MOVIMIENTOS DIAS
                dtDatosMovimientos = new System.Data.DataTable(); 
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
               comando.CommandText = "MovimientosAjusteFechaConsulta";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@CFG_ID", null);
                comando.Parameters.AddWithValue("@fecha", "26/08/2021");
                adaptadorDatosMovimiento = new SqlDataAdapter(comando);
                adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                adaptadorDatosMovimiento.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "MovimientosAjusteFechaConsulta";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //conexiones.comando.Parameters.AddWithValue("@fecha", "26/08/2021");
                //adaptadorDatosMovimiento = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosMovimiento.Fill(dtDatosMovimientos);
                //adaptadorDatosMovimiento.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                // CABECERA
                tablaInventario.CallContext contexto_inventario = new tablaInventario.CallContext();
                contexto_inventario.Company = empresa;

                tablaInventario.QueryCriteria criterio_inventario = new tablaInventario.QueryCriteria();
                criterio_inventario.CriteriaElement = new tablaInventario.CriteriaElement[1];
                //criterio_inventario.CriteriaElement = new tablaInventario.CriteriaElement[2];

                criterio_inventario.CriteriaElement[0] = new tablaInventario.CriteriaElement();
                criterio_inventario.CriteriaElement[0].DataSourceName = "InventTrans_1";
                criterio_inventario.CriteriaElement[0].FieldName = "obraid";
                criterio_inventario.CriteriaElement[0].Operator = tablaInventario.Operator.Equal;
                criterio_inventario.CriteriaElement[0].Value1 = numero;


                tablaInventario.InventTransOriginServiceClient proxy_inventario = new tablaInventario.InventTransOriginServiceClient();
                proxy_inventario.ClientCredentials.Windows.ClientCredential.Domain = "ALSINA";
                proxy_inventario.ClientCredentials.Windows.ClientCredential.UserName = "cromlec3";
                proxy_inventario.ClientCredentials.Windows.ClientCredential.Password = "CroAls19";

                tablaInventario.AxdInventTrans AxdInventTrans = proxy_inventario.find(contexto_inventario, criterio_inventario);

                if (AxdInventTrans.InventTrans_1 is null)
                //if (AxdInventTrans.InventTrans_1.Equals(null))
                {
                    proxy_inventario.Close();
                }
                else
                {
                    enumerator_Inventario = AxdInventTrans.InventTrans_1.GetEnumerator();
                    movimientosVan = 0;
                    while (enumerator_Inventario.MoveNext())
                    {
                        tablaInventario.AxdEntity_InventTrans_1 AxdEntity_InventTrans_1 = (tablaInventario.AxdEntity_InventTrans_1)enumerator_Inventario.Current;

                        insertar = true;

                        if (AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() == tablaInventario.AxdEnum_InventTransMovementType.LostJobsiteOut.ToString().ToUpper())
                        {
                            filaPedidos = dtPedidos.NewRow();
                            filaPedidos["TIPO"] = "MPO";
                            filaPedidos["FECHA_CREACION"] = Convert.ToString(AxdEntity_InventTrans_1.ValueDate.Value.ToString("yyyyMMdd"));
                            filaPedidos["AAF"] = Convert.ToString("");
                            filaPedidos["ITEM_ID"] = Convert.ToString(AxdEntity_InventTrans_1.ItemId.ToString());
                            filaPedidos["SALESQTY"] = Convert.ToDecimal(((-1) * Convert.ToDecimal(AxdEntity_InventTrans_1.Qty.ToString())).ToString());
                            dtPedidos.Rows.Add(filaPedidos);
                            filaPedidos = null;

                            articulosLiquidacion = articulosLiquidacion + AxdEntity_InventTrans_1.ItemId.ToString() + "|";
                            if (articulosLIQ.IndexOf(Convert.ToString(AxdEntity_InventTrans_1.ItemId.ToString())) < 0)
                                articulosLIQ = articulosLIQ + Convert.ToString(AxdEntity_InventTrans_1.ItemId.ToString()) + "|" + Convert.ToString(AxdEntity_InventTrans_1.ValueDate.Value) + ";";
                        }

                        articulosConfiguracion = articulosConfiguracion + AxdEntity_InventTrans_1.ItemId.ToString() + "|";
                        if (!listaArticulosPedido.Contains(AxdEntity_InventTrans_1.ItemId.ToString()))
                        {
                            listaArticulosPedido.Add(AxdEntity_InventTrans_1.ItemId.ToString());
                            dondeVa = "RECORRER 5";
                            if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                                listaFechasPedido.Add(Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.Value));
                            else
                                listaFechasPedido.Add(fechaFicha);
                        }

                        sumarDias = 0;
                        restarDias = 0;
                        movimientosVan = movimientosVan + 1;
                        if (fichaCerrada && movimientosVan == dtMovimientosAgrupados.Rows.Count && AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() == "LOSTJOBSITEOUT")
                        { }
                        else
                        {
                            filaEncontrada = dtDatosMovimientos.Select("MOV_TipoDescripcion = '" + AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() + "'");
                            foreach (DataRow filaMov in filaEncontrada)
                            {
                                if (Convert.ToChar(filaMov["MOV_Signo"]).ToString() == "+")
                                    sumarDias = Convert.ToInt32(filaMov["MOV_Dias"]);
                                else
                                    restarDias = (-1) * Convert.ToInt32(filaMov["MOV_Dias"]);
                            }
                        }

                        string vpi = "";
                        if (AxdEntity_InventTrans_1.ValuePackingSlip != null)
                            vpi = AxdEntity_InventTrans_1.ValuePackingSlip.ToString().ToUpper();

                        if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                            filaEncontrada = dtMovimientosAgrupados.Select("ITEM = '" + AxdEntity_InventTrans_1.ItemId.ToString() + "' AND FECHA = '" + Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()).AddDays(sumarDias + restarDias).ToString() + "' AND [TIPO MOVIMIENTO] = '" + AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() + "' AND [PACKING SLIP] = '" + vpi + "'");
                        else
                            filaEncontrada = dtMovimientosAgrupados.Select("ITEM = '" + AxdEntity_InventTrans_1.ItemId.ToString() + "' AND FECHA = '" + fechaFicha.ToString() + "' AND [TIPO MOVIMIENTO] = '" + AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper() + "' AND [PACKING SLIP] = '" + vpi + "'");

                        foreach (DataRow fila in filaEncontrada)
                        {
                            if (Convert.ToDecimal(fila["CANTIDAD"]) + Convert.ToDecimal(AxdEntity_InventTrans_1.Qty) == 0)
                            {
                                fila["CANTIDAD"] = (Convert.ToDecimal(fila["CANTIDAD"]) + Convert.ToDecimal(AxdEntity_InventTrans_1.Qty)).ToString();
                                fila.AcceptChanges();
                                insertar = false;
                                break;
                            }
                        }

                        if (insertar)
                        {
                            filaMovimiento = dtMovimientosAgrupados.NewRow();
                            filaMovimiento["ITEM"] = AxdEntity_InventTrans_1.ItemId.ToString();
                            if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                                filaMovimiento["FECHA"] = Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()).AddDays(sumarDias + restarDias).ToString();
                            else
                                filaMovimiento["FECHA"] = Convert.ToDateTime(fechaFicha.ToString());
                            filaMovimiento["TIPO MOVIMIENTO"] = AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper();
                            filaMovimiento["CANTIDAD"] = AxdEntity_InventTrans_1.Qty.ToString();
                            filaMovimiento["PACKING SLIP"] = AxdEntity_InventTrans_1.ValuePackingSlip;
                            dtMovimientosAgrupados.Rows.Add(filaMovimiento);
                            filaMovimiento = null;
                        }

                        filaMovimiento = dtTODO.NewRow();
                        filaMovimiento["ITEM"] = AxdEntity_InventTrans_1.ItemId.ToString();
                        if (!String.IsNullOrEmpty(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()))
                            filaMovimiento["FECHA"] = Convert.ToDateTime(AxdEntity_InventTrans_1.ValueDateCashFlow.ToString()).AddDays(sumarDias + restarDias).ToString();
                        else
                            filaMovimiento["FECHA"] = Convert.ToDateTime(fechaFicha.ToString());
                        filaMovimiento["TIPO MOVIMIENTO"] = AxdEntity_InventTrans_1.InventTransMovementType.ToString().ToUpper();
                        filaMovimiento["CANTIDAD"] = AxdEntity_InventTrans_1.Qty.ToString();
                        filaMovimiento["PACKING SLIP"] = AxdEntity_InventTrans_1.ValuePackingSlip;
                        dtTODO.Rows.Add(filaMovimiento);
                        filaMovimiento = null;
                    }
                }
                proxy_inventario.Close();

                foreach (DataRow filaAgrupada in dtMovimientosAgrupados.Rows)
                {
                    if (Convert.ToDecimal(filaAgrupada["CANTIDAD"]) > 0)
                    {
                        filaMovimiento = dtMovimientosPositivos.NewRow();
                        filaMovimiento["ITEM POSITIVO"] = filaAgrupada["ITEM"].ToString();
                        filaMovimiento["FECHA POSITIVO"] = Convert.ToDateTime(filaAgrupada["FECHA"]);
                        filaMovimiento["TIPO MOVIMIENTO POSITIVO"] = filaAgrupada["TIPO MOVIMIENTO"].ToString().ToUpper();
                        filaMovimiento["CANTIDAD POSITIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["CANTIDAD PROCESO POSITIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["PACKING SLIP POSITIVO"] = filaAgrupada["PACKING SLIP"];
                        dtMovimientosPositivos.Rows.Add(filaMovimiento);
                        filaMovimiento = null;
                    }

                    if (Convert.ToDecimal(filaAgrupada["CANTIDAD"]) < 0)
                    {
                        filaMovimiento = dtMovimientosNegativos.NewRow();
                        filaMovimiento["ITEM NEGATIVO"] = filaAgrupada["ITEM"].ToString();
                        filaMovimiento["FECHA NEGATIVO"] = Convert.ToDateTime(filaAgrupada["FECHA"]);
                        filaMovimiento["TIPO MOVIMIENTO NEGATIVO"] = filaAgrupada["TIPO MOVIMIENTO"].ToString().ToUpper();
                        filaMovimiento["CANTIDAD NEGATIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["CANTIDAD PROCESO NEGATIVO"] = filaAgrupada["CANTIDAD"].ToString();
                        filaMovimiento["PACKING SLIP NEGATIVO"] = filaAgrupada["PACKING SLIP"];
                        dtMovimientosNegativos.Rows.Add(filaMovimiento);
                        filaMovimiento = null;
                    }
                }

                dvPositivo = dtMovimientosPositivos.DefaultView;
                dvPositivo.Sort = "[ITEM POSITIVO] ASC, [FECHA POSITIVO] ASC, [CANTIDAD PROCESO POSITIVO] DESC";
                dtMovimientosPositivos = null;
                dtMovimientosPositivos = dvPositivo.ToTable();

                dvNegativo = dtMovimientosNegativos.DefaultView;
                dvNegativo.Sort = "[ITEM NEGATIVO] ASC, [FECHA NEGATIVO] ASC, [CANTIDAD PROCESO NEGATIVO] DESC";
                dtMovimientosNegativos = null;
                dtMovimientosNegativos = dvNegativo.ToTable();

                dondeVa = "RECORRER 10";
                if (!String.IsNullOrEmpty(numero))
                {
                    dondeVa = "fecha base ficha artículo: entró";
                    fechaBaseFichaArticulo(ref listaOfertas, ref listaFechasOferta, ref listaArticulosPedido, ref listaFechasPedido, empresa, numero, diasDiferencia, diasRestar);
                    dondeVa = "fecha base ficha artículo: salió";

                    tabla = "fechaBaseFichaArticulo";
                    IDCapitulo = "Ficha " + numero;
                    campo = "fechaBaseFichaArticulo";

                    dondeVa = "crear listado artículos entró " + listaArticulosPedido.Count.ToString() + " // " + listaFechasPedido.Count.ToString();
                    articulos = ";";
                    articulosCambio = ";";
                    for (lineaCapitulo = 0; lineaCapitulo < listaArticulosPedido.Count; lineaCapitulo++)
                    {
                        dondeVa = "1 crear listado artículos va en " + lineaCapitulo.ToString();
                        articulos = articulos + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                        articulosConfiguracion = articulosConfiguracion + listaArticulosPedido.ElementAt(lineaCapitulo) + "|";
                        dondeVa = "2 crear listado artículos va en " + lineaCapitulo.ToString();
                        articulosCambio = articulosCambio + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                        if (listaFechasPedido.ElementAt(lineaCapitulo) < fechaPrecios)
                            fechaPrecios = listaFechasPedido.ElementAt(lineaCapitulo);
                    }
                    dondeVa = "crear listado artículos salió";
                }

                if (fechaPrecios != new DateTime())
                {
                    dondeVa = "insert log";
                    strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                    conexion = new SqlConnection(strConexion);
                    conexion.Open();
                    comando = conexion.CreateCommand();
                     comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                    comando.CommandType = CommandType.StoredProcedure;
                    comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                    comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                    comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                    comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                    comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                    comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                    comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                    comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                    comando.ExecuteNonQuery();
                    conexion.Close();

                    //conexiones.crearConexion();
                    //conexiones.comando = conexiones.conexion.CreateCommand();
                    //conexiones.comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                    //conexiones.comando.CommandType = CommandType.StoredProcedure;
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Oferta", numero);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                    //conexiones.comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                    //conexiones.comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                    //conexiones.comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                    //conexiones.comando.ExecuteNonQuery();
                    //conexiones.conexion.Close();
                    primeraVez = false;

                    dondeVa = "localizar precios artículos";
                    dtArticulos = localizarPreciosArticulos(empresa, "", articulos, moneda, articulosCambio, numero, usuario);
                    dondeVa = "salio localizar precios artículos";
                    hayPrecio = true;
               }

                // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                dondeVa = "ROP_DatosConfiguracion";
                dtDatosConfiguracion = new System.Data.DataTable();
                horaDatosConfigurados_3 = DateTime.Now;
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosConfiguracion";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                comando.Parameters.AddWithValue("@moneda", moneda);
                comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                adaptadorDatosConfiguracion.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosConfiguracion";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                //adaptadorDatosConfiguracion = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                //adaptadorDatosConfiguracion.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                horaDatosConfigurados_4 = DateTime.Now.Subtract(horaDatosConfigurados_3);

                dondeVa = "localizarEstadoArticulos";
                dtArticulosLiquidacion = localizarEstadoArticulos(usuario, articulosConfiguracion);
                
                // RECORRER Y CALCULAR POR ITEM
                dondeVa = "listaArticulosPedido";
                for (linea = 0; linea <= listaArticulosPedido.Count - 1; linea++)
                {
                    item = listaArticulosPedido.ElementAt(linea);

                    // LOCALIZA PRECIO Y VALORES TAX-BONIFICACION
                    filaEncontrada = dtArticulos.Select("Articulo = '" + item + "'");
                    if (filaEncontrada.Count() == 0)
                    {
                        imgWarning.Visible = true;
                        lblMensajeError.Visible = true;
                        lblMensajeError.Text = lblMensajeError.Text + "(TAX) No se ha localizado el precio del articulo '" + item + "' // ";
                    }
                    foreach (DataRow filaprecio in filaEncontrada)
                    {
                        nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                        if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                        {
                            dondeVa = "precioCoste";
                            precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                            break;
                        }
                    }

                    dondeVa = "datos tax configurados";
                    costeSuperficie = 0;
                    taximetroConsumible = 0;
                    listaBonificacionesDesde.Clear();
                    listaBonificacionesHasta.Clear();
                    listaBonificacionesValor.Clear();
                    calcularPorSuperficie = false;
                    superficie = 0;
                    taximetroNoConsumible = 0;
                    diasDesdeTaxNoConsumible = 0;
                    diasHastaTaxNoConsumible = 0;
                    porcentajeBuenTrato = 0;
                    coeficienteBuenTrato = 0;

                    filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + item + "'");
                    foreach (DataRow filaTax in filaEncontrada)
                    {
                        if (Convert.ToString(filaTax["Concepto"]) == "Coste superficie")
                        {
                            cambio = Convert.ToDecimal(filaTax["Cambio"]);
                            costeSuperficie = Convert.ToDecimal(filaTax["Valor"]) * cambio;
                        }

                        if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro consumible")
                        {
                            taximetroConsumible = Convert.ToDecimal(filaTax["Valor"]) / 100;
                            listaBonificacionesDesde.Add(Convert.ToInt32(filaTax["Desde"]));
                            listaBonificacionesHasta.Add(Convert.ToInt32(filaTax["Hasta"]));
                            listaBonificacionesValor.Add(Convert.ToDecimal(filaTax["Ajuste"]));

                            if (!String.IsNullOrEmpty(Convert.ToString(filaTax["Valorar"])))
                                if (Convert.ToString(filaTax["Valorar"]).ToUpper() == "SUPERFICIE")
                                {
                                    calcularPorSuperficie = true;
                                    superficie = Convert.ToDecimal(filaTax["Superficie"]);
                                }
                        }
                        metersInvoicing = Convert.ToBoolean(filaTax["MetersInvoicing"]);
                        if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                        {
                            taximetroNoConsumible = (Convert.ToDecimal(filaTax["Valor"]) / 100);
                            diasDesdeTaxNoConsumible = Convert.ToInt32(filaTax["Desde"]);
                            diasHastaTaxNoConsumible = Convert.ToInt32(filaTax["Hasta"]);
                        }

                        if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                            porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                        if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                            coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                    }

                    if (taximetroConsumible == 0)
                    {
                        precioTaximetroNoConsumible = precioCoste;
                    }
                    else
                    {
                        if (calcularPorSuperficie)
                        {
                            if (!metersInvoicing)
                            {
                                precioTaximetroNoConsumible = precioCoste; // (precioCoste - (costeSuperficie * superficie));
                                precioTaximetroConsumible = 0;
                            }
                            else
                            {
                                precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                precioTaximetroConsumible = (costeSuperficie * superficie);
                            }
                        }
                        else
                        {
                            precioTaximetroNoConsumible = 0;
                            precioTaximetroConsumible = precioCoste;
                        }
                    }

                    filaEncontradaNegativa = dtMovimientosNegativos.Select("[ITEM NEGATIVO] = '" + item + "' AND [CANTIDAD PROCESO NEGATIVO] < 0", "[ITEM NEGATIVO] ASC, [FECHA NEGATIVO] ASC, [CANTIDAD PROCESO NEGATIVO] DESC");
                    foreach (DataRow filaNegativa in filaEncontradaNegativa)
                    {
                        dondeVa = "filaEncontradaNegativa";
                        cantidad = Convert.ToDecimal(filaNegativa["CANTIDAD NEGATIVO"]);
                        while (cantidad != 0)
                        {
                            filaEncontradaPositiva = dtMovimientosPositivos.Select("[ITEM POSITIVO] = '" + item + "' AND [CANTIDAD PROCESO POSITIVO] > 0", "[ITEM POSITIVO] ASC, [FECHA POSITIVO] ASC, [CANTIDAD PROCESO POSITIVO] DESC");
                            foreach (DataRow filaPositiva in filaEncontradaPositiva)
                            {
                                taximetroConsumibleBuenTrato = 0;
                                taximetroNoConsumibleBuenTrato = 0;

                                filaMovimiento = dtTax.NewRow();
                                filaMovimiento["BONIFICACION"] = 0;
                                filaMovimiento["ITEM"] = item;
                                filaMovimiento["TIPO MOVIMIENTO POSITIVO"] = filaPositiva["TIPO MOVIMIENTO POSITIVO"];
                                filaMovimiento["FECHA POSITIVO"] = filaPositiva["FECHA POSITIVO"];
                                filaMovimiento["CANTIDAD POSITIVO"] = filaPositiva["CANTIDAD POSITIVO"];
                                filaMovimiento["PACKING SLIP POSITIVO"] = filaPositiva["PACKING SLIP POSITIVO"];
                                filaMovimiento["TIPO MOVIMIENTO NEGATIVO"] = filaNegativa["TIPO MOVIMIENTO NEGATIVO"];
                                filaMovimiento["FECHA NEGATIVO"] = filaNegativa["FECHA NEGATIVO"];
                                filaMovimiento["CANTIDAD NEGATIVO"] = filaNegativa["CANTIDAD NEGATIVO"];
                                filaMovimiento["PACKING SLIP NEGATIVO"] = filaNegativa["PACKING SLIP NEGATIVO"];
                                filaMovimiento["CALCULAR POR SUPERFICIE"] = calcularPorSuperficie;
                                filaMovimiento["METROS"] = metersInvoicing;
                                filaMovimiento["COSTE SUPERFICIE"] = costeSuperficie;
                                filaMovimiento["SUPERFICIE"] = superficie;

                                dondeVa = "diasXMes " + diasxMes.ToString();

                                if (Math.Abs(cantidad) >= Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]))
                                {
                                    dondeVa = "entra positivo";
                                    filaMovimiento["CANTIDAD"] = Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]));
                                    filaMovimiento["DIAS"] = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;
                                    filaMovimiento["UNIDADES-DIA"] = Convert.ToDecimal(filaMovimiento["DIAS"]) * Convert.ToDecimal(filaMovimiento["CANTIDAD"]);
                                    cantidad = cantidad + Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]);

                                    dias = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;

                                    if (dias <= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = dias - diasDesdeTaxNoConsumible;
                                    if (dias >= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;
                                    taxNoConsumible = (Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"])) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes; ;
                                    filaMovimiento["TAX NO CONSUMIBLE"] = taxNoConsumible;
                                    taximetroNoConsumibleBuenTrato = taxNoConsumible;
                                    filaMovimiento["TAX CONSUMIBLE"] = (Convert.ToDecimal(filaMovimiento["CANTIDAD"]) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;
                                    taximetroConsumibleBuenTrato = (Convert.ToDecimal(filaMovimiento["CANTIDAD"]) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;

                                    diasCalculados = 0;
                                    diasMultiplicar = 0;
                                    importeCosteBonificacionTaximetroConsumible = 0;
                                    bonificacionTaximetroConsumibleBuenTrato = 0;
                                    while (diasCalculados < dias)
                                    {
                                        dondeVa = "lineasBonificacion";
                                        for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                        {
                                            if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                            {
                                                if (dias - diasCalculados >= diasxMes)
                                                    diasMultiplicar = diasxMes;
                                                else
                                                    diasMultiplicar = dias - diasCalculados;
                                                bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"])) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                bonificacionTaximetroConsumibleBuenTrato = bonificacionTaximetroConsumibleBuenTrato + ((Math.Abs(Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"])) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);

                                            }
                                        }
                                        diasCalculados = diasCalculados + diasxMes;
                                    }
                                    filaMovimiento["BONIFICACION"] = importeCosteBonificacionTaximetroConsumible;
                                    filaMovimiento["PS"] = precioCoste;
                                    filaMovimiento["DIAS MES"] = diasxMes;
                                    filaMovimiento["% TAX CONSUMIBLE"] = taximetroConsumible;
                                    filaMovimiento["PRECIO TAX CONSUMIBLE"] = precioTaximetroConsumible;
                                    filaMovimiento["% TAX NO CONSUMIBLE"] = taximetroNoConsumible;
                                    filaMovimiento["PRECIO TAX NO CONSUMIBLE"] = precioTaximetroNoConsumible;
                                    dtTax.Rows.Add(filaMovimiento);
                                    filaMovimiento = null;

                                    filaPositiva["CANTIDAD PROCESO POSITIVO"] = 0;
                                    filaPositiva.AcceptChanges();

                                    if (porcentajeBuenTrato > 0 && (taximetroConsumibleBuenTrato != 0 || bonificacionTaximetroConsumibleBuenTrato != 0))
                                    {
                                        dondeVa = "porcentajeBuenTrato";

                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAA in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAA["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 6";
                                        oItemBuenTrato["Abono"] = bonificacionTaximetroConsumibleBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 9";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 10";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }

                                    dondeVa = "Si porcentaje buen trato";
                                    if (porcentajeBuenTrato > 0 && taximetroNoConsumibleBuenTrato > 0)
                                    {
                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAAF in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAAF["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroNoConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 7";
                                        oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                        dondeVa = "Buen trato 8";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 9";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }
                                }
                                else if (Math.Abs(cantidad) < Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]))
                                {
                                    filaMovimiento["CANTIDAD"] = Math.Abs(cantidad);
                                    filaMovimiento["DIAS"] = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;
                                    filaMovimiento["UNIDADES-DIA"] = Convert.ToDecimal(filaMovimiento["DIAS"]) * Convert.ToDecimal(filaMovimiento["CANTIDAD"]);

                                    dias = Convert.ToDateTime(filaNegativa["FECHA NEGATIVO"]).Subtract(Convert.ToDateTime(filaPositiva["FECHA POSITIVO"])).Days;

                                    if (dias <= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = dias - diasDesdeTaxNoConsumible;
                                    if (dias >= diasHastaTaxNoConsumible)
                                        diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;
                                    taxNoConsumible = (Math.Abs(cantidad) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes; ;
                                    filaMovimiento["TAX NO CONSUMIBLE"] = taxNoConsumible;
                                    taximetroNoConsumibleBuenTrato = taxNoConsumible;
                                    filaMovimiento["TAX CONSUMIBLE"] = (Math.Abs(cantidad) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;
                                    taximetroConsumibleBuenTrato = (Math.Abs(cantidad) * dias * precioTaximetroConsumible * taximetroConsumible) / diasxMes;

                                    diasCalculados = 0;
                                    diasMultiplicar = 0;
                                    importeCosteBonificacionTaximetroConsumible = 0;
                                    bonificacionTaximetroConsumibleBuenTrato = 0;
                                    while (diasCalculados < dias)
                                    {
                                        for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                        {
                                            if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                            {
                                                if (dias - diasCalculados >= diasxMes)
                                                    diasMultiplicar = diasxMes;
                                                else
                                                    diasMultiplicar = dias - diasCalculados;
                                                bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Math.Abs(cantidad) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                bonificacionTaximetroConsumibleBuenTrato = bonificacionTaximetroConsumibleBuenTrato + ((Math.Abs(cantidad) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                            }
                                        }
                                        diasCalculados = diasCalculados + diasxMes;
                                    }
                                    filaMovimiento["BONIFICACION"] = importeCosteBonificacionTaximetroConsumible;
                                    filaMovimiento["PS"] = precioCoste;
                                    filaMovimiento["DIAS MES"] = diasxMes;
                                    filaMovimiento["% TAX CONSUMIBLE"] = taximetroConsumible;
                                    filaMovimiento["PRECIO TAX CONSUMIBLE"] = precioTaximetroConsumible;
                                    filaMovimiento["% TAX NO CONSUMIBLE"] = taximetroNoConsumible;
                                    filaMovimiento["PRECIO TAX NO CONSUMIBLE"] = precioTaximetroNoConsumible;
                                    dtTax.Rows.Add(filaMovimiento);
                                    filaMovimiento = null;

                                    filaPositiva["CANTIDAD PROCESO POSITIVO"] = Convert.ToDecimal(filaPositiva["CANTIDAD PROCESO POSITIVO"]) + cantidad;
                                    filaPositiva.AcceptChanges();
                                    cantidad = 0;

                                    if (porcentajeBuenTrato > 0 && (taximetroConsumibleBuenTrato != 0 || bonificacionTaximetroConsumibleBuenTrato != 0))
                                    {
                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAA in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAA["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 6";
                                        oItemBuenTrato["Abono"] = bonificacionTaximetroConsumibleBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 9";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 10";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }

                                    dondeVa = "Si porcentaje buen trato";
                                    if (porcentajeBuenTrato > 0 && taximetroNoConsumibleBuenTrato > 0)
                                    {
                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + item + "'");
                                        foreach (DataRow filaAAF in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAAF["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "Buen trato 2";
                                        oItemBuenTrato["Buen Trato Porcentaje"] = porcentajeBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 3";
                                        oItemBuenTrato["Buen Trato Coeficiente"] = coeficienteBuenTrato.ToString("#,##0.00");
                                        dondeVa = "Buen trato 4";
                                        oItemBuenTrato["Item"] = item;
                                        dondeVa = "Buen trato 5";
                                        oItemBuenTrato["Taximetro"] = (taximetroNoConsumibleBuenTrato).ToString("#,##0.00");
                                        dondeVa = "Buen trato 7";
                                        oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                        dondeVa = "Buen trato 8";
                                        oItemBuenTrato["AAF"] = AAF;
                                        dondeVa = "Buen trato 9";
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }

                                    break;
                                }
                                if (cantidad == 0)
                                    break;
                            }
                        }
                    }
                }
                // FIN TAX - BONIFICACION

                dondeVa = "Calcular totales tax + bonificacion";
                importeCosteTaximetroNoConsumible = 0;
                importeCosteTaximetroConsumible = 0;
                importeCosteBonificacionTaximetroConsumible = 0;

                dondeVa = "Sumar tax + bonificacion";
                importeCosteTaximetroNoConsumible = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX NO CONSUMIBLE")));
                importeCosteTaximetroConsumible = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX CONSUMIBLE")));
                importeCosteBonificacionTaximetroConsumible = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("BONIFICACION")));

                // BUEN TRATO
                //taximetroConsumibleBuenTrato = dtTax.AsEnumerable().Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX CONSUMIBLE")));

                // VALES TRANSPORTE
                 System.Collections.IEnumerator enumerator_VT;
                // CABECERA
                dondeVa = "contexto_1";
                tablaValesTransporte.CallContext contexto_VT = new tablaValesTransporte.CallContext();
                contexto_VT.Company = empresa;

                dondeVa = "criterio";
                tablaValesTransporte.QueryCriteria criterio_VT = new tablaValesTransporte.QueryCriteria();
                criterio_VT.CriteriaElement = new tablaValesTransporte.CriteriaElement[1];

                //ProjTable_1
                criterio_VT.CriteriaElement[0] = new tablaValesTransporte.CriteriaElement();
                criterio_VT.CriteriaElement[0].DataSourceName = "TransportTicketTable";
                criterio_VT.CriteriaElement[0].FieldName = "obraid";
                criterio_VT.CriteriaElement[0].Operator = tablaValesTransporte.Operator.Equal;
                criterio_VT.CriteriaElement[0].Value1 = numero;

                dondeVa = "credenciales";
                tablaValesTransporte.TransportTicketServiceClient proxy_VT = new tablaValesTransporte.TransportTicketServiceClient();
                proxy_VT.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_VT.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_VT.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "proxy TransportTicketTable";
                tablaValesTransporte.AxdTransportTicket AxdTransportTicket = proxy_VT.find(contexto_VT, criterio_VT);

                datosGenerales = "";
                dondeVa = "validar";
                cantidadPorte = 0;
                importeCostePorte = 0;
                if (AxdTransportTicket.TransportTicketTable is null)
                {
                    proxy_VT.Close();
                }
                else
                {
                    dondeVa = "primer data";
                    enumerator_VT = AxdTransportTicket.TransportTicketTable.GetEnumerator();
                    while (enumerator_VT.MoveNext())
                    {
                        tablaValesTransporte.AxdEntity_TransportTicketTable AxdEntity_TransportTicketTable = (tablaValesTransporte.AxdEntity_TransportTicketTable)enumerator_VT.Current;

                        dondeVa = "RECORRER";
                        cantidadPorte = cantidadPorte + 1;
                        capitulosPorte.Add(AxdEntity_TransportTicketTable.TypeTransportTicket.ToString());
                        dec_importeFacturacionPorteCapitulos.Add(0);
                        dec_importeCostePorteCapitulos.Add(Convert.ToDecimal(AxdEntity_TransportTicketTable.UPS));
                        dec_importeMargenPorteCapitulos.Add(0 - Convert.ToDecimal(AxdEntity_TransportTicketTable.UPS));
                        importeCostePorte = importeCostePorte + Convert.ToDecimal(AxdEntity_TransportTicketTable.UPS);

                        dondeVa = "guardar datos de transporte";
                        oValeTransporte = dtValesTransporte.NewRow();
                        oValeTransporte["Albaran"] = AxdEntity_TransportTicketTable.PackingSlipId.ToString();
                        oValeTransporte["Tipo transporte"] = AxdEntity_TransportTicketTable.TipoTransId.ToString();
                        dtValesTransporte.Rows.Add(oValeTransporte);
                        oValeTransporte = null;
                    }
                }
                proxy_VT.Close();

                // PEDIDOS DE LIQUIDACIÓN DE LA OBRA
                dondeVa = "Pedidos";
                System.Collections.IEnumerator enumerator_Pedido;
                // CABECERA
                tablaPedidos.CallContext contexto_Pedido = new tablaPedidos.CallContext();
                contexto_Pedido.Company = empresa;

                tablaPedidos.QueryCriteria criterio_Pedido = new tablaPedidos.QueryCriteria();
                criterio_Pedido.CriteriaElement = new tablaPedidos.CriteriaElement[2];

                criterio_Pedido.CriteriaElement[0] = new tablaPedidos.CriteriaElement();
                criterio_Pedido.CriteriaElement[0].DataSourceName = "SalesTable";
                criterio_Pedido.CriteriaElement[0].FieldName = "OBRAID";
                criterio_Pedido.CriteriaElement[0].Operator = tablaPedidos.Operator.Equal;
                criterio_Pedido.CriteriaElement[0].Value1 = numero;
               
                tablaPedidos.SalesOrdersServiceClient proxy_Pedido = new tablaPedidos.SalesOrdersServiceClient();
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                tablaPedidos.AxdSalesOrders axdtablaPedidos_Pedido = proxy_Pedido.find(contexto_Pedido, criterio_Pedido);

                if (axdtablaPedidos_Pedido.SalesTable is null)
                {
                    proxy_Pedido.Close();
                }
                else if (axdtablaPedidos_Pedido.SalesTable is null)
                {
                    proxy_Pedido.Close();
                }
                else
                {
                    enumerator_Pedido = axdtablaPedidos_Pedido.SalesTable.GetEnumerator();
                    while (enumerator_Pedido.MoveNext())
                    {
                        dondeVa = "recorrer pedidos";
                        tablaPedidos.AxdEntity_SalesTable axdEntity_SalesQuotationMasterTable = (tablaPedidos.AxdEntity_SalesTable)enumerator_Pedido.Current;
                        tablaPedidos.AxdEntity_SalesLine[] axdEntity_SalesQuotationTables = axdEntity_SalesQuotationMasterTable.SalesLine;
                        tablaPedidos.AxdEntity_SalesLine axdEntity_SalesQuotationTable;

                        //if (axdEntity_SalesQuotationMasterTable.SalesStatus.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesStatus.Invoiced.ToString().ToUpper())
                        if (axdEntity_SalesQuotationMasterTable.SalesStatus.ToString().ToUpper() != tablaPedidos.AxdEnum_SalesStatus.Canceled.ToString().ToUpper())
                        {
                            if (axdEntity_SalesQuotationMasterTable.SalesType.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesType.Alquiler.ToString().ToUpper())
                            {
                                filaPedidosAlquiler = dtPedidosAlquiler.NewRow();
                                filaPedidosAlquiler["Numero"] = axdEntity_SalesQuotationMasterTable.SalesId.ToString();
                                filaPedidosAlquiler["Tipo pedido"] = axdEntity_SalesQuotationMasterTable.SalesType.ToString();
                                filaPedidosAlquiler["Venta tipo"] = axdEntity_SalesQuotationMasterTable.TipoVenta.ToString();
                                filaPedidosAlquiler["Alquiler tipo"] = axdEntity_SalesQuotationMasterTable.TipoAlquiler.ToString();
                                dtPedidosAlquiler.Rows.Add(filaPedidosAlquiler);
                            }

                            for (lineaCapitulo = 0; lineaCapitulo < axdEntity_SalesQuotationTables.Length; lineaCapitulo++)
                            {
                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[lineaCapitulo];

                                filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    dondeVa = "encontró configuracion dataset // " + axdEntity_SalesQuotationTable.ItemId.ToString() + " // ";

                                    dondeVa = "Peso del artículo";
                                    pesoArticulo = Convert.ToDecimal(fila["WeightVolumeKg"]);
                                    dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                        tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                                    dondeVa = "encontró configuracion dataset // Coste superficie";
                                    dondeVa = "encontró configuracion dataset // Tipo producto";
                                    productType = Convert.ToString(fila["ProductTypeName_es"]);

                                    dondeVa = "encontró configuracion dataset // Correcion PS Nuevo";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Nuevo")
                                        coeficienteNuevo = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Correcion PS Usado";
                                    if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Usado")
                                        coeficienteUsado = Convert.ToDecimal(fila["Valor"]);
                                    dondeVa = "encontró configuracion dataset // Tipo artículo";
                                    tipoArticulo = Convert.ToString(fila["TipoArticulo"]);

                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Valorar"])))
                                    {
                                        if (Convert.ToString(fila["Valorar"]).ToUpper() == "SUPERFICIE")
                                        {
                                            calcularPorSuperficie = true;
                                            dondeVa = "encontró configuracion dataset // Superficie";
                                            superficie = Convert.ToDecimal(fila["Superficie"]);
                                        }
                                    }

                                    // Fenólico / Nuevo
                                    if (Convert.ToString(fila["Concepto"]) == "Porcentaje coste material nuevo")
                                        porcentajeCosteMaterialNuevo = Convert.ToDecimal(fila["Valor"]);
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel estándar")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEstandar = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                    if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel especial")
                                    {
                                        cambio = Convert.ToDecimal(fila["Cambio"]);
                                        costeFenolicoNuevoEspecial = Convert.ToDecimal(fila["Valor"]) * cambio;
                                    }
                                }

                                articulosConfiguracion = articulosConfiguracion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                if (axdEntity_SalesQuotationMasterTable.SalesType.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesType.Sales.ToString().ToUpper())
                                {
                                    // COSTES
                                    filaEncontradaFenolico = dtArticulosPaneles.Select("Itemid = '" + axdEntity_SalesQuotationTable.ItemId.ToString() + "'");
                                    foreach (DataRow filaFenolico in filaEncontradaFenolico)
                                    {
                                        if (Convert.ToBoolean(filaFenolico["Estandar"]))
                                            importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEstandar);
                                        else
                                            importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * superficie * costeFenolicoNuevoEspecial);
                                    }

                                    importeCosteVentaFenolicoNuevo = importeCosteVentaFenolicoNuevo + importeCosteMaterialFenolico;

                                    if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                        importeCosteVentaDepartamentoTecnico = importeCosteVentaDepartamentoTecnico + Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste * coeficienteUsar;
                                    else if (tipoServicio.ToUpper() == "MONTAJES")
                                        importeCosteVentaMontajes = importeCosteVentaMontajes + Convert.ToDecimal(axdEntity_SalesQuotationTable.LineAmount) * precioCoste;
                                    else
                                    {
                                        if (productType.Trim().ToUpper() == "SERVICIO")
                                        {
                                            dondeVa = "VENTAS: Servicio";
                                            // Fenólico
                                            if (axdEntity_SalesQuotationTable.CanonFenolico.HasValue && axdEntity_SalesQuotationTable.CanonFenolico != 0)
                                                dondeVa = "VENTAS: Fenólico";
                                            // SVP/CIF
                                            else if (axdEntity_SalesQuotationTable.CanonImport.HasValue && axdEntity_SalesQuotationTable.CanonImport != 0)
                                                importeCosteVentaUneCif = importeCosteVentaUneCif + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste) * (Convert.ToDecimal(axdEntity_SalesQuotationTable.Canon) / 100));
                                            // OTROS SERVICIOS
                                            else
                                                importeCosteVentaOtrosServicios = importeCosteVentaOtrosServicios + ((Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty) * precioCoste));
                                        }
                                    }
                                    articulos = articulos + Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString()) + "|" + Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value) + ";";
                                }

                                if (axdEntity_SalesQuotationMasterTable.SalesType.ToString().ToUpper() == tablaPedidos.AxdEnum_SalesType.Alquiler.ToString().ToUpper())
                                {
                                    // COSTES
                                }

                                // VALIDAR
                                if ((importeCosteMaterialNuevo != 0) && (importeCosteMaterialFenolico != 0))
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + (importeCosteMaterialNuevo - importeCosteMaterialFenolico);
                                else
                                    importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + importeCosteMaterialNuevo;

                                if (axdEntity_SalesQuotationMasterTable.TipoVenta.ToString().ToUpper() == tablaPedidos.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper())
                                {
                                    dondeVa = "es liquidación";
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[lineaCapitulo];
                                    filaPedidos = dtPedidos.NewRow();
                                    filaPedidos["TIPO"] = "LIQ";
                                    filaPedidos["FECHA_CREACION"] = Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString("yyyyMMdd"));
                                    filaPedidos["AAF"] = Convert.ToString("");
                                    filaPedidos["ITEM_ID"] = Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString());
                                    filaPedidos["SALESQTY"] = Convert.ToDecimal(axdEntity_SalesQuotationTable.SalesQty).ToString();
                                    filaPedidos["SALES ID"] = axdEntity_SalesQuotationTable.SalesId.ToString();
                                    dtPedidos.Rows.Add(filaPedidos);
                                    filaPedidos = null;

                                    articulosLiquidacion = articulosLiquidacion + axdEntity_SalesQuotationTable.ItemId.ToString() + "|";
                                    if (articulosLIQ.IndexOf(Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString())) < 0)
                                        articulosLIQ = articulosLIQ + Convert.ToString(axdEntity_SalesQuotationTable.ItemId.ToString()) + "|" + Convert.ToString(axdEntity_SalesQuotationTable.CreatedDateTime.Value) + ";";
                                }
                            }
                        }
                    }
                }

                dondeVa = "salio RECORRER PEDIDOS";
                 proxy_Pedido.Close();
                dtArticulosLIQ = localizarPreciosArticulos(empresa, "", articulosLIQ, moneda, articulosLIQ, numero, usuario);

                // SI HAY LIQUIDACIONES --> ALBARANES DE ENTREGA
                dondeVa = "albaranes de entrega";
                dec_importeCosteMPO = 0;
                cantidadMPOPositivo = 0;

                if (articulosLiquidacion != "")
                {
                    // SUMAR POR ITEMS LOS QUE TIENEN MÁS DE UNA LIQUIDACIÓN
                    var dataMovimientos = from d in dtTODO.AsEnumerable()
                                            where d.Field<string>("TIPO MOVIMIENTO") == "SALESJOBSITEOUT"
                                            group d by new
                                            {
                                                ITEM = d.Field<string>("ITEM"),
                                            } into grupo
                                            select new
                                            {
                                                item = grupo.Key.ITEM,
                                                Cantidad = grupo.Count()
                                            };

                    dondeVa = "copiar a dtCalculoTax";
                    dtCalculoTax = new DataTable();
                    dtCalculoTax.Columns.Add("ITEM");
                    dtCalculoTax.Columns.Add("CANTIDAD");

                    dondeVa = "copiando a dtCalculoTax";
                    int Van = 0;
                    foreach (var itemMov in dataMovimientos)
                    {
                        dtCalculoTax.Rows.Add(itemMov.item.ToString(), itemMov.Cantidad.ToString());
                        if (Convert.ToInt32(itemMov.Cantidad) > 1)
                        {
                            dtTODO.AsEnumerable().Where(row => row.Field<string>("ITEM") == itemMov.item).CopyToDataTable(dtMovimientosLiquidacion, LoadOption.OverwriteChanges);

                            // inicializar
                            taximetroNoConsumible = 0;
                            taximetroConsumible = 0;
                            precioTaximetroNoConsumible = 0;
                            precioTaximetroConsumible = 0;
                            listaBonificacionesDesde.Clear();
                            listaBonificacionesHasta.Clear();
                            listaBonificacionesValor.Clear();
                            costeSuperficie = 0;
                            taximetroConsumible = 0;
                            calcularPorSuperficie = false;
                            superficie = 0;
                            taximetroNoConsumible = 0;
                            diasDesdeTaxNoConsumible = 0;
                            diasHastaTaxNoConsumible = 0;
                            metersInvoicing = false;
                            productType = "";
                            coeficienteNuevo = 0;
                            coeficienteUsado = 0;
                            tipoArticulo = "";
                            coeficienteUsar = 0;
                            precioTaximetroConsumible = 0;
                            precioTaximetroNoConsumible = 0;

                            // RECPERAR PS
                            precioCoste = 0;
                            if (hayPrecio)
                            {
                                dondeVa = "buscar precio dataset // " + articulos;
                                filaEncontrada = dtArticulos.Select("Articulo = '" + itemMov.item.ToString() + "'");
                                if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(itemMov.item.ToString().ToUpper()) == -1)
                                {
                                    salvarIndicencia(empresa, "FICHA", itemMov.item.ToString(), "No hay PS del artículo.");

                                    imgWarning.Visible = true;
                                    lblMensajeError.Visible = true;
                                    lblMensajeInformacion.Text = "(MOV) No se ha localizado el precio del articulo '" + itemMov.item.ToString() + "'";
                                    //return;
                                }
                                foreach (DataRow filaprecio in filaEncontrada)
                                {
                                    nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                    dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                    if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                        precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                }
                            }

                            // RECUPERAR DATOS PARA EL TAXIMETRO
                            filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + itemMov.item.ToString() + "'");
                            foreach (DataRow filaTax in filaEncontrada)
                            {
                                dondeVa = "ENCONTRO TAX";

                                if (Convert.ToString(filaTax["Concepto"]) == "Coste superficie")
                                {
                                    cambio = Convert.ToDecimal(filaTax["Cambio"]);
                                    costeSuperficie = Convert.ToDecimal(filaTax["Valor"]) * cambio;
                                }
                                if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro consumible")
                                {
                                    taximetroConsumible = Convert.ToDecimal(filaTax["Valor"]) / 100;
                                    listaBonificacionesDesde.Add(Convert.ToInt32(filaTax["Desde"]));
                                    listaBonificacionesHasta.Add(Convert.ToInt32(filaTax["Hasta"]));
                                    listaBonificacionesValor.Add(Convert.ToDecimal(filaTax["Ajuste"]));

                                    if (!String.IsNullOrEmpty(Convert.ToString(filaTax["Valorar"])))
                                        if (Convert.ToString(filaTax["Valorar"]).ToUpper() == "SUPERFICIE")
                                        {
                                            calcularPorSuperficie = true;
                                            superficie = Convert.ToDecimal(filaTax["Superficie"]);
                                        }
                                }

                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje MPO abono TAX")
                                    porcentajeAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);
                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje Máximo MPO abono TAX")
                                    porcentajeMaxAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                                {
                                    taximetroNoConsumible = Convert.ToDecimal(filaTax["Valor"]) / 100;
                                    diasDesdeTaxNoConsumible = Convert.ToInt32(filaTax["Desde"]);
                                    diasHastaTaxNoConsumible = Convert.ToInt32(filaTax["Hasta"]);
                                }
                                metersInvoicing = Convert.ToBoolean(filaTax["MetersInvoicing"]);
                                productType = Convert.ToString(filaTax["ProductTypeName_es"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                    coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                    coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                tipoArticulo = Convert.ToString(filaTax["TipoArticulo"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                                    porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                                if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                                    coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                            }

                            if (tipoArticulo == "NUEVO")
                                coeficienteUsar = coeficienteNuevo;
                            else
                                coeficienteUsar = coeficienteUsado;

                            if (taximetroConsumible == 0)
                            {
                                precioTaximetroNoConsumible = precioCoste;
                            }
                            else
                            {
                                if (calcularPorSuperficie)
                                {
                                    if (!metersInvoicing)
                                    {
                                        precioTaximetroNoConsumible = precioCoste; //(precioCoste - (costeSuperficie * superficie));
                                        precioTaximetroConsumible = 0;
                                    }
                                    else
                                    {
                                        precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                        precioTaximetroConsumible = (costeSuperficie * superficie);
                                    }
                                }
                                else
                                {
                                    precioTaximetroNoConsumible = 0;
                                    precioTaximetroConsumible = precioCoste;
                                }
                            }

                            // recorrer dataset dtMovimientosLiquidacion: calcular días
                            filaEncontrada = dtMovimientosLiquidacion.Select("[TIPO MOVIMIENTO] = '" + "SALESJOBSITEOUT" + "'");
                            foreach (DataRow filaLiquidacion in filaEncontrada)
                            {
                                dondeVa = "creando columnas en dtCalculoTax";
                                Van = Van + 1;

                                DataColumnCollection columns = dtMovimientosLiquidacion.Columns;
                                if (!columns.Contains("FECHA FINAL " + Van.ToString()))
                                {
                                    dtMovimientosLiquidacion.Columns.Add("FECHA FINAL " + Van.ToString(), typeof(DateTime));
                                    dtMovimientosLiquidacion.Columns.Add("DIAS TC " + Van.ToString());
                                    dtMovimientosLiquidacion.Columns.Add("UNIDADES DIAS TC " + Van.ToString());
                                    dtMovimientosLiquidacion.Columns.Add("IMPORTE TC " + Van.ToString(), typeof(string), "");
                                    dtMovimientosLiquidacion.Columns.Add("ABONO TC " + Van.ToString(), typeof(string), "");
                                }

                                fechaFinal = Convert.ToDateTime(filaLiquidacion["FECHA"]);

                                foreach (DataRow fila in dtMovimientosLiquidacion.Rows)
                                {
                                    if ((fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days >= 0)
                                    {
                                        dondeVa = "fecha final";
                                        fila["FECHA FINAL " + Van.ToString()] = fechaFinal;
                                        dondeVa = "calculo dias";
                                        fila["DIAS TC " + Van.ToString()] = (fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days;
                                        duracion = (fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days;
                                        fila["UNIDADES DIAS TC " + Van.ToString()] = ((fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days * Convert.ToDecimal(fila["CANTIDAD"])).ToString("#,##0.00");
                                        totalUnidadesDias = Convert.ToInt32((fechaFinal - Convert.ToDateTime(fila["FECHA"])).Days * Convert.ToDecimal(fila["CANTIDAD"]));
                                        cantidad = Convert.ToDecimal(fila["CANTIDAD"]);

                                        // CALCULAR TAX + ABONO
                                        dondeVa = "Recalcular tax especial y abono";
                                        fila["IMPORTE TC " + Van.ToString()] = ((totalUnidadesDias * precioTaximetroConsumible * taximetroConsumible) / diasxMes).ToString("#,##0.00");

                                        dondeVa = "CALCULAR BONIFICACION";
                                        diasCalculados = 0;
                                        diasMultiplicar = 0;
                                        importeBonificacion = 0;

                                        while (diasCalculados < duracion)
                                        {
                                            dondeVa = "CALCULAR BONIFICACION 3";
                                            for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                            {
                                                dondeVa = "CALCULAR BONIFICACION 4";
                                                if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                                {
                                                    dondeVa = "CALCULAR BONIFICACION 5";
                                                    if (duracion - diasCalculados >= diasxMes)
                                                        diasMultiplicar = diasxMes;
                                                    else
                                                        diasMultiplicar = duracion - diasCalculados;
                                                    dondeVa = "CALCULAR BONIFICACION 6";
                                                    bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);

                                                    dondeVa = "CALCULAR BONIFICACION 9";
                                                    importeBonificacion = importeBonificacion + ((Convert.ToDecimal(cantidad) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                }
                                            }
                                            dondeVa = "CALCULAR BONIFICACION 12";
                                            diasCalculados = diasCalculados + diasxMes;
                                            dondeVa = "CALCULAR BONIFICACION 13";
                                        }
                                        fila["ABONO TC " + Van.ToString()] = importeBonificacion.ToString("#,##0.00");
                                        fila.AcceptChanges();
                                    }
                                    else
                                        break;
                                }
                            }
                        }
                    }
                    dondeVa = "Datos gastos patio";
                    dtGastosPatio = new System.Data.DataTable();
                    dtGastosPatio = gastosPatio(empresa, articulos, fechaPrecios, moneda, usuario);
                    // Buscar estado de los artículos 
                    dondeVa = "Datos estado artículos";
                    dtArticulosLiquidacion = localizarEstadoArticulos(usuario, articulos + articulosLiquidacion + articulosConfiguracion);
                    if (dtArticulosLiquidacion.Columns.Count == 0)
                        dondeVa = "va a petar // " + articulosLiquidacion + " // usuario // " + usuario;
                    else
                    {
                        // Actualizo AAF en el data de pedidos
                        //dondeVa = "Actualizar AAF en dtPedidos";
                        foreach (DataRow filaPedido in dtPedidos.Rows)
                        {
                            filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + filaPedido["ITEM_ID"].ToString() + "'");
                            foreach (DataRow filaAAF in filaEncontrada)
                            {
                                filaPedido["AAF"] = Convert.ToString(filaAAF["AAF"]);
                               break;
                            }
                        }

                        dondeVa = "Datos ws albaranes de entrega";
                        System.Collections.IEnumerator enumerator_AlbaranEntrega_Coste;
                        // CABECERA
                        dondeVa = "contexto_AlbaranEntrega";
                        tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.CallContext();
                        contexto_AlbaranEntrega_Coste.Company = empresa;

                        dondeVa = "criterio";
                        tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.QueryCriteria();
                        criterio_AlbaranEntrega_Coste.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                        //ProjTable_AlbaranEntrega
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].FieldName = "ObraId";
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                        criterio_AlbaranEntrega_Coste.CriteriaElement[0].Value1 = numero;

                        dondeVa = "credenciales";
                        tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.CustPackingServiceClient();
                        proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                        proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                        proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                        dondeVa = "proxy CustPackingSlipTrans";
                        tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking_Coste = proxy_AlbaranEntrega_Coste.find(contexto_AlbaranEntrega_Coste, criterio_AlbaranEntrega_Coste);
                        dondeVa = "validar";
                        if (AxdCustPacking_Coste.CustPackingSlipTrans is null)
                        {
                            proxy_AlbaranEntrega_Coste.Close();
                        }
                        else
                        {
                            dondeVa = "recorrer albaranes";
                            enumerator_AlbaranEntrega_Coste = AxdCustPacking_Coste.CustPackingSlipTrans.GetEnumerator();
                            while (enumerator_AlbaranEntrega_Coste.MoveNext())
                            {
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans AxdEntity_CustPackingSlipTrans = (tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans)enumerator_AlbaranEntrega_Coste.Current;
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipJour[] AxdEntity_CustPackingSlipJours = AxdEntity_CustPackingSlipTrans.CustPackingSlipJour;
                                tablaAlbaranesEntrega.AxdEntity_CustPackingSlipJour AxdEntity_CustPackingSlipJour;

                                salesType = "";
                                if (AxdEntity_CustPackingSlipJours.Length >0 )
                                //for (lineaCapitulo = 0; lineaCapitulo < AxdEntity_CustPackingSlipJours.Length; lineaCapitulo++)
                                {
                                    AxdEntity_CustPackingSlipJour = AxdEntity_CustPackingSlipJours[0];
                                    salesType = AxdEntity_CustPackingSlipJour.SalesType.Value.ToString();
                                    //break;
                                }

                                articulosConfiguracion = articulosConfiguracion + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|";

                                tipoArticulo = "";
                                dondeVa = "recorrer albaranes filaEncontrada";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow filaTipo in filaEncontrada)
                                {
                                    dondeVa = "ajustar datos AAF y tipo de artículo";
                                    tipoArticulo = Convert.ToString(filaTipo["TipoArticulo"]).ToUpper().Trim();
                                    dondeVa = "tipo de artículo: " + tipoArticulo;
                                    AAF = Convert.ToString(filaTipo["AAF"]);
                                    dondeVa = "AAF: " + AAF;
                                    filaAlbaranes = dtAlbaranes.NewRow();
                                    dondeVa = "dtAlbaranes";
                                    dondeVa = "dtAlbaranes fecha: " + Convert.ToString(AxdEntity_CustPackingSlipTrans.DeliveryDate.ToString("yyyyMMdd"));
                                    filaAlbaranes[dtAlbaranes_fecha] = Convert.ToString(AxdEntity_CustPackingSlipTrans.DeliveryDate.ToString("yyyyMMdd"));
                                    dondeVa = "dtAlbaranes 1";
                                    filaAlbaranes[dtAlbaranes_aaf] = AAF;
                                    dondeVa = "dtAlbaranes 2";
                                    filaAlbaranes[dtAlbaranes_itemID] = Convert.ToString(AxdEntity_CustPackingSlipTrans.ItemId.ToString());
                                    dondeVa = "dtAlbaranes 3";
                                    filaAlbaranes[dtAlbaranes_cantidad] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty.ToString());
                                    dondeVa = "dtAlbaranes 4";
                                    filaAlbaranes[dtAlbaranes_estado] = tipoArticulo;
                                    dtAlbaranes.Rows.Add(filaAlbaranes);
                                    filaAlbaranes = null;
                                    break;
                                }

                                entrega = 0;
                                devolucion = 0;
                                naviera = 0;
                                precioGastosPatio = 0;
                                filaEncontrada = dtGastosPatio.Select("ProductId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Entrega"])))
                                        entrega = Convert.ToDecimal(fila["Entrega"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                        devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                        naviera = Convert.ToDecimal(fila["Naviera"]);
                                    precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                }

                                esNaviera = false;
                                filaEncontrada = dtValesTransporte.Select("Albaran = '" + AxdEntity_CustPackingSlipTrans.PackingSlipId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (fila["Tipo transporte"].ToString().Substring(0, 1).ToUpper() == "M" || fila["Tipo transporte"].ToString().Substring(0, 1).ToUpper() == "P")
                                        esNaviera = true;
                                }

                                // GASTOS PATIO VENTA ENTREGA
                                if (salesType == tablaAlbaranesEntrega.AxdEnum_SalesType.Sales.ToString())
                                {
                                    importeGastosPatioEntregaDevolucionVentas = 0;
                                    importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * precioGastosPatio;
                                    if (esNaviera)
                                        importeGastosPatioEntregaDevolucionVentas = importeGastosPatioEntregaDevolucionVentas + (Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * naviera * precioGastosPatio);
                                    importeGastosVariablesEntregaDevolucionVentaCapitulos = importeGastosVariablesEntregaDevolucionVentaCapitulos + importeGastosPatioEntregaDevolucionVentas;

                                    oGastosPatio = dtGastosPatioCargaDescarga.NewRow();
                                    oGastosPatio["ALBARAN"] = AxdEntity_CustPackingSlipTrans.PackingSlipId.ToString();
                                    oGastosPatio["TIPO"] = "VENTA";
                                    oGastosPatio["ITEM"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    oGastosPatio["CANTIDAD"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    oGastosPatio["ENTREGA"] = entrega;
                                    oGastosPatio["DEVOLUCION"] = 0;
                                    if (esNaviera)
                                        oGastosPatio["NAVIERA"] = naviera;
                                    else
                                        oGastosPatio["NAVIERA"] = 0;
                                    oGastosPatio["PRECIO"] = precioGastosPatio;
                                    oGastosPatio["TOTAL"] = importeGastosPatioEntregaDevolucionVentas;
                                    dtGastosPatioCargaDescarga.Rows.Add(oGastosPatio);
                                }
                                // GASTOS PATIO ALQUILER ENTREGA
                                if (salesType == tablaAlbaranesEntrega.AxdEnum_SalesType.Alquiler.ToString())
                                {
                                    importeGastosPatioEntregaDevolucionAlquiler = 0;
                                    importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * precioGastosPatio;

                                    if (esNaviera)
                                        importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty) * entrega * naviera * precioGastosPatio);
                                    importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                   
                                    oGastosPatio = dtGastosPatioCargaDescarga.NewRow();
                                    oGastosPatio["ALBARAN"] = AxdEntity_CustPackingSlipTrans.PackingSlipId.ToString();
                                    oGastosPatio["TIPO"] = "ALQUILER";
                                    oGastosPatio["ITEM"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    oGastosPatio["CANTIDAD"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    oGastosPatio["ENTREGA"] = entrega;
                                    oGastosPatio["DEVOLUCION"] = 0;
                                    if (esNaviera)
                                        oGastosPatio["NAVIERA"] = naviera;
                                    else
                                        oGastosPatio["NAVIERA"] = 0;
                                    oGastosPatio["PRECIO"] = precioGastosPatio;
                                    oGastosPatio["TOTAL"] = importeGastosPatioEntregaDevolucionAlquiler;
                                    dtGastosPatioCargaDescarga.Rows.Add(oGastosPatio);
                                }

                                // tabla para gastos de devolución
                                AAF = "";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow filaAA in filaEncontrada)
                                {
                                    dondeVa = "Datos AAF";
                                    AAF = Convert.ToString(filaAA["AAF"]);
                                }

                                insertar = true;
                                //filaEncontrada = dtDevoluciones.Select("AAF = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                filaEncontrada = dtDevoluciones.Select("AAF = '" + AAF + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (esNaviera)
                                    {
                                        fila["CANTIDAD CON NAVIERA"] = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        fila["CANTIDAD CON NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    }
                                    else
                                    {
                                        fila["CANTIDAD SIN NAVIERA"] = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        fila["CANTIDAD SIN NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    }
                                    fila.AcceptChanges();
                                    insertar = false;
                                    break;
                                }
                                if (insertar)
                                {
                                    oDevoluciones =  dtDevoluciones.NewRow();
                                    oDevoluciones["AAF"] = AAF;
                                    oDevoluciones["ITEM"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    if (esNaviera)
                                    {
                                        oDevoluciones["CANTIDAD CON NAVIERA"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        oDevoluciones["CANTIDAD CON NAVIERA QUEDAN"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        oDevoluciones["CANTIDAD SIN NAVIERA"] = 0;
                                        oDevoluciones["CANTIDAD SIN NAVIERA QUEDAN"] = 0;
                                    }
                                    else
                                    {
                                        oDevoluciones["CANTIDAD CON NAVIERA"] = 0;
                                        oDevoluciones["CANTIDAD CON NAVIERA QUEDAN"] = 0;
                                        oDevoluciones["CANTIDAD SIN NAVIERA"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                        oDevoluciones["CANTIDAD SIN NAVIERA QUEDAN"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty);
                                    }
                                    dtDevoluciones.Rows.Add(oDevoluciones);
                                }
                            }
                         }
                        proxy_AlbaranEntrega_Coste.Close();

                        // APLASTAR DTPEDIDOS POR FECHA / ITEM / AAF
                        // 40006251
                       dondeVa = "aplastar dtPedidos";
                        var dataPedidos = from d in dtPedidos.AsEnumerable()
                                            orderby d.Field<string>("FECHA_CREACION"), d.Field<string>("AAF")
                                            group d by new
                                            {
                                                FECHA_CREACION = d.Field<string>("FECHA_CREACION"),
                                                TIPO = d.Field<string>("TIPO"),
                                                ITEM = d.Field<string>("ITEM_ID"),
                                                CODIGO_AAF = d.Field<string>("AAF"),
                                            } into grupo
                                            select new
                                            {
                                                tipo = grupo.Key.TIPO,
                                                fecha = grupo.Key.FECHA_CREACION,
                                                aaf = grupo.Key.CODIGO_AAF,
                                                articulo = grupo.Key.ITEM,
                                                cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("SALESQTY")))
                                            };

                        dondeVa = "copiar a dtPedidosAgrupado";
                        dtPedidosAgrupado = new System.Data.DataTable();

                        dondeVa = "creando columnas en dtPedidosAgrupado";
                        dtPedidosAgrupado.Columns.Add("TIPO");
                        dtPedidosAgrupado.Columns.Add("FECHA");
                        dtPedidosAgrupado.Columns.Add("AAF");
                        dtPedidosAgrupado.Columns.Add("ARTICULO");
                        dtPedidosAgrupado.Columns.Add("CANTIDAD");
                        dtPedidosAgrupado.Columns.Add("USADO");
                        dtPedidosAgrupado.Columns.Add("MIXTO");
                        dtPedidosAgrupado.Columns.Add("NUEVO");

                        dondeVa = "copiando a dtPedidosAgrupado";
                        foreach (var itemPedidos in dataPedidos)
                            dtPedidosAgrupado.Rows.Add(itemPedidos.tipo.ToString(), itemPedidos.fecha.ToString(), itemPedidos.aaf.ToString(), itemPedidos.articulo.ToString(), itemPedidos.cantidad.ToString(), "0", "0", "0");

                        // APLASTAR DTALBARANES POR FECHA / AAF / TIPO
                        // 40006251
                        dondeVa = "aplastar dtAlbaranes";
                        var dataAlbaranes = from d in dtAlbaranes.AsEnumerable()
                                            orderby d.Field<string>("FECHA"), d.Field<string>("AAF"), d.Field<string>("Estado")
                                            group d by new
                                            {
                                                FECHA_ALBARAN = d.Field<string>("FECHA"),
                                                CODIGO_AAF = d.Field<string>("AAF"),
                                                ESTADO_ARTICULO = d.Field<string>("Estado"),
                                            } into grupo
                                            select new
                                            {
                                                fecha = grupo.Key.FECHA_ALBARAN,
                                                aaf = grupo.Key.CODIGO_AAF,
                                                estado = grupo.Key.ESTADO_ARTICULO,
                                                cantidad = grupo.Sum(x => Convert.ToDecimal(x.Field<string>("QTY")))
                                            };

                        dondeVa = "copiar a dtAlbaranesAgrupado";
                        dtAlbaranesAgrupado = new System.Data.DataTable();

                        dondeVa = "creando columnas en dtAlbaranesAgrupado";
                        dtAlbaranesAgrupado.Columns.Add("FECHA");
                        dtAlbaranesAgrupado.Columns.Add("AAF");
                        dtAlbaranesAgrupado.Columns.Add("CANTIDAD");
                        dtAlbaranesAgrupado.Columns.Add("CANTIDAD_QUEDA");
                        dtAlbaranesAgrupado.Columns.Add("ESTADO");

                        dondeVa = "copiando a dtAlbaranesAgrupado";
                        foreach (var itemAlbaran in dataAlbaranes)
                            dtAlbaranesAgrupado.Rows.Add(itemAlbaran.fecha.ToString(), itemAlbaran.aaf.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.cantidad.ToString(), itemAlbaran.estado.ToString());

                        // DISTRIBUIR DTPEDIDOS NUEVO / MIXTO / USADO
                        dondeVa = "distribuir nuevo / mixto / usado";
                        foreach (DataRow filaPedido in dtPedidosAgrupado.Rows)
                        {
                            // aquí quitando positivos
                            if (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]) >= 0)
                            {
                                faltan = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) - Convert.ToInt32(filaPedido[dtPedidosAgrupados_mixto]) - Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]);

                                // NUEVO
                                if (faltan != 0)
                                {
                                    filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'NUEVO' AND CANTIDAD_QUEDA > '0'");
                                    foreach (DataRow filaCantidad in filaEncontrada)
                                    {
                                        if (faltan > Math.Abs(Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])))
                                        {
                                            filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            filaCantidad["CANTIDAD_QUEDA"] = "0";
                                        }
                                        if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                        {
                                            filaPedido[dtPedidosAgrupados_nuevo] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) + faltan;
                                            filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                            faltan = 0;
                                        }
                                        if (faltan == 0)
                                            break;
                                    }
                                }

                                // MIXTO
                                if (faltan != 0)
                                {
                                    filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'MIXTO' AND CANTIDAD_QUEDA > '0'");
                                    foreach (DataRow filaCantidad in filaEncontrada)
                                    {
                                        if (faltan > Math.Abs(Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])))
                                        {
                                            filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            filaCantidad["CANTIDAD_QUEDA"] = "0";
                                        }
                                        if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                        {
                                            filaPedido[dtPedidosAgrupados_mixto] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) + faltan;
                                            filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                            faltan = 0;
                                        }
                                        if (faltan == 0)
                                            break;
                                    }
                                }

                                // USADO
                                if (faltan != 0)
                                {
                                    filaEncontrada = dtAlbaranesAgrupado.Select("AAF = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "' AND FECHA <= '" + filaPedido[dtPedidosAgrupados_fechaCreacion].ToString() + "' AND ESTADO = 'USADO' AND CANTIDAD_QUEDA > '0'");
                                    foreach (DataRow filaCantidad in filaEncontrada)
                                    {
                                        if (faltan > Math.Abs(Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])))
                                        {
                                            filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            faltan = faltan - Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]);
                                            filaCantidad["CANTIDAD_QUEDA"] = "0";
                                        }
                                        if (faltan <= Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]))
                                        {
                                            filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + faltan;
                                            filaCantidad["CANTIDAD_QUEDA"] = Convert.ToDecimal(filaCantidad["CANTIDAD_QUEDA"]) - faltan;
                                            faltan = 0;
                                        }
                                        if (faltan == 0)
                                            break;
                                    }
                                }

                                // SI QUEDA ALGO POR ASIGNAR ES USADO
                                if (faltan != 0)
                                    filaPedido[dtPedidosAgrupados_usado] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) + faltan;

                                // CALCULO filaPedido[dtPedidosAgrupados_usado] / filaPedido[dtPedidosAgrupados_mixto]  / filaPedido[dtPedidosAgrupados_nuevo]
                                dondeVa = "recuperar coeficiente";
                                coeficienteNuevo = 0;
                                coeficienteUsado = 0;
                                filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "'");
                                foreach (DataRow filaTax in filaEncontrada)
                                {
                                    if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                        coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                    if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                    {
                                        coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                        coeficienteMixto = Convert.ToDecimal(filaTax["Valor"]);
                                    }

                                    if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje MPO abono TAX")
                                        porcentajeAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);
                                    if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje Máximo MPO abono TAX")
                                        porcentajeMaxAbonoTaxMPO = Convert.ToDecimal(filaTax["Valor"]);
                                }

                                precioCoste = 0;
                                dondeVa = "recuperar precio";
                                if (hayPrecio)
                                {
                                    dondeVa = "buscar precio dataset // " + articulos;
                                    filaEncontrada = dtArticulos.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                    if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(filaPedido[dtPedidosAgrupados_articulo].ToString().ToUpper()) == -1)
                                    {
                                        filaEncontrada = dtArticulosLIQ.Select("Articulo = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                        if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(filaPedido[dtPedidosAgrupados_articulo].ToString().ToUpper()) == -1)
                                        {
                                            salvarIndicencia(empresa, "FICHA", filaPedido[dtPedidosAgrupados_articulo].ToString(), "No hay PS del artículo.");

                                            imgWarning.Visible = true;
                                            lblMensajeError.Visible = true;
                                            lblMensajeError.Text = lblMensajeError.Text + "(PED) No se ha localizado el precio del articulo '" + filaPedido[dtPedidosAgrupados_articulo].ToString() + "' //";
                                        }
                                        else
                                        {
                                            foreach (DataRow filaprecio in filaEncontrada)
                                            {
                                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                    precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (DataRow filaprecio in filaEncontrada)
                                        {
                                            nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                            if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                        }
                                    }
                                }

                                dondeVa = "calcular coste MPO";
                                dec_importeCosteMPO = 0;
                                dec_importeCosteLIQ = 0;
                                if (filaPedido[dtPedidosAgrupados_tipo].ToString() == "MPO" || filaPedido[dtPedidosAgrupados_tipo].ToString() == "LIQ")
                                {
                                    if (filaPedido[dtPedidosAgrupados_tipo].ToString() == "MPO")
                                    {
                                        dec_importeCosteMPO = (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                                        dec_importeCosteMPO = dec_importeCosteMPO + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                                        dec_importeCosteMPO = dec_importeCosteMPO + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                                    }

                                    if (filaPedido[dtPedidosAgrupados_tipo].ToString() == "LIQ")
                                    {
                                        dec_importeCosteLIQ = (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                                        dec_importeCosteLIQ = dec_importeCosteLIQ + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                                        dec_importeCosteLIQ = dec_importeCosteLIQ + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                                    }

                                    dec_importeTotalCosteMPOUsado = dec_importeTotalCosteMPOUsado + dec_importeCosteMPO;
                                    dec_importeTotalCosteLIQUsado = dec_importeTotalCosteLIQUsado + dec_importeCosteLIQ;

                                    dondeVa = "calcular cantidad MPO positivo";
                                    cantidadMPOPositivo = dtTax.AsEnumerable()
                                        .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && y.Field<string>("TIPO MOVIMIENTO POSITIVO") == "LOSTJOBSITEOUT" && Convert.ToDecimal(y.Field<decimal>("CANTIDAD")) > 0)
                                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                                    dondeVa = "calcular abono MPO";
                                    if (limitarAbonoTaxMPO && cantidadMPOPositivo == 0)
                                    {
                                        abonoMax1 = 0;
                                        abonoMax2 = 0;
                                        totalTax = 0;
                                        totalBonificacion = 0;
                                        totalCantidadTaxBonificacion = 0;
                                        totalCantidad = 0;
                                        totalCantidadVan = 0;

                                        filaEncontrada = dtAbonoMPO.Select("ITEM = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                        if (filaEncontrada.Count() == 0)
                                        {
                                            filaEncontrada = dtMovimientosLiquidacion.Select("ITEM = '" + filaPedido[dtPedidosAgrupados_aaf].ToString() + "'");
                                            if (filaEncontrada.Count() != 0)
                                            {
                                                foreach (DataRow fila in filaEncontrada)
                                                {
                                                    int columna = 1;
                                                    while (columna <= (dtMovimientosLiquidacion.Columns.Count - 10) / 5)
                                                    {
                                                        dondeVa = "calcular abono MPO tax consumible";
                                                        DateTime fechaMax = Convert.ToDateTime(fila["FECHA FINAL " + columna.ToString()].ToString());

                                                        // TAX CONSUMIBLE
                                                        totalTax = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE TC " + columna.ToString())));

                                                        totalBonificacion = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("ABONO TC " + columna.ToString())));

                                                        dondeVa = "totalCantidadTaxBonificacion";
                                                        totalCantidadTaxBonificacion = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && y.Field<DateTime>("FECHA") <= fechaMax && Convert.ToDecimal(y.Field<string>("CANTIDAD")) > 0)
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("CANTIDAD")));

                                                        dondeVa = "totalCantidad";
                                                        totalCantidad = dtMovimientosLiquidacion.AsEnumerable()
                                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && y.Field<DateTime>("FECHA") == fechaMax && y.Field<string>("TIPO MOVIMIENTO") == "SALESJOBSITEOUT")
                                                            .Sum(x => Convert.ToDecimal(x.Field<string>("CANTIDAD")));

                                                        totalCantidadTaxBonificacion = totalCantidadTaxBonificacion - totalCantidadVan;
                                                        totalCantidadVan = Math.Abs(totalCantidadVan) + Math.Abs(totalCantidad);

                                                        dondeVa = "abonoMax2";
                                                        if (totalCantidadTaxBonificacion != 0)
                                                            abonoMax2 = abonoMax2 + ((((totalTax - totalBonificacion) / totalCantidadTaxBonificacion) * Convert.ToDecimal(totalCantidad)) * porcentajeMaxAbonoTaxMPO) / 100;
                                                        columna = columna + 1;
                                                    }

                                                    dondeVa = "calcular abono 1 y 2";
                                                    abonoMax1 = ((dec_importeCosteMPO + dec_importeCosteLIQ) * porcentajeAbonoTaxMPO) / 100;
                                                    if (abonoMax1 < abonoMax2)
                                                        abonoMPOTC = abonoMPOTC + abonoMax1;
                                                    else
                                                        abonoMPOTC = abonoMPOTC + abonoMax2;

                                                    dondeVa = "calcular incluir datatable";
                                                    oItemAbonoMPO = dtAbonoMPO.NewRow();
                                                    oItemAbonoMPO["ITEM"] = filaPedido[dtPedidosAgrupados_aaf].ToString();
                                                    oItemAbonoMPO["TIPO"] = "CONSUMIBLE";
                                                    oItemAbonoMPO["TAX-ABONO"] = (totalTax + totalBonificacion).ToString("#,##0.00");
                                                    oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                                                    oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                                                    if (abonoMax1 < abonoMax2)
                                                        oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                                                    else
                                                        oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                                                    dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                                                    oItemAbonoMPO = null;

                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                dondeVa = "calcular abono MPO tax consumible";
                                                // TAX CONSUMIBLE
                                                totalTax = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX CONSUMIBLE")));

                                                totalBonificacion = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("BONIFICACION")));

                                                totalCantidadTaxBonificacion = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && (y.Field<decimal>("TAX CONSUMIBLE") >= 0 || y.Field<decimal>("TAX CONSUMIBLE") <= 0))
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                                                dondeVa = "calcular total cantidad tax bonificación";
                                                totalCantidadTaxBonificacion = totalCantidadTaxBonificacion - Math.Abs(cantidadMPOPositivo);

                                                if (totalCantidadTaxBonificacion != 0)
                                                    abonoMax2 = ((((totalTax + totalBonificacion) / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])) * porcentajeMaxAbonoTaxMPO) / 100;

                                                dondeVa = "calcular abono 1 y 2";
                                                abonoMax1 = ((dec_importeCosteMPO + dec_importeCosteLIQ) * porcentajeAbonoTaxMPO) / 100;
                                                if (abonoMax1 < abonoMax2)
                                                    abonoMPOTC = abonoMPOTC + abonoMax1;
                                                else
                                                    abonoMPOTC = abonoMPOTC + abonoMax2;

                                                dondeVa = "calcular incluir datatable";
                                                oItemAbonoMPO = dtAbonoMPO.NewRow();
                                                oItemAbonoMPO["ITEM"] = filaPedido[dtPedidosAgrupados_aaf].ToString();
                                                oItemAbonoMPO["CANTIDAD"] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]).ToString("#,##0");
                                                oItemAbonoMPO["PRECIO"] = precioCoste.ToString("#,##0.00");
                                                oItemAbonoMPO["COEFICIENTE"] = coeficienteUsado.ToString("#,##0.00");
                                                oItemAbonoMPO["TIPO"] = "CONSUMIBLE";
                                                oItemAbonoMPO["TAX-ABONO"] = (totalTax + totalBonificacion).ToString("#,##0.00");
                                                oItemAbonoMPO["CANTIDAD TAX-ABONO"] = totalCantidadTaxBonificacion.ToString("#,##0");
                                                if (totalCantidadTaxBonificacion != 0)
                                                    oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = (((totalTax + totalBonificacion) / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])).ToString("#,##0.00");
                                                else
                                                    oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = "0.00";
                                                oItemAbonoMPO["COSTE MPO"] = (dec_importeCosteMPO + dec_importeCosteLIQ).ToString("#,##0.00");
                                                oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                                                oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                                                if (abonoMax1 < abonoMax2)
                                                    oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                                                else
                                                    oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                                                dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                                                oItemAbonoMPO = null;
                                            }

                                            dondeVa = "calcular abono MPO tax NO consumible";
                                            // TAX NO CONSUMIBLE
                                            abonoMax1 = 0;
                                            abonoMax2 = 0;
                                            totalTax = 0;

                                            totalTax = dtTax.AsEnumerable()
                                            .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString())
                                            .Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX NO CONSUMIBLE")));

                                            totalCantidadTaxBonificacion = dtTax.AsEnumerable()
                                                    .Where(y => y.Field<string>("ITEM") == filaPedido[dtPedidosAgrupados_aaf].ToString() && (y.Field<decimal>("TAX NO CONSUMIBLE") >= 0 || y.Field<decimal>("TAX NO CONSUMIBLE") <= 0))
                                                    .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                                            dondeVa = "calcular total cantidad tax bonificación";
                                            totalCantidadTaxBonificacion = totalCantidadTaxBonificacion - Math.Abs(cantidadMPOPositivo);

                                            if (porcentajeAbonoTaxMPO != 0)
                                                abonoMax1 = ((dec_importeCosteMPO + dec_importeCosteLIQ) * porcentajeAbonoTaxMPO) / 100;
                                            if (totalCantidadTaxBonificacion != 0)
                                                abonoMax2 = (((totalTax / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])) * porcentajeMaxAbonoTaxMPO) / 100;
                                            if (abonoMax1 < abonoMax2)
                                                abonoMPOTNC = abonoMPOTNC + abonoMax1;
                                            else
                                                abonoMPOTNC = abonoMPOTNC + abonoMax2;

                                            oItemAbonoMPO = dtAbonoMPO.NewRow();
                                            oItemAbonoMPO["ITEM"] = filaPedido[dtPedidosAgrupados_aaf].ToString();
                                            oItemAbonoMPO["CANTIDAD"] = Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad]).ToString("#,##0");
                                            oItemAbonoMPO["PRECIO"] = precioCoste.ToString("#,##0.00");
                                            oItemAbonoMPO["COEFICIENTE"] = coeficienteUsado.ToString("#,##0.00");
                                            oItemAbonoMPO["TIPO"] = "NO CONSUMIBLE";
                                            oItemAbonoMPO["TAX-ABONO"] = totalTax.ToString("#,##0.00");
                                            oItemAbonoMPO["CANTIDAD TAX-ABONO"] = totalCantidadTaxBonificacion.ToString("#,##0");
                                            if (totalCantidadTaxBonificacion != 0)
                                                oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = ((totalTax / totalCantidadTaxBonificacion) * Convert.ToDecimal(filaPedido[dtPedidosAgrupados_cantidad])).ToString("#,##0.00");
                                            else
                                                oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = "0.00";
                                            oItemAbonoMPO["COSTE MPO"] = (dec_importeCosteMPO + dec_importeCosteLIQ).ToString("#,##0.00");
                                            oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                                            oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                                            if (abonoMax1 < abonoMax2)
                                                oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                                            else
                                                oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                                            dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                                            oItemAbonoMPO = null;
                                        }
                                    }
                                } // aqui eliminado positivos
                            }
                            else
                            {
                                importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_usado]) * precioCoste * coeficienteUsado);
                                importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_mixto]) * precioCoste * coeficienteMixto);
                                importeCosteVenta = importeCosteVenta + (Convert.ToDecimal(filaPedido[dtPedidosAgrupados_nuevo]) * precioCoste * coeficienteNuevo);
                            }

                        }
                    }
                }
          

                dondeVa = "Datos ws albaranes de entrega";
                System.Collections.IEnumerator enumerator_AlbaranEntrega;
                // CABECERA
                dondeVa = "contexto_AlbaranEntrega";
                tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega = new tablaAlbaranesEntrega.CallContext();
                contexto_AlbaranEntrega.Company = empresa;

                dondeVa = "criterio";
                tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega = new tablaAlbaranesEntrega.QueryCriteria();
                criterio_AlbaranEntrega.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                //ProjTable_AlbaranEntrega
                criterio_AlbaranEntrega.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                criterio_AlbaranEntrega.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                criterio_AlbaranEntrega.CriteriaElement[0].FieldName = "ObraId";
                criterio_AlbaranEntrega.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                criterio_AlbaranEntrega.CriteriaElement[0].Value1 = numero;

                dondeVa = "credenciales";
                tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega = new tablaAlbaranesEntrega.CustPackingServiceClient();
                proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_AlbaranEntrega.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "proxy CustPackingSlipTrans";
                tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking = proxy_AlbaranEntrega.find(contexto_AlbaranEntrega, criterio_AlbaranEntrega);
                datosGenerales = "";
                dondeVa = "validar";
                if (AxdCustPacking.CustPackingSlipTrans is null)
                {
                    proxy_AlbaranEntrega.Close();
                }
                else
                {
                    dondeVa = "recorrer albaranes";
                    enumerator_AlbaranEntrega = AxdCustPacking.CustPackingSlipTrans.GetEnumerator();

                    while (enumerator_AlbaranEntrega.MoveNext())
                    {
                        tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans AxdEntity_CustPackingSlipTrans = (tablaAlbaranesEntrega.AxdEntity_CustPackingSlipTrans)enumerator_AlbaranEntrega.Current;
                        tipoArticulo = "";
                        dondeVa = "recorrer albaranes dtArticulosLiquidacion";
                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                        foreach (DataRow filaTipo in filaEncontrada)
                        {
                            dondeVa = "ajustar datos AAF y tipo de artículo";
                            tipoArticulo = Convert.ToString(filaTipo["TipoArticulo"]).ToUpper().Trim();
                            dondeVa = "Tipo de artículo: " + tipoArticulo;
                            AAF = Convert.ToString(filaTipo["AAF"]);
                            dondeVa = "AAF: " + AAF;

                            precioCoste = 0;
                            filaEncontrada = dtArticulos.Select("Articulo = '" + AAF + "'"); // AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                            foreach (DataRow filaprecio in filaEncontrada)
                            {
                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                    precioCoste = Convert.ToDecimal(filaprecio["Precio"]);
                                break;
                            }

                            if (precioCoste == 0)
                            {
                                dondeVa = "ROP_PreciosArticulos";
                                conexion = new SqlConnection(strConexion);
                                conexion.Open();
                                comando = conexion.CreateCommand();
                                comando.CommandText = "ROP_PreciosArticulos";
                                comando.CommandTimeout = 240000;
                                comando.CommandType = CommandType.StoredProcedure;
                                comando.Parameters.AddWithValue("@empresa", empresa);
                                if (delegacion == "")
                                    comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                else
                                    comando.Parameters.AddWithValue("@delegacion", delegacion);
                                //conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@articulos", AAF + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@moneda", moneda);
                                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@articulosCambio", AAF + "|" + fechaFicha.ToString() + ";");
                                comando.Parameters.AddWithValue("@ficha", numero);
                                comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                comando.Parameters.AddWithValue("@usuario", usuario);
                                dtTabla = new System.Data.DataTable();
                                adaptador = new SqlDataAdapter(comando);
                                adaptador.Fill(dtTabla);
                                adaptador.Dispose();
                                comando.Dispose();
                                conexion.Close();
                                conexion.Dispose();

                                //conexiones.crearConexion();
                                //conexiones.comando = conexiones.conexion.CreateCommand();
                                //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                                //conexiones.comando.CommandTimeout = 240000;
                                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                //if (delegacion == "")
                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                //else
                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                                ////conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@articulos", AAF + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                ////conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AAF + "|" + fechaFicha.ToString() + ";");
                                //conexiones.comando.Parameters.AddWithValue("@ficha", numero);
                                //conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                                //dtTabla = new System.Data.DataTable();
                                //adaptador = new SqlDataAdapter(conexiones.comando);
                                //adaptador.Fill(dtTabla);
                                //adaptador.Dispose();
                                //conexiones.comando.Dispose();
                                //conexiones.conexion.Close();
                                //conexiones.conexion.Dispose();

                                if (dtTabla.Rows.Count > 0)
                                    precioCoste = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[0]["Precio"]));
                            }

                            dondeVa = "tramitar albaranes entrega";
                            insertar = true;
                            coeficienteNuevo = 0;
                            coeficienteUsado = 0;
                            porcentajeBuenTrato = 0;
                            filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                            foreach (DataRow filaTax in filaEncontrada)
                            {
                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                    coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                    coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);

                                if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                                    porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                                if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                                    coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                            }
                            if (porcentajeBuenTrato > 0)
                            {
                                insertar = true;
                                filaEncontrada = dtBuenTrato.Select("[Item entregadas] = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (tipoArticulo == "NUEVO")
                                        fila["Unidades nuevo entregado"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                    else
                                        fila["Unidades usado entregado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();

                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        fila["Unidades alquiler"] = (Convert.ToDecimal(fila["Unidades alquiler"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        break;
                                    }
                                    fila.AcceptChanges();
                                    insertar = false;
                                }
                                if (insertar)
                                {
                                    AAF = "";
                                    filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                    foreach (DataRow filaAA in filaEncontrada)
                                    {
                                        dondeVa = "Datos AAF";
                                        AAF = Convert.ToString(filaAA["AAF"]);
                                    }

                                    if (!listaArticulosBuenTrato.Contains(AAF))
                                        listaArticulosBuenTrato.Add(AAF);

                                    oItemBuenTrato = dtBuenTrato.NewRow();
                                    oItemBuenTrato["Item entregadas"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    if (tipoArticulo == "NUEVO")
                                        oItemBuenTrato["Unidades nuevo entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    else
                                        oItemBuenTrato["Unidades usado entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion nuevo entregado"] = coeficienteNuevo.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion usado entregado"] = coeficienteUsado.ToString("#,##0.00");
                                    oItemBuenTrato["AAF"] = AAF;
                                    oItemBuenTrato["Unidades alquiler"] = "0";
                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        oItemBuenTrato["Unidades alquiler"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty).ToString();
                                        break;
                                    }
                                    dtBuenTrato.Rows.Add(oItemBuenTrato);
                                    oItemBuenTrato = null;
                                }
                            }
                            else
                            {
                                // CHATARRA
                                insertar = true;
                                filaEncontrada = dtChatarra.Select("[Item entregadas] = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (tipoArticulo == "NUEVO")
                                    {
                                        fila["Unidades nuevo entregado"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        fila["Unidades entregadas nuevo"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                    }
                                    else
                                    {
                                        fila["Unidades usado entregado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        fila["Unidades entregadas usado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                    }
                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        fila["Unidades alquiler"] = (Convert.ToDecimal(fila["Unidades alquiler"]) + Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty)).ToString();
                                        break;
                                    }
                                    fila.AcceptChanges();
                                    insertar = false;
                                }
                                if (insertar)
                                {
                                    AAF = "";
                                    filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_CustPackingSlipTrans.ItemId.ToString() + "'");
                                    foreach (DataRow filaAA in filaEncontrada)
                                    {
                                        dondeVa = "Datos AAF";
                                        AAF = Convert.ToString(filaAA["AAF"]);
                                    }

                                    oItemBuenTrato = dtChatarra.NewRow();
                                    oItemBuenTrato["Item entregadas"] = AxdEntity_CustPackingSlipTrans.ItemId.ToString();
                                    if (tipoArticulo == "NUEVO")
                                    {
                                        oItemBuenTrato["Unidades nuevo entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                        oItemBuenTrato["Unidades entregadas nuevo"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    }
                                    else
                                    {
                                        oItemBuenTrato["Unidades usado entregado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                        oItemBuenTrato["Unidades entregadas usado"] = AxdEntity_CustPackingSlipTrans.Qty.ToString();
                                    }
                                    oItemBuenTrato["PS entregado"] = precioCoste.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion nuevo entregado"] = coeficienteNuevo.ToString("#,##0.00");
                                    oItemBuenTrato["Correccion usado entregado"] = coeficienteUsado.ToString("#,##0.00");
                                    oItemBuenTrato["AAF"] = AAF;
                                    oItemBuenTrato["Unidades alquiler"] = "0";
                                    filaEncontradaVenta = dtPedidosAlquiler.Select("[Numero] = '" + AxdEntity_CustPackingSlipTrans.SalesId.ToString() + "'");
                                    foreach (DataRow filaVenta in filaEncontradaVenta)
                                    {
                                        oItemBuenTrato["Unidades alquiler"] = Convert.ToDecimal(AxdEntity_CustPackingSlipTrans.Qty).ToString();
                                        break;
                                    }
                                    dtChatarra.Rows.Add(oItemBuenTrato);
                                    oItemBuenTrato = null;
                                }
                            }
                            break;
                        }
                    }
                }
                proxy_AlbaranEntrega.Close();

                // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                dtDatosConfiguracion = new System.Data.DataTable();
                horaDatosConfigurados_3 = DateTime.Now;
                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosConfiguracion";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@empresa", empresa);
                comando.Parameters.AddWithValue("@usuario", "diana"); // Environment.UserName);
                if (cmbVersion.SelectedValue == "")
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                    comando.Parameters.AddWithValue("@CFG_ID", null);
                else
                    comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                comando.Parameters.AddWithValue("@fecha", fechaFicha);
                comando.Parameters.AddWithValue("@moneda", moneda);
                comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                adaptadorDatosConfiguracion.Dispose();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosConfiguracion";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                //conexiones.comando.Parameters.AddWithValue("@usuario", "diana"); // Environment.UserName);
                //if (cmbVersion.SelectedValue == "")
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", null);
                //else
                //    conexiones.comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                //conexiones.comando.Parameters.AddWithValue("@fecha", fechaFicha);
                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                //conexiones.comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                //adaptadorDatosConfiguracion = new SqlDataAdapter(conexiones.comando);
                //adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                //adaptadorDatosConfiguracion.Dispose();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();
                horaDatosConfigurados_4 = DateTime.Now.Subtract(horaDatosConfigurados_3);

                //dtArticulosLiquidacion = localizarEstadoArticulos(usuario, "");

                // FACTURACION
                dondeVa = "Facturación cabecera WS";
                System.Collections.IEnumerator enumerator_facturas;

                // CABECERA
                tablaCabeceraFacturas.CallContext contexto_facturasCabecera = new tablaCabeceraFacturas.CallContext();
                contexto_facturasCabecera.Company = empresa;

                tablaCabeceraFacturas.QueryCriteria criterio_facturasCabecera = new tablaCabeceraFacturas.QueryCriteria();
                criterio_facturasCabecera.CriteriaElement = new tablaCabeceraFacturas.CriteriaElement[1];

                criterio_facturasCabecera.CriteriaElement[0] = new tablaCabeceraFacturas.CriteriaElement();
                criterio_facturasCabecera.CriteriaElement[0].DataSourceName = "CustInvoiceJour";
                criterio_facturasCabecera.CriteriaElement[0].FieldName = "ObraId";
                criterio_facturasCabecera.CriteriaElement[0].Operator = tablaCabeceraFacturas.Operator.Equal;
                criterio_facturasCabecera.CriteriaElement[0].Value1 = numero;

                tablaCabeceraFacturas.DiarioFacturasServiceClient proxy_facturasCabacera = new tablaCabeceraFacturas.DiarioFacturasServiceClient();
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "Facturación WS proxy";
                tablaCabeceraFacturas.AxdDiarioFacturas axdtablaCabeceraFacturas_1 = proxy_facturasCabacera.find(contexto_facturasCabecera, criterio_facturasCabecera);
                if (axdtablaCabeceraFacturas_1.CustInvoiceJour is null)
                {
                    proxy_facturasCabacera.Close();
                }
                else
                {
                    enumerator_facturas = axdtablaCabeceraFacturas_1.CustInvoiceJour.GetEnumerator();
                    while (enumerator_facturas.MoveNext())
                    {
                        tablaCabeceraFacturas.AxdEntity_CustInvoiceJour AxdEntity_CustInvoiceTrans = (tablaCabeceraFacturas.AxdEntity_CustInvoiceJour)enumerator_facturas.Current;
                        if (AxdEntity_CustInvoiceTrans.RentCanon.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_RentCanon.Canon.ToString().ToUpper() || AxdEntity_CustInvoiceTrans.RentCanon.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_RentCanon.CanonFenolico.ToString().ToUpper())
                        {
                            oItemFacturaCanon = dtFacturasCanon.NewRow();
                            oItemFacturaCanon["TIPO"] = AxdEntity_CustInvoiceTrans.RentCanon.ToString().ToUpper();
                            oItemFacturaCanon["FACTURA"] = AxdEntity_CustInvoiceTrans.InvoiceId.ToString();
                            if (AxdEntity_CustInvoiceTrans.InvoiceAmount is null)
                                oItemFacturaCanon["IMPORTE"] = 0;
                            else
                                oItemFacturaCanon["IMPORTE"] = AxdEntity_CustInvoiceTrans.InvoiceAmount;
                            dtFacturasCanon.Rows.Add(oItemFacturaCanon);
                        }
                        else
                        {
                            if (AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper())
                            {
                                oItemFacturaCanon = dtFacturasCanon.NewRow();
                                oItemFacturaCanon["TIPO"] = AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper();
                                oItemFacturaCanon["FACTURA"] = AxdEntity_CustInvoiceTrans.InvoiceId.ToString();
                                if (AxdEntity_CustInvoiceTrans.InvoiceAmount is null)
                                    oItemFacturaCanon["IMPORTE"] = 0;
                                else
                                    oItemFacturaCanon["IMPORTE"] = AxdEntity_CustInvoiceTrans.InvoiceAmount;
                                dtFacturasCanon.Rows.Add(oItemFacturaCanon);
                            }
                            // Es liquidación
                            if (AxdEntity_CustInvoiceTrans.RentInvoicePrintType.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_RentInvoicePrintType.Beam.ToString().ToUpper())
                            {
                                oItemFacturaCanon = dtFacturasCanon.NewRow();
                                oItemFacturaCanon["TIPO"] = tablaCabeceraFacturas.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper();
                                oItemFacturaCanon["FACTURA"] = AxdEntity_CustInvoiceTrans.InvoiceId.ToString();
                                if (AxdEntity_CustInvoiceTrans.InvoiceAmount is null)
                                    oItemFacturaCanon["IMPORTE"] = 0;
                                else
                                    oItemFacturaCanon["IMPORTE"] = AxdEntity_CustInvoiceTrans.InvoiceAmount;
                                dtFacturasCanon.Rows.Add(oItemFacturaCanon);
                            }
                        }
                    }
                }
                proxy_facturasCabacera.Close();

                // LINEAS
                tablaLineasFacturas.CallContext contexto_facturas = new tablaLineasFacturas.CallContext();
                contexto_facturas.Company = empresa;

                tablaLineasFacturas.QueryCriteria criterio_facturas = new tablaLineasFacturas.QueryCriteria();
                criterio_facturas.CriteriaElement = new tablaLineasFacturas.CriteriaElement[1];

                criterio_facturas.CriteriaElement[0] = new tablaLineasFacturas.CriteriaElement();
                criterio_facturas.CriteriaElement[0].DataSourceName = "CustInvoiceTrans";
                criterio_facturas.CriteriaElement[0].FieldName = "ObraId";
                criterio_facturas.CriteriaElement[0].Operator = tablaLineasFacturas.Operator.Equal;
                criterio_facturas.CriteriaElement[0].Value1 = numero;

                tablaLineasFacturas.LineasFacturasServiceClient proxy_facturas = new tablaLineasFacturas.LineasFacturasServiceClient();
                proxy_facturas.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_facturas.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_facturas.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                tablaLineasFacturas.AxdLineasFacturas axdtablaFacturas_1 = proxy_facturas.find(contexto_facturas, criterio_facturas);

                if (axdtablaFacturas_1.CustInvoiceTrans is null)
                {
                    proxy_facturas.Close();
                }
                else
                {
                    dondeVa = "Enumerator Facturación";
                    enumerator_facturas = axdtablaFacturas_1.CustInvoiceTrans.GetEnumerator();
                    dondeVa = "MoveNext Facturación";
                     while (enumerator_facturas.MoveNext())
                    {
                        dondeVa = "Current Facturación";
                        tablaLineasFacturas.AxdEntity_CustInvoiceTrans AxdEntity_CustInvoiceTrans = (tablaLineasFacturas.AxdEntity_CustInvoiceTrans)enumerator_facturas.Current;

                        esCanon = false;
                        esCanonFenolico = false;
                        esLiquidacion=false;
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "' AND TIPO = '" + tablaCabeceraFacturas.AxdEnum_RentCanon.Canon.ToString().ToUpper() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            esCanon = true;
                            break;
                        }
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "' AND TIPO = '" + tablaCabeceraFacturas.AxdEnum_RentCanon.CanonFenolico.ToString().ToUpper() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            esCanonFenolico = true;
                            break;
                        }
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "' AND TIPO = '" + tablaCabeceraFacturas.AxdEnum_TiposVentas.Liquidacion.ToString().ToUpper() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            esLiquidacion = true;
                            break;
                        }

                        tipoServicio = "";
                        productType = "";
                        tipoArticulo = "";

                        filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AxdEntity_CustInvoiceTrans.ItemId.ToString() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            dondeVa = "encontró configuracion dataset // " + AxdEntity_CustInvoiceTrans.ItemId.ToString() + " // ";

                            dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                            if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                            dondeVa = "encontró configuracion dataset // Tipo producto";
                            productType = Convert.ToString(fila["ProductTypeName_es"]);
                            dondeVa = "encontró configuracion dataset // Tipo artículo";
                            tipoArticulo = Convert.ToString(fila["TipoArticulo"]);
                            break;
                        }

                        oItemGastosFijos = dtGastosFijos.NewRow();
                        oItemGastosFijos["ITEM"] = AxdEntity_CustInvoiceTrans.ItemId.ToString().ToUpper();
                        oItemGastosFijos["TIPO"] = AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper();
                        oItemGastosFijos["IMPORTE TOTAL"] = 0;
                        filaEncontrada = dtFacturasCanon.Select("FACTURA = '" + AxdEntity_CustInvoiceTrans.InvoiceId.ToString() + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            oItemGastosFijos["IMPORTE TOTAL"] = Convert.ToDecimal(fila["IMPORTE"]);
                            break;
                        }
                        oItemGastosFijos["IMPORTE"] = Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                        dtGastosFijos.Rows.Add(oItemGastosFijos);

                        //if (AxdEntity_CustInvoiceTrans.TipoVenta.ToString().ToUpper() == tablaCabeceraFacturas.AxdEnum_SalesType.Alquiler.ToString().ToUpper())
                        //{
                        //    // facturacion alquiler
                        //}
                        //else
                        //{
                        if (codigosTransporte.IndexOf(AxdEntity_CustInvoiceTrans.ItemId.ToString().ToUpper()) >= 0)
                                importePorte_TR001 = importePorte_TR001 + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                            else
                            {
                                if (esCanon)
                                    importeFacturacionVentaUneCif = importeFacturacionVentaUneCif + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                else if (esCanonFenolico)
                                    importeFacturacionVentFenolicoNuevo = importeFacturacionVentFenolicoNuevo + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                else
                                {
                                    if (AxdEntity_CustInvoiceTrans.SalesType == tablaLineasFacturas.AxdEnum_SalesType.Alquiler)
                                        importeFacturacionAlquiler = importeFacturacionAlquiler + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    else
                                    {
                                    if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                        importeFacturacionVentaDepartamentoTecnico = importeFacturacionVentaDepartamentoTecnico + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    else if (tipoServicio.ToUpper() == "MONTAJES")
                                        importeFacturacionVentaMontajes = importeFacturacionVentaMontajes + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    else
                                    {
                                        if (productType.Trim().ToUpper() != "SERVICIO")
                                        {
                                            if (esLiquidacion)
                                                importeFacturacionVentaLiquidacion = importeFacturacionVentaLiquidacion + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                            else
                                                importeFacturacionVentaProducto = importeFacturacionVentaProducto + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                        }
                                        else
                                            importeFacturacionVentaOtrosServicios = importeFacturacionVentaOtrosServicios + Convert.ToDecimal(AxdEntity_CustInvoiceTrans.LineAmount);
                                    }
                                }
                            }
                        }
                        //}
                    }
                }
                proxy_facturas.Close();

                // HOJAS DE TRABAJO: BUEN TRATO TABLERO
                // 0: None  Usado
                // 1: Repair  Usado
                // 2: BadItem  Chatarra
                // 3: New  Nuevo
                // 4: Seminew  Mal estado
                // Para buen trato tablero Mal estado = Chatarra para la familia 001
                // Para abono buen trato tablero Mal estado != Chatarra
                if (fichaCerrada)
                {
                    dondeVa = "Hojas de trabajo: llamar WS";
                    System.Collections.IEnumerator enumerator_HojasTrabajoLineas;
                    tablaHojasTrabajoLineas.CallContext contexto_HojasTrabajoLineas = new tablaHojasTrabajoLineas.CallContext();
                    contexto_HojasTrabajoLineas.Company = empresa;

                    tablaHojasTrabajoLineas.QueryCriteria criterio_HojasTrabajoLineas = new tablaHojasTrabajoLineas.QueryCriteria();
                    criterio_HojasTrabajoLineas.CriteriaElement = new tablaHojasTrabajoLineas.CriteriaElement[1];

                    criterio_HojasTrabajoLineas.CriteriaElement[0] = new tablaHojasTrabajoLineas.CriteriaElement();
                    criterio_HojasTrabajoLineas.CriteriaElement[0].DataSourceName = "WorkPaperPaletTable";
                    criterio_HojasTrabajoLineas.CriteriaElement[0].FieldName = "ObraId";
                    criterio_HojasTrabajoLineas.CriteriaElement[0].Operator = tablaHojasTrabajoLineas.Operator.Equal;
                    criterio_HojasTrabajoLineas.CriteriaElement[0].Value1 = numero;

                    tablaHojasTrabajoLineas.WorkPaperLinesServiceClient proxy_HojasTrabajoLineas = new tablaHojasTrabajoLineas.WorkPaperLinesServiceClient();
                    proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                    proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                    proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                    dondeVa = "Hojas de trabajo: proxy";
                    tablaHojasTrabajoLineas.AxdWorkPaperLines axdtablaHojasTrabajoLineas_1 = proxy_HojasTrabajoLineas.find(contexto_HojasTrabajoLineas, criterio_HojasTrabajoLineas);

                    if (!axdtablaHojasTrabajoLineas_1.WorkPaperPaletTable.Equals(null))
                    {
                        dondeVa = "Hojas de trabajo procesar";

                        enumerator_HojasTrabajoLineas = axdtablaHojasTrabajoLineas_1.WorkPaperPaletTable.GetEnumerator();
                        while (enumerator_HojasTrabajoLineas.MoveNext())
                        {
                            tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletTable AxdEntity_WorkPaperPaletTable = (tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletTable)enumerator_HojasTrabajoLineas.Current;
                            tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletLines[] AxdEntity_WorkPaperPaletLines = AxdEntity_WorkPaperPaletTable.WorkPaperPaletLines;
                            tablaHojasTrabajoLineas.AxdEntity_WorkPaperPaletLines AxdEntity_WorkPaperPaletLine;

                            PlannedHours = 0;
                            RealHours = 0;
                            if (AxdEntity_WorkPaperPaletTable.OprId.ToString() == "122" || AxdEntity_WorkPaperPaletTable.OprId.ToString() == "522")
                            {
                                PlannedHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.TheoreticalHours);
                                RealHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.RealHours);
                            }
                            if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Classify.ToString().ToUpper() && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "122" && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "522")
                            {
                                PlannedHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.TheoreticalHours);
                                RealHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.RealHours);
                            }
                            if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Repair.ToString().ToUpper())
                            {
                                PlannedHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.TheoreticalHours);
                                RealHours = Convert.ToDecimal(AxdEntity_WorkPaperPaletTable.RealHours);
                            }

                            for (linea = 0; linea < AxdEntity_WorkPaperPaletLines.Length; linea++)
                            {
                                AxdEntity_WorkPaperPaletLine = AxdEntity_WorkPaperPaletLines[linea];

                                precioGastosPatio = 0;
                                clasificarRepararDirecto = 0;
                                clasificarRepararIndirecto = 0;
                                clasificarDirecto = 0;
                                clasificarIndirecto = 0;
                                repararDirecto = 0;
                                repararIndirecto = 0;
                                devolucion = 0;
                                naviera = 0;
                                filaEncontrada = dtGastosPatio.Select("ProductId = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                        devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                        naviera = Convert.ToDecimal(fila["Naviera"]);

                                    if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarReparar"])))
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararDirecto"])))
                                            clasificarRepararDirecto = Convert.ToDecimal(fila["ClasificarRepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararIndirecto"])))
                                            clasificarRepararIndirecto = Convert.ToDecimal(fila["ClasificarRepararIndirecto"]);
                                    }
                                    else
                                    {
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarDirecto"])))
                                            clasificarDirecto = Convert.ToDecimal(fila["ClasificarDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarIndirecto"])))
                                            clasificarIndirecto = Convert.ToDecimal(fila["ClasificarIndirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararDirecto"])))
                                            repararDirecto = Convert.ToDecimal(fila["RepararDirecto"]);
                                        if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararIndirecto"])))
                                            repararIndirecto = Convert.ToDecimal(fila["RepararIndirecto"]);
                                    }
                                    precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                }

                                // GASTOS DEVOLUCIONES
                                AAF = "";
                                filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                foreach (DataRow filaAA in filaEncontrada)
                                {
                                    dondeVa = "Datos AAF";
                                    AAF = Convert.ToString(filaAA["AAF"]);
                                }

                                cantidad = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty);
                                //filaEncontrada = dtDevoluciones.Select("ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                filaEncontrada = dtDevoluciones.Select("AAF = '" + AAF + "'");
                                foreach (DataRow fila in filaEncontrada)
                                {
                                    if (Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) > 0)
                                    {
                                        if (Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) >= cantidad)
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = cantidad * devolucion * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (cantidad * devolucion * naviera * precioGastosPatio);
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            fila["CANTIDAD CON NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) - cantidad;
                                            cantidad = 0;
                                        }
                                        else
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) * devolucion * precioGastosPatio;
                                            importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]) * devolucion * naviera * precioGastosPatio);
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            cantidad = cantidad - Convert.ToDecimal(fila["CANTIDAD CON NAVIERA QUEDAN"]);
                                            fila["CANTIDAD CON NAVIERA QUEDAN"] = 0;
                                        }
                                        fila.AcceptChanges();

                                        if (cantidad > 0)
                                            break;
                                    }

                                    if (Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) > 0)
                                    {
                                        if (Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) >= cantidad)
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = cantidad * devolucion * precioGastosPatio;
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            fila["CANTIDAD SIN NAVIERA QUEDAN"] = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) - cantidad;
                                            cantidad = 0;
                                        }
                                        else
                                        {
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]) * devolucion * precioGastosPatio;
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;
                                            cantidad = cantidad - Convert.ToDecimal(fila["CANTIDAD SIN NAVIERA QUEDAN"]);
                                            fila["CANTIDAD SIN NAVIERA QUEDAN"] = 0;
                                        }
                                        fila.AcceptChanges();

                                        if (cantidad > 0)
                                            break;
                                    }
                                }

                                // GASTOS PATIO CLASIFICAR + REPARAR
                                if (AxdEntity_WorkPaperPaletTable.OprId.ToString() == "122" || AxdEntity_WorkPaperPaletTable.OprId.ToString() == "522")
                                {
                                    insertar = true;
                                    filaEncontrada = dtGastosPatioCalculo.Select("TIPO = 'CLASIFICAR + REPARAR' AND [HOJA TRABAJO] = '" + AxdEntity_WorkPaperPaletTable.WorkPaperPaletId.ToString().ToUpper() + "' AND ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        if (PlannedHours != 0)
                                            fila["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            fila["RATIO"] = 0;
                                        fila["PLANNED HOURS ITEM"] = (Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours));
                                        fila["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) * Convert.ToDecimal(fila["RATIO"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * clasificarIndirecto * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila.AcceptChanges();
                                        insertar = false;
                                        break;
                                    }

                                    if (insertar)
                                    {
                                        oGastosPatio = dtGastosPatioCalculo.NewRow();
                                        oGastosPatio["HOJA TRABAJO"] = AxdEntity_WorkPaperPaletTable.WorkPaperPaletId;
                                        oGastosPatio["TIPO"] = "CLASIFICAR + REPARAR";
                                        oGastosPatio["PLANNED HOURS HT"] = PlannedHours;
                                        oGastosPatio["REAL HOURS HT"] = RealHours;
                                        if (PlannedHours != 0)
                                            oGastosPatio["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            oGastosPatio["RATIO"] = 0;
                                        oGastosPatio["ITEM"] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        oGastosPatio["PLANNED HOURS ITEM"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours);
                                        oGastosPatio["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * Convert.ToDecimal(oGastosPatio["RATIO"]);
                                        oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"] = precioGastosPatio;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(oGastosPatio["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * clasificarIndirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR"] = 0;
                                        oGastosPatio["TOTAL REPARAR INDIRECTO"] = 0;
                                        dtGastosPatioCalculo.Rows.Add(oGastosPatio);
                                    }
                                }

                                // GASTOS PATIO CLASIFICAR
                                if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Classify.ToString().ToUpper() && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "122" && AxdEntity_WorkPaperPaletTable.OprId.ToString() != "522")
                                {
                                    insertar = true;
                                    filaEncontrada = dtGastosPatioCalculo.Select("TIPO = 'CLASIFICAR' AND [HOJA TRABAJO] = '" + AxdEntity_WorkPaperPaletTable.WorkPaperPaletId.ToString().ToUpper() + "' AND ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        if (PlannedHours != 0)
                                            fila["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            fila["RATIO"] = 0;
                                        fila["PLANNED HOURS ITEM"] = (Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours));
                                        fila["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["PLANNED HOURS ITEM"]) * Convert.ToDecimal(fila["RATIO"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * clasificarIndirecto * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(fila["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(fila["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        fila.AcceptChanges();
                                        insertar = false;
                                        break;
                                    }

                                    if (insertar)
                                    {
                                        oGastosPatio = dtGastosPatioCalculo.NewRow();
                                        oGastosPatio["HOJA TRABAJO"] = AxdEntity_WorkPaperPaletTable.WorkPaperPaletId;
                                        oGastosPatio["TIPO"] = "CLASIFICAR";
                                        oGastosPatio["PLANNED HOURS HT"] = PlannedHours;
                                        oGastosPatio["REAL HOURS HT"] = RealHours;
                                        if (PlannedHours != 0)
                                            oGastosPatio["RATIO"] = (RealHours / PlannedHours);
                                        else
                                            oGastosPatio["RATIO"] = 0;
                                        oGastosPatio["ITEM"] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        oGastosPatio["PLANNED HOURS ITEM"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours);
                                        oGastosPatio["HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * Convert.ToDecimal(oGastosPatio["RATIO"]);
                                        oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"] = precioGastosPatio;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR"] = Convert.ToDecimal(oGastosPatio["HORAS CLASIFICAR REPARAR"]) * Convert.ToDecimal(oGastosPatio["PRECIO HORAS CLASIFICAR REPARAR"]);
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.TheoreticalHours) * clasificarIndirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR"] = 0;
                                        oGastosPatio["TOTAL REPARAR INDIRECTO"] = 0; 
                                        dtGastosPatioCalculo.Rows.Add(oGastosPatio);
                                    }
                                }

                                // GASTOS PATIO REPARAR
                                if (AxdEntity_WorkPaperPaletTable.WorkRegisterType.ToString().ToUpper() == tablaHojasTrabajoLineas.AxdEnum_WorkRegisterType.Repair.ToString().ToUpper())
                                {
                                    insertar = true;
                                    filaEncontrada = dtGastosPatioCalculo.Select("TIPO = 'REPARAR' AND [HOJA TRABAJO] = '" + AxdEntity_WorkPaperPaletTable.WorkPaperPaletId.ToString().ToUpper() + "' AND ITEM = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow fila in filaEncontrada)
                                    {
                                        fila["CANTIDAD REPARAR"] = Convert.ToDecimal(fila["CANTIDAD REPARAR"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty);
                                        fila["TOTAL REPARAR"] = (Convert.ToDecimal(fila["CANTIDAD REPARAR"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty)) * repararDirecto * precioGastosPatio;
                                        fila["TOTAL REPARAR INDIRECTO"] = (Convert.ToDecimal(fila["CANTIDAD REPARAR"]) + Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty)) * repararIndirecto * precioGastosPatio;
                                        fila.AcceptChanges();
                                        insertar = false;
                                        break;
                                    }

                                    if (insertar)
                                    {
                                        oGastosPatio = dtGastosPatioCalculo.NewRow();
                                        oGastosPatio["HOJA TRABAJO"] = AxdEntity_WorkPaperPaletTable.WorkPaperPaletId;
                                        oGastosPatio["TIPO"] = "REPARAR";
                                        oGastosPatio["ITEM"] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        oGastosPatio["CANTIDAD REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty);
                                        oGastosPatio["PRECIO REPARAR"] = precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty) * repararDirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL REPARAR INDIRECTO"] = Convert.ToDecimal(AxdEntity_WorkPaperPaletLine.Qty) * repararIndirecto * precioGastosPatio;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR"] = 0;
                                        oGastosPatio["TOTAL HORAS CLASIFICAR REPARAR INDIRECTO"] = 0;
                                        dtGastosPatioCalculo.Rows.Add(oGastosPatio);
                                    }
                                }

                                if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.None || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Repair || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                {
                                    coeficienteNuevo = 0;
                                    coeficienteUsado = 0;
                                    porcentajeBuenTrato = 0;
                                    coeficienteBuenTrato = 0;
                                    filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                    foreach (DataRow filaTax in filaEncontrada)
                                    {
                                        if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                                            porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;
                                        if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                                            coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                                    }

                                    if (porcentajeBuenTrato > 0)
                                    {
                                        itemBuenTrato = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                        {
                                            dondeVa = "ROP_Producto";
                                            conexion = new SqlConnection(strConexion);
                                            conexion.Open();
                                            comando = conexion.CreateCommand();
                                            comando.CommandText = "ROP_Producto";
                                            comando.CommandTimeout = 240000;
                                            comando.CommandType = CommandType.StoredProcedure;
                                            comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                                comando.Parameters.AddWithValue("@tipo", 1);
                                            else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                comando.Parameters.AddWithValue("@tipo", 2);
                                            dtTabla = new System.Data.DataTable();
                                            adaptador = new SqlDataAdapter(comando);
                                            adaptador.Fill(dtTabla);
                                            adaptador.Dispose();
                                            comando.Dispose();
                                            conexion.Close();
                                            conexion.Dispose();
                                            //conexiones.crearConexion();
                                            //conexiones.comando = conexiones.conexion.CreateCommand();
                                            //conexiones.comando.CommandText = "ROP_Producto";
                                            //conexiones.comando.CommandTimeout = 240000;
                                            //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                            //conexiones.comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 1);
                                            //else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 2);
                                            //dtTabla = new System.Data.DataTable();
                                            //adaptador = new SqlDataAdapter(conexiones.comando);
                                            //adaptador.Fill(dtTabla);
                                            //adaptador.Dispose();
                                            //conexiones.comando.Dispose();
                                            //conexiones.conexion.Close();
                                            //conexiones.conexion.Dispose();

                                            if (dtTabla.Rows.Count > 0)
                                                itemBuenTrato = Convert.ToString(dtTabla.Rows[0]["ItemId"]);
                                        }

                                        precioHT = 0;
                                        filaEncontrada = dtArticulos.Select("Articulo = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                        foreach (DataRow filaprecio in filaEncontrada)
                                        {
                                            nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                            dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                            if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                precioHT = Convert.ToDecimal(filaprecio["Precio"]);
                                            break;
                                        }

                                        if (precioHT == 0)
                                        {
                                            dondeVa = "ROP_PreciosArticulos (3)";
                                            conexion = new SqlConnection(strConexion);
                                            conexion.Open();
                                            comando = conexion.CreateCommand();
                                            comando.CommandText = "ROP_PreciosArticulos";
                                            comando.CommandTimeout = 240000;
                                            comando.CommandType = CommandType.StoredProcedure;
                                            comando.Parameters.AddWithValue("@empresa", empresa);
                                            if (delegacion == "")
                                                comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                            else
                                                comando.Parameters.AddWithValue("@delegacion", delegacion);
                                            comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            comando.Parameters.AddWithValue("@moneda", moneda);
                                            comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            comando.Parameters.AddWithValue("@ficha", numero);
                                            comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                            comando.Parameters.AddWithValue("@usuario", usuario);
                                            dtTabla = new System.Data.DataTable();
                                            adaptador = new SqlDataAdapter(comando);
                                            adaptador.Fill(dtTabla);
                                            adaptador.Dispose();
                                            comando.Dispose();
                                            conexion.Close();
                                            conexion.Dispose();

                                            //conexiones.crearConexion();
                                            //conexiones.comando = conexiones.conexion.CreateCommand();
                                            //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                                            //conexiones.comando.CommandTimeout = 240000;
                                            //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                            //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                            //if (delegacion == "")
                                            //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                            //else
                                            //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                                            //conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                            //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                            //conexiones.comando.Parameters.AddWithValue("@ficha", numero);
                                            //conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                            //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                                            //dtTabla = new System.Data.DataTable();
                                            //adaptador = new SqlDataAdapter(conexiones.comando);
                                            //adaptador.Fill(dtTabla);
                                            //adaptador.Dispose();
                                            //conexiones.comando.Dispose();
                                            //conexiones.conexion.Close();
                                            //conexiones.conexion.Dispose();

                                            if (dtTabla.Rows.Count > 0)
                                                precioHT = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[0]["Precio"]));
                                        }

                                        AAF = "";
                                        filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + itemBuenTrato + "'");
                                        foreach (DataRow filaAA in filaEncontrada)
                                        {
                                            dondeVa = "Datos AAF";
                                            AAF = Convert.ToString(filaAA["AAF"]);
                                        }

                                        if (!listaArticulosBuenTrato.Contains(AAF))
                                            listaArticulosBuenTrato.Add(AAF);

                                        dondeVa = "VMD Buen trato 1";
                                        oItemBuenTrato = dtBuenTrato.NewRow();
                                        dondeVa = "VMD";
                                        oItemBuenTrato["Item Dev."] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.None || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Repair)
                                            oItemBuenTrato["Item usado"] = itemBuenTrato;
                                        else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            oItemBuenTrato["Item chatarra"] = itemBuenTrato;
                                        else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            oItemBuenTrato["Item mal estado"] = itemBuenTrato;
                                        oItemBuenTrato["Unidades clasificadas"] = AxdEntity_WorkPaperPaletLine.Qty.ToString("#,##0");
                                        oItemBuenTrato["PS devolucion"] = precioHT.ToString("#,##0.00");

                                        oItemBuenTrato["ID tipo del item"] = AxdEntity_WorkPaperPaletLine.ItemDevolutionType;
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.None)
                                            oItemBuenTrato["Tipo del item"] = "None";
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            oItemBuenTrato["Tipo del item"] = "Seminew";
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Repair)
                                            oItemBuenTrato["Tipo del item"] = "Repair";
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            oItemBuenTrato["Tipo del item"] = "BadItem";

                                        //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        {
                                            if (!listaChatarra.Contains(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato))
                                            {
                                                listaChatarra.Add(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato);
                                            }
                                        }

                                        filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + itemBuenTrato + "'");
                                        foreach (DataRow filaTax in filaEncontrada)
                                        {
                                            if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                                coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                            if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                                coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                        }

                                        oItemBuenTrato["Correccion nuevo devuelto"] = coeficienteNuevo.ToString("#,##0.00");
                                        oItemBuenTrato["Correccion usado devuelto"] = coeficienteUsado.ToString("#,##0.00");
                                        oItemBuenTrato["AAF"] = AAF;
                                        dtBuenTrato.Rows.Add(oItemBuenTrato);
                                        oItemBuenTrato = null;
                                    }
                                    else
                                    {
                                        //CHATARRA
                                        itemBuenTrato = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                        //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew || AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                        {
                                            dondeVa = "ROP_Producto (2)";
                                            conexion = new SqlConnection(strConexion);
                                            conexion.Open();
                                            comando = conexion.CreateCommand();
                                            comando.CommandText = "ROP_Producto";
                                            comando.CommandTimeout = 240000;
                                            comando.CommandType = CommandType.StoredProcedure;
                                            comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 1);
                                            //else 
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                comando.Parameters.AddWithValue("@tipo", 2);
                                            dtTabla = new System.Data.DataTable();
                                            adaptador = new SqlDataAdapter(comando);
                                            adaptador.Fill(dtTabla);
                                            adaptador.Dispose();
                                            comando.Dispose();
                                            conexion.Close();
                                            conexion.Dispose();

                                            //conexiones.crearConexion();
                                            //conexiones.comando = conexiones.conexion.CreateCommand();
                                            //conexiones.comando.CommandText = "ROP_Producto";
                                            //conexiones.comando.CommandTimeout = 240000;
                                            //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                            //conexiones.comando.Parameters.AddWithValue("@ProductId", AxdEntity_WorkPaperPaletLine.ItemId.ToString());
                                            ////if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            ////    conexiones.comando.Parameters.AddWithValue("@tipo", 1);
                                            ////else 
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                            //    conexiones.comando.Parameters.AddWithValue("@tipo", 2);
                                            //dtTabla = new System.Data.DataTable();
                                            //adaptador = new SqlDataAdapter(conexiones.comando);
                                            //adaptador.Fill(dtTabla);
                                            //adaptador.Dispose();
                                            //conexiones.comando.Dispose();
                                            //conexiones.conexion.Close();
                                            //conexiones.conexion.Dispose();

                                            if (dtTabla.Rows.Count > 0)
                                               itemBuenTrato = Convert.ToString(dtTabla.Rows[0]["ItemId"]);
                                            
                                            precioHT = 0;
                                            filaEncontrada = dtArticulos.Select("Articulo = '" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "'");
                                            foreach (DataRow filaprecio in filaEncontrada)
                                            {
                                                nombreFicha = Convert.ToString(filaprecio["NombreFicha"]);
                                                dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(filaprecio["Precio"])))
                                                    precioHT = Convert.ToDecimal(filaprecio["Precio"]);
                                                break;
                                            }

                                            if (precioHT == 0)
                                            {
                                                dondeVa = "ROP_PreciosArticulos (2)";
                                                conexion = new SqlConnection(strConexion);
                                                conexion.Open();
                                                comando = conexion.CreateCommand();
                                                comando.CommandText = "ROP_PreciosArticulos";
                                                comando.CommandTimeout = 240000;
                                                comando.CommandType = CommandType.StoredProcedure;
                                                comando.Parameters.AddWithValue("@empresa", empresa);
                                                if (delegacion == "")
                                                    comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                                else
                                                    comando.Parameters.AddWithValue("@delegacion", delegacion);
                                                comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                comando.Parameters.AddWithValue("@moneda", moneda);
                                                comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                comando.Parameters.AddWithValue("@ficha", numero);
                                                comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                                comando.Parameters.AddWithValue("@usuario", usuario);
                                                dtTabla = new System.Data.DataTable();
                                                adaptador = new SqlDataAdapter(comando);
                                                adaptador.Fill(dtTabla);
                                                adaptador.Dispose();
                                                comando.Dispose();
                                                conexion.Close();
                                                conexion.Dispose();

                                                //conexiones.crearConexion();
                                                //conexiones.comando = conexiones.conexion.CreateCommand();
                                                //conexiones.comando.CommandText = "ROP_PreciosArticulos";
                                                //conexiones.comando.CommandTimeout = 240000;
                                                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                                                //conexiones.comando.Parameters.AddWithValue("@empresa", empresa);
                                                //if (delegacion == "")
                                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", DBNull.Value);
                                                //else
                                                //    conexiones.comando.Parameters.AddWithValue("@delegacion", delegacion);
                                                //conexiones.comando.Parameters.AddWithValue("@articulos", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                //conexiones.comando.Parameters.AddWithValue("@moneda", moneda);
                                                //conexiones.comando.Parameters.AddWithValue("@articulosCambio", AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "|" + fechaFicha.ToString() + ";");
                                                //conexiones.comando.Parameters.AddWithValue("@ficha", numero);
                                                //conexiones.comando.Parameters.AddWithValue("@fechaCambio", DBNull.Value);
                                                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                                                //dtTabla = new System.Data.DataTable();
                                                //adaptador = new SqlDataAdapter(conexiones.comando);
                                                //adaptador.Fill(dtTabla);
                                                //adaptador.Dispose();
                                                //conexiones.comando.Dispose();
                                                //conexiones.conexion.Close();
                                                //conexiones.conexion.Dispose();

                                                if (dtTabla.Rows.Count > 0)
                                                    precioHT = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[0]["Precio"]));
                                            }

                                            AAF = "";
                                            filaEncontrada = dtArticulosLiquidacion.Select("ItemId = '" + itemBuenTrato + "'");
                                            foreach (DataRow filaAA in filaEncontrada)
                                            {
                                                dondeVa = "Datos AAF";
                                                AAF = Convert.ToString(filaAA["AAF"]);
                                            }

                                            if (!listaChatarra.Contains(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato))
                                            {
                                                listaChatarra.Add(AAF + "|" + AxdEntity_WorkPaperPaletLine.ItemId.ToString() + "/" + itemBuenTrato);
                                            }

                                            dondeVa = "VMD Buen trato 1";
                                            oItemBuenTrato = dtChatarra.NewRow();
                                            dondeVa = "VMD";
                                            oItemBuenTrato["Item Dev."] = AxdEntity_WorkPaperPaletLine.ItemId.ToString();
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                oItemBuenTrato["Item chatarra"] = itemBuenTrato;
                                            //else if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    oItemBuenTrato["Item mal estado"] = itemBuenTrato;
                                            oItemBuenTrato["Unidades clasificadas"] = AxdEntity_WorkPaperPaletLine.Qty.ToString("#,##0");
                                            oItemBuenTrato["PS devolucion"] = precioHT.ToString("#,##0.00");

                                            oItemBuenTrato["ID tipo del item"] = AxdEntity_WorkPaperPaletLine.ItemDevolutionType;
                                            //if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.Seminew)
                                            //    oItemBuenTrato["Tipo del item"] = "Seminew";
                                            if (AxdEntity_WorkPaperPaletLine.ItemDevolutionType == tablaHojasTrabajoLineas.AxdEnum_ItemDevolutionType.BadItem)
                                                oItemBuenTrato["Tipo del item"] = "BadItem";

                                            filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + itemBuenTrato + "'");
                                            foreach (DataRow filaTax in filaEncontrada)
                                            {
                                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Nuevo")
                                                    coeficienteNuevo = Convert.ToDecimal(filaTax["Valor"]);
                                                if (Convert.ToString(filaTax["Concepto"]) == "Coef. Corrección PS Usado")
                                                    coeficienteUsado = Convert.ToDecimal(filaTax["Valor"]);
                                            }

                                            oItemBuenTrato["Correccion nuevo devuelto"] = coeficienteNuevo.ToString("#,##0.00");
                                            oItemBuenTrato["Correccion usado devuelto"] = coeficienteUsado.ToString("#,##0.00");
                                            oItemBuenTrato["AAF"] = AAF;
                                            dtChatarra.Rows.Add(oItemBuenTrato);
                                            oItemBuenTrato = null;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    proxy_HojasTrabajoLineas.Close();
                }

                // CALCULAR BUEN TRATO
                decimal taximetroAbono = 0;
                decimal porcentajeAmortizado = 0;
                decimal totalEntregado = 0;
                decimal total = 0;
                decimal totalEntrega = 0;
                decimal totalDevolucion = 0;
                decimal totalMPO = 0;
                decimal totalMPOVan = 0;
                decimal totalVME = 0;
                decimal totalVMD = 0;
                decimal entregado = 0;
                decimal coeficienteCorreccion = 0;
                decimal totalImporteAbonoBuenTrato = 0;
                decimal importeAbonoBuenTrato = 0;
                decimal totalChatarra = 0;
                decimal quedanUsadas = 0;
                decimal quedanNuevas = 0;
                decimal chatarraNuevas = 0;
                decimal chatarraUsadas = 0;
                decimal totalChatarraNuevas = 0;
                decimal totalChatarraUsadas = 0;

                for (lineasBuenTrato = 0; lineasBuenTrato < listaArticulosBuenTrato.Count; lineasBuenTrato++)
                {
                    AAF = listaArticulosBuenTrato.ElementAt(lineasBuenTrato);
                    taximetroAbono = 0;
                    porcentajeBuenTrato = 0;
                    coeficienteBuenTrato = 0;
                    porcentajeAmortizado = 0;
                    totalEntregado = 0;
                    total = 0;
                    totalEntrega = 0;
                    totalDevolucion = 0;
                    totalMPO = 0;
                    totalMPOVan = 0;
                    totalVME = 0;
                    totalVMD = 0;
                    entregado = 0;
                    coeficienteCorreccion = 0;
                    importeAbonoBuenTrato = 0;

                    filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + AAF + "'");
                    foreach (DataRow filaTax in filaEncontrada)
                    {
                        if (Convert.ToString(filaTax["Concepto"]) == "Porcentaje buen trato")
                            porcentajeBuenTrato = Convert.ToDecimal(filaTax["Valor"]) / 100;

                        if (Convert.ToString(filaTax["Concepto"]) == "Coeficiente buen trato")
                            coeficienteBuenTrato = Convert.ToDecimal(filaTax["Valor"]);
                    }

                    // CALCULAR MPO DEVUELTO
                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades nuevo entregado")));

                    totalEntrega = total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades usado entregado")));

                    totalEntrega = totalEntrega + total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades clasificadas")));

                    totalDevolucion = total;
                    totalMPO = totalEntrega - totalDevolucion;

                    oItemBuenTrato = dtBuenTrato.NewRow();
                    oItemBuenTrato["AAF"] = AAF;
                    oItemBuenTrato["Unidades MPO"] = totalMPO.ToString("#,##0.00");
                    dtBuenTrato.Rows.Add(oItemBuenTrato);
                    oItemBuenTrato = null;

                    // CALCULAR BUEN TRATO: % Amortizado
                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Taximetro")));

                    taximetroAbono = total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Abono")));

                    taximetroAbono = taximetroAbono - total;

                    total = dtBuenTrato.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == AAF)
                        .Sum(x => (Convert.ToDecimal(x.Field<string>("PS entregado")) * Convert.ToDecimal(x.Field<string>("Unidades alquiler"))));

                    totalEntregado = total;

                    if (totalEntregado != 0)
                        porcentajeAmortizado = taximetroAbono / totalEntregado;
                    else
                        porcentajeAmortizado = 0;

                    // CALCULAR BUEN TRATO: VME
                    totalMPO = Math.Abs(totalMPO);
                    if (totalMPO > 0) // se resta primero del nuevo
                    {
                        dondeVa = "calcular donde resta MPO";
                        totalMPOVan = totalMPO;
                        filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades nuevo entregado] <> '' AND [Unidades nuevo entregado] <> '0'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            dondeVa = "recorrer las unidades nuevas";
                            entregado = Convert.ToDecimal(fila["Unidades nuevo entregado"].ToString());
                            if (entregado >= totalMPOVan)
                            {
                                fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                fila["Unidades entregadas nuevo"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                totalMPOVan = 0;
                            }
                            else
                            {
                                fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                fila["Unidades entregadas nuevo"] = 0.ToString("#,##0.00");
                                totalMPOVan = totalMPOVan - entregado;
                            }
                            fila.AcceptChanges();
                            if (totalMPOVan == 0)
                                break;
                        }
                        if (totalMPOVan > 0)
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                dondeVa = "recorrer las unidades usadas";
                                entregado = Convert.ToDecimal(fila["Unidades usado entregado"].ToString());
                                if (entregado >= totalMPOVan)
                                {
                                    fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                    fila["Unidades entregadas usado"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                    totalMPOVan = 0;
                                }
                                else
                                {
                                    fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                    fila["Unidades entregadas usado"] = 0.ToString("#,##0.00");
                                    totalMPOVan = totalMPOVan - entregado;
                                }
                                fila.AcceptChanges();
                                if (totalMPOVan == 0)
                                    break;
                            }
                        }
                        else
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                fila["Unidades entregadas usado"] = fila["Unidades usado entregado"].ToString();
                                fila.AcceptChanges();
                            }
                        }
                    }
                    else // se resta primero del usado
                    {
                        filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            dondeVa = "recorrer las unidades usadas";
                            entregado = Convert.ToDecimal(fila["Unidades usado entregado"].ToString());
                            if (entregado >= totalMPOVan)
                            {
                                fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                fila["Unidades entregadas usado"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                totalMPOVan = 0;
                            }
                            else
                            {
                                fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                fila["Unidades entregadas usado"] = 0.ToString("#,##0.00");
                                totalMPOVan = totalMPOVan - entregado;
                            }
                            fila.AcceptChanges();
                            if (totalMPOVan == 0)
                                break;
                        }
                        if (totalMPOVan > 0)
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades nuevo entregado] <> '' AND [Unidades nuevo entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                dondeVa = "recorrer las unidades nuevas";
                                entregado = Convert.ToDecimal(fila["Unidades nuevo entregado"].ToString());
                                if (entregado >= totalMPOVan)
                                {
                                    fila["Restar MPO"] = totalMPOVan.ToString("#,##0.00");
                                    fila["Unidades entregadas nuevo"] = (entregado - totalMPOVan).ToString("#,##0.00");
                                    totalMPOVan = 0;
                                }
                                else
                                {
                                    fila["Restar MPO"] = entregado.ToString("#,##0.00");
                                    fila["Unidades entregadas nuevo"] = 0.ToString("#,##0.00");
                                    totalMPOVan = totalMPOVan - entregado;
                                }
                                fila.AcceptChanges();
                                if (totalMPOVan == 0)
                                    break;
                            }
                        }
                        else
                        {
                            filaEncontrada = dtBuenTrato.Select("AAF = '" + AAF + "' AND [Unidades usado entregado] <> '' AND [Unidades usado entregado] <> '0'");
                            foreach (DataRow fila in filaEncontrada)
                            {
                                fila["Unidades entregadas nuevo"] = fila["Unidades nuevo entregado"].ToString();
                                fila.AcceptChanges();
                            }
                        }
                    }

                    total = dtBuenTrato.AsEnumerable()
                            .Where(y => y.Field<string>("AAF") == AAF) // && y.Field<string>("Unidades nuevo entregado") != "")
                            .Sum(x => (Convert.ToDecimal(x.Field<string>("PS entregado")) * Convert.ToDecimal(x.Field<string>("Correccion nuevo entregado")) * Convert.ToDecimal(x.Field<string>("Unidades entregadas nuevo"))));

                    totalVME = total;

                    total = dtBuenTrato.AsEnumerable()
                            .Where(y => y.Field<string>("AAF") == AAF)
                            .Sum(x => (Convert.ToDecimal(x.Field<string>("PS entregado")) * Convert.ToDecimal(x.Field<string>("Correccion usado entregado")) * Convert.ToDecimal(x.Field<string>("Unidades entregadas usado"))));

                    totalVME = totalVME + total;

                    // CALCULAR BUEN TRATO: VMD
                    total = dtBuenTrato.AsEnumerable()
                            .Where(y => y.Field<string>("AAF") == AAF)
                            .Sum(x => (Convert.ToDecimal(x.Field<string>("PS devolucion")) * Convert.ToDecimal(x.Field<string>("Correccion usado devuelto")) * Convert.ToDecimal(x.Field<string>("Unidades clasificadas"))));

                    totalVMD = total;

                    // CALCULAR BUEN TRATO: INCLUIR RESULTADOS
                    oItemBuenTrato = dtBuenTrato.NewRow();
                    oItemBuenTrato["AAF"] = AAF;
                    oItemBuenTrato["Taximetro-Abono"] = taximetroAbono.ToString("#,##0.00");
                    oItemBuenTrato["PS Total Entregado"] = totalEntregado.ToString("#,##0.00");
                    oItemBuenTrato["Pje. Amortizado"] = porcentajeAmortizado.ToString("#,##0.00");
                    oItemBuenTrato["VMD"] = totalVMD.ToString("#,##0.00");
                    oItemBuenTrato["VME"] = totalVME.ToString("#,##0.00");
                    oItemBuenTrato["Coeficiente buen trato"] = coeficienteBuenTrato.ToString("#,##0.00");
                    oItemBuenTrato["Porcentaje buen trato"] = porcentajeBuenTrato.ToString("#,##0.00");
                    oItemBuenTrato["Porcentaje buen trato"] = porcentajeBuenTrato.ToString("#,##0.00");
                    coeficienteCorreccion = 0;
                    if (totalVME != 0)
                        coeficienteCorreccion = (totalVME - totalVMD) / totalVME;
                    oItemBuenTrato["Porcentaje consumido"] = coeficienteCorreccion.ToString("#,##0.00");
                    oItemBuenTrato["Aplicar"] = (porcentajeAmortizado - (coeficienteBuenTrato * coeficienteCorreccion)).ToString("#,##0.00");
                    if ((porcentajeAmortizado - (coeficienteBuenTrato * coeficienteCorreccion)) > 0)
                        importeAbonoBuenTrato = porcentajeBuenTrato * taximetroAbono * (porcentajeAmortizado - (coeficienteBuenTrato * coeficienteCorreccion));
                    oItemBuenTrato["Abono buen trato"] = importeAbonoBuenTrato.ToString("#,##0.00");
                    totalImporteAbonoBuenTrato = totalImporteAbonoBuenTrato + importeAbonoBuenTrato;
                    dtBuenTrato.Rows.Add(oItemBuenTrato);
                    oItemBuenTrato = null;
                }

                // CALCULAR CHATARRA
                dondeVa = "Calculo de chatarra";
                string parsear = "";
                string itemDev = "";
                string itemChatarra = "";
                decimal MPOnuevas = 0;
                decimal MPOusadas = 0;
                dec_importeCosteChatarra = 0;
                totalChatarraNuevas = 0;
                totalChatarraUsadas = 0;
                dtChatarra.Merge(dtBuenTrato, false,MissingSchemaAction.Ignore);
                for (lineasBuenTrato = 0; lineasBuenTrato < listaChatarra.Count; lineasBuenTrato++)
                {
                    totalChatarra = 0;
                    quedanUsadas = 0;
                    quedanNuevas = 0;
                    chatarraNuevas = 0;
                    chatarraUsadas = 0;
                    totalChatarraNuevas = 0;
                    totalChatarraUsadas = 0;
                    MPOnuevas = 0;
                    MPOusadas = 0;
                    chatarraNuevas = 0;
                    chatarraUsadas = 0;

                    parsear = listaChatarra.ElementAt(lineasBuenTrato);
                    AAF = parsear.Substring(0, parsear.IndexOf("|"));
                    itemDev = parsear.Substring(parsear.IndexOf("|") + 1, parsear.IndexOf("/") - parsear.IndexOf("|") - 1);
                    itemChatarra = parsear.Substring(parsear.IndexOf("/") + 1, parsear.Length - parsear.IndexOf("/") - 1);

                    totalChatarra = dtChatarra.AsEnumerable()
                        .Where(y => y.Field<string>("Item Dev.") == itemDev && y.Field<string>("Item chatarra") == itemChatarra  && y.Field<string>("ID tipo del item").ToUpper() == "BADITEM")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades clasificadas")));

                    // QUEDAN NUEVAS
                    quedanNuevas = dtChatarra.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == itemDev && y.Field<string>("Unidades nuevo entregado") != "" && y.Field<string>("Unidades nuevo entregado") != "0")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades nuevo entregado")));

                    //if (quedanNuevas == 0)
                    //{
                    // QUEDAN NUEVAS
                    //quedanNuevas = dtChatarra.AsEnumerable()
                    //        .Where(y => y.Field<string>("AAF") == AAF && y.Field<string>("Unidades nuevo entregado") != "" && y.Field<string>("Unidades nuevo entregado") != "0")
                    //        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades nuevo entregado")));
                    //}

                    //// QUEDAN USADAS
                    quedanUsadas = dtChatarra.AsEnumerable()
                        .Where(y => y.Field<string>("AAF") == itemDev && y.Field<string>("Unidades usado entregado") != "" && y.Field<string>("Unidades usado entregado") != "0")
                        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades usado entregado")));

                    //if (quedanUsadas == 0)
                    //{
                    // QUEDAN USADAS
                    //quedanUsadas = dtChatarra.AsEnumerable()
                    //        .Where(y => y.Field<string>("AAF") == AAF && y.Field<string>("Unidades usado entregado") != "" && y.Field<string>("Unidades usado entregado") != "0")
                    //        .Sum(x => Convert.ToDecimal(x.Field<string>("Unidades usado entregado")));
                    //} 

                    if (dtPedidosAgrupado.Rows.Count > 0)
                    {
                        // MPO nuevas
                        dondeVa = "Calculo de chatarra // MPO nuevas: " + itemChatarra;
                        filaEncontrada = dtPedidosAgrupado.Select("[AAF] = '" + AAF + "'"); 
                        foreach (DataRow fila in filaEncontrada)
                        {
                            if (fila["NUEVO"].ToString().Length > 0)
                                MPOnuevas = Convert.ToDecimal(fila["NUEVO"]);
                            break;
                        }
                     
                        // MPO usadas
                        dondeVa = "Calculo de chatarra // MPO usadas: " + itemChatarra;
                        filaEncontrada = dtPedidosAgrupado.Select("[AAF] = '" + AAF + "'");
                        foreach (DataRow fila in filaEncontrada)
                        {
                            if (fila["USADO"].ToString().Length > 0)
                                MPOusadas = Convert.ToDecimal(fila["USADO"]);
                            break;
                        }
                    }

                    quedanNuevas = quedanNuevas - MPOnuevas;
                    quedanUsadas = quedanUsadas - MPOusadas;

                    if (totalChatarra >= quedanNuevas)
                    {
                        if (quedanNuevas > 0)
                        {
                            chatarraNuevas = quedanNuevas;
                            chatarraUsadas = totalChatarra - quedanNuevas;
                        }
                        else
                        {
                            chatarraNuevas = 0;
                            chatarraUsadas = totalChatarra;
                        }
                    }
                    else
                    {
                        chatarraNuevas = totalChatarra;
                        chatarraUsadas = 0;
                    }

                    filaEncontrada = dtChatarra.Select("[Item Dev.] = '" + itemDev + "' AND ([Item chatarra] = '" + itemChatarra + "' OR [Item mal estado] = '" + itemChatarra + "')");
                    foreach (DataRow fila in filaEncontrada)
                    {
                        totalChatarraNuevas = Convert.ToDecimal(fila["PS devolucion"]) * Convert.ToDecimal(fila["Correccion nuevo devuelto"]) * Convert.ToDecimal(chatarraNuevas);
                        totalChatarraUsadas = Convert.ToDecimal(fila["PS devolucion"]) * Convert.ToDecimal(fila["Correccion usado devuelto"]) * Convert.ToDecimal(chatarraUsadas);
                        break;
                    }

                    dec_importeCosteChatarra = dec_importeCosteChatarra + totalChatarraNuevas + totalChatarraUsadas;

                    filaEncontrada = dtChatarra.Select("[AAF] = '" + AAF + "'");
                    foreach (DataRow fila in filaEncontrada)
                    {
                        if (chatarraNuevas != 0)
                            if (fila["Unidades nuevo entregado"].ToString().Length > 0)
                                fila["Unidades nuevo entregado"] = (Convert.ToDecimal(fila["Unidades nuevo entregado"]) - chatarraNuevas).ToString();
                            else
                                fila["Unidades nuevo entregado"] = ((-1) * chatarraNuevas).ToString();
                        if (chatarraUsadas != 0)
                            if (fila["Unidades usado entregado"].ToString().Length > 0)
                                fila["Unidades usado entregado"] = (Convert.ToDecimal(fila["Unidades usado entregado"]) - chatarraUsadas).ToString();
                            else
                                fila["Unidades usado entregado"] = ((-1) * chatarraUsadas).ToString();
                        fila.AcceptChanges();
                        break;
                    }

                    // DESDE AQUI
                    if (limitarAbonoTaxMPO)
                    {
                        abonoMax1 = 0;
                        abonoMax2 = 0;
                        totalTax = 0;
                        totalBonificacion = 0;
                        totalCantidadTaxBonificacion = 0;
                        totalCantidad = 0;
                        totalCantidadVan = 0;

                        dondeVa = "calcular abono MPO tax NO consumible";
                        // TAX NO CONSUMIBLE
                        abonoMax1 = 0;
                        abonoMax2 = 0;
                        totalTax = 0;

                        totalTax = dtTax.AsEnumerable()
                            .Where(y => y.Field<string>("ITEM") == itemDev)
                            .Sum(x => Convert.ToDecimal(x.Field<decimal>("TAX NO CONSUMIBLE")));

                        totalCantidadTaxBonificacion = dtTax.AsEnumerable()
                                .Where(y => y.Field<string>("ITEM") == itemDev && (y.Field<decimal>("TAX NO CONSUMIBLE") >= 0 || y.Field<decimal>("TAX NO CONSUMIBLE") <= 0))
                                .Sum(x => Convert.ToDecimal(x.Field<decimal>("CANTIDAD")));

                        dondeVa = "calcular total cantidad tax bonificación";
                        //totalCantidadTaxBonificacion = totalCantidadTaxBonificacion;// - Math.Abs(cantidadMPOPositivo);

                        if (porcentajeAbonoTaxMPO != 0)
                            abonoMax1 = ((totalChatarraNuevas + totalChatarraUsadas) * porcentajeAbonoTaxMPO) / 100;
                        if (totalCantidadTaxBonificacion != 0)
                            abonoMax2 = (((totalTax / totalCantidadTaxBonificacion) * (chatarraNuevas + chatarraUsadas)) * porcentajeMaxAbonoTaxMPO) / 100;
                        if (abonoMax1 < abonoMax2)
                            abonoMPOTNC = abonoMPOTNC + abonoMax1;
                        else
                            abonoMPOTNC = abonoMPOTNC + abonoMax2;

                        oItemAbonoMPO = dtAbonoMPO.NewRow();
                        oItemAbonoMPO["ITEM"] = itemDev;
                        oItemAbonoMPO["CANTIDAD"] = (chatarraNuevas + chatarraUsadas).ToString("#,##0");
                        oItemAbonoMPO["PRECIO"] = precioCoste.ToString("#,##0.00");
                        oItemAbonoMPO["COEFICIENTE"] = coeficienteUsado.ToString("#,##0.00");
                        oItemAbonoMPO["TIPO"] = "NO CONSUMIBLE";
                        oItemAbonoMPO["TAX-ABONO"] = totalTax.ToString("#,##0.00");
                        oItemAbonoMPO["CANTIDAD TAX-ABONO"] = totalCantidadTaxBonificacion.ToString("#,##0");
                        if (totalCantidadTaxBonificacion != 0)
                            oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = ((totalTax / totalCantidadTaxBonificacion) * (chatarraNuevas + chatarraUsadas)).ToString("#,##0.00");
                        else
                            oItemAbonoMPO["TAX-ABONO PROPORCIONAL"] = "0.00";
                        oItemAbonoMPO["COSTE MPO"] = (totalChatarraNuevas + totalChatarraUsadas).ToString("#,##0.00");
                        oItemAbonoMPO["ABONO MAX 1"] = abonoMax1.ToString("#,##0.00");
                        oItemAbonoMPO["ABONO MAX 2"] = abonoMax2.ToString("#,##0.00");
                        if (abonoMax1 < abonoMax2)
                            oItemAbonoMPO["ABONO MPO"] = abonoMax1.ToString("#,##0.00");
                        else
                            oItemAbonoMPO["ABONO MPO"] = abonoMax2.ToString("#,##0.00");
                        dtAbonoMPO.Rows.Add(oItemAbonoMPO);
                        oItemAbonoMPO = null;
                    }
                }

                // GASTOS PATIO
                dondeVa = "Calculo de gastos patio";
                decimal totalClasificacionReparacion = 0;
                importeGastosVariablesClaisificacionReparacion = 0;
                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL HORAS CLASIFICAR REPARAR")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;

                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL HORAS CLASIFICAR REPARAR INDIRECTO")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;

                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                        .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL REPARAR")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;

                totalClasificacionReparacion = dtGastosPatioCalculo.AsEnumerable()
                       .Sum(x => Convert.ToDecimal(x.Field<decimal>("TOTAL REPARAR INDIRECTO")));

                importeGastosVariablesClaisificacionReparacion = importeGastosVariablesClaisificacionReparacion + totalClasificacionReparacion;


                //// GASTOS OFICINA
                //totalAnual = 0;
                //totalAdministrativo = 0;
                //varAdministrativo = 0;
                //totalComercial = 0;
                //varComercial = 0;
                //costeDT = 0;
                //preciosEnCero = 0;
                //dtDatosGastosOficina = gastosOficina(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable);
                //foreach (DataRow fila in dtDatosGastosOficina.Rows)
                //{
                //    dondeVa = "encontró precio coste dataset dtDatosGastosOficina";
                //    totalAnual = Convert.ToDecimal(fila["fact_anual_empresa"]);
                //    totalAdministrativo = Convert.ToDecimal(fila["total_admin"]);
                //    varAdministrativo = Convert.ToDecimal(fila["var_admin"]);
                //    totalComercial = Convert.ToDecimal(fila["total_comerc"]);
                //    varComercial = Convert.ToDecimal(fila["var_comerc"]);
                //    costeDT = Convert.ToDecimal(fila["costeDT"]);
                //    preciosEnCero = Convert.ToInt32(fila["preciosEnCero"]);
                //}
                //if (preciosEnCero != 0)
                //{
                //    salvarIndicencia(empresa, "FICHA", "", "En el cálculo de coste gastos oficina DT hay precios en cero.");
                //    imgWarning.Visible = true;
                //    lblMensajeError.Visible = true;
                //    lblMensajeError.Text = "En el cálculo de coste gastos oficina DT hay precios en cero.";
                //}

                //decimal totalAlquiler = 0;
                //decimal totalVenta = 0;
                //decimal totalPortes = 0;
                //decimal costeDTPorratear = 0;
                //decimal totalGastosOficinaAdministrativoCapitulo = 0;
                //decimal totalGastosOficinaComercialCapitulo = 0;

                //totalAlquiler = importeFacturacionAlquiler;
                //totalVenta = importeFacturacionVentaProducto + importeFacturacionVentaLiquidacion + importeFacturacionVentaMontajes + importeFacturacionVentaDepartamentoTecnico + importeFacturacionVentFenolicoNuevo + importeFacturacionVentaUneCif;
                //totalPortes = importePorte_TR001;

                ////if (chkBoxPortes.Checked)
                //    total = totalAlquiler + totalVenta + totalPortes;
                ////else
                ////    total = totalAlquiler + totalVenta;

                //if (total * porcentajeMaximoTotalFacturacion > costeDT)
                //    costeDTPorratear = costeDT;
                //else
                //    costeDTPorratear = total * porcentajeMaximoTotalFacturacion;

                //DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                //    oItemGastosOficina["CAPITULO"] = numero + " / " + nombreFicha;
                //    //oItemGastosOficina["ITEM"] = fila["ITEM"].ToString();
                //    oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                //    oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                //    oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                //    oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                //    oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                //    oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                //    oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                //    oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                //    oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                //    oItemGastosOficina["IMPORTE"] = "0.00";

                //    oItemGastosOficina["TOTAL FACTURACION"] = total.ToString("#,##0.00");
                //    oItemGastosOficina["MAX FACTURACION"] = (total * porcentajeMaximoTotalFacturacion).ToString("#,##0.00");
                //    oItemGastosOficina["COSTE DT"] = costeDT.ToString("#,##0.00");

                //    //if (chkBoxPortes.Checked)
                //    //{
                //    //    if (totalAlquiler + totalVenta != 0)
                //    //        totalPortesLinea = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])) * totalPortes) / (totalAlquiler + totalVenta);
                //    //    else
                //    //        totalPortesLinea = 0;
                //    //}

                //    // ADMINISTRACION
                //    if (totalAnual != 0)
                //    {
                //        //if (chkBoxPortes.Checked)
                //        //{
                //            // gastos oficina venta
                //            totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (totalVenta + totalAlquiler + totalPortes)) / totalAnual);
                //            totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (totalVenta + totalAlquiler + totalPortes)) / totalAnual);
                //            oItemGastosOficina["GASTOS ADMINISTRATIVO"] = (varAdministrativo * ((totalVenta + totalAlquiler + totalPortes)) / totalAnual).ToString("#,##0.00");
                //            oItemGastosOficina["GASTOS COMERCIAL"] = (varComercial * ((totalVenta + totalAlquiler + totalPortes)) / totalAnual).ToString("#,##0.00");
                //    //    }
                //    //    else
                //    //    {
                //    //    // gastos oficina venta
                //    //    totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (totalVenta + totalAlquiler)) / totalAnual);
                //    //    totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (totalVenta + totalAlquiler)) / totalAnual);
                //    //    oItemGastosOficina["GASTOS ADMINISTRATIVO"] = (varAdministrativo * ((totalVenta + totalAlquiler)) / totalAnual).ToString("#,##0.00");
                //    //    oItemGastosOficina["GASTOS COMERCIAL"] = (varComercial * ((totalVenta + totalAlquiler)) / totalAnual).ToString("#,##0.00");
                //    //}
                //}

                //    //// DT
                //    //if (chkBoxPortes.Checked)
                //    //{
                //    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea).ToString("#,##0.00");
                //    //    oItemGastosOficina["GASTOS DT"] = (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total).ToString("#,##0.00");
                //    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total);
                //    //}
                //    //else
                //    //{
                //    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])).ToString("#,##0.00");
                //    //    oItemGastosOficina["GASTOS DT"] = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) * costeDTPorratear) / total).ToString("#,##0.00");
                //    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + ((Convert.ToDecimal(oItemGastosOficina["IMPORTE"]) * costeDTPorratear) / total);
                //    //}

                //    dtGastosOficina.Rows.Add(oItemGastosOficina);
                //    oItemGastosOficina = null;
                ////}
                ////if (tituloAnterior != "")
                ////{
                //if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                //{
                //    dondeVa = "Gastos Oficina Administrativo y Comercial";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                ////    //if (totalGastosOficinaDToCapitulo != 0)
                ////    //{
                ////    //    dondeVa = "Gastos Oficina Tecnico";
                ////    //    filaValores = dtValores.NewRow();
                ////    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                ////    //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                ////    //    filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                ////    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                ////    //    dtValores.Rows.Add(filaValores);
                ////    //    filaValores = null;
                ////    //}
                ////}


                //// GASTOS FIJOS
                //decimal fact_anual_empresa = 0;
                //decimal facturacion_alquiler = 0;
                //decimal facturacion_venta = 0;
                //decimal total_admin = 0;
                //decimal var_admin = 0;
                //decimal total_comerc = 0;
                //decimal var_comerc = 0;
                //decimal total_gf_bu = 0;
                //decimal total_gf_hq = 0;
                //decimal KVBU = 0;
                //decimal KABU = 0;
                //decimal KVHQ = 0;
                //decimal KAHQ = 0;

                //decimal totalGastosFijosBU = 0;
                //decimal totalGastosFijosCentral = 0;

                //dtDatosGastosFijos = gastosFijos(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable, coeficienteGastosFijosAlquilerVenta);
                //foreach (DataRow fila in dtDatosGastosFijos.Rows)
                //{
                //    dondeVa = "encontró precio coste dataset dtDatosGastosFijos";
                //    fact_anual_empresa = Convert.ToDecimal(fila["fact_anual_empresa"]);
                //    facturacion_alquiler = Convert.ToDecimal(fila["facturacion_alquiler"]);
                //    facturacion_venta = Convert.ToDecimal(fila["facturacion_venta"]);
                //    total_admin = Convert.ToDecimal(fila["total_admin"]);
                //    var_admin = Convert.ToDecimal(fila["var_admin"]);
                //    total_comerc = Convert.ToDecimal(fila["total_comerc"]);
                //    var_comerc = Convert.ToDecimal(fila["var_comerc"]);
                //    total_gf_bu = Convert.ToDecimal(fila["total_gf_bu"]);
                //    total_gf_hq = Convert.ToDecimal(fila["total_gf_hq"]);
                //    KVBU = Convert.ToDecimal(fila["KVBU"]);
                //    KABU = Convert.ToDecimal(fila["KABU"]);
                //    KVHQ = Convert.ToDecimal(fila["KVHQ"]);
                //    KAHQ = Convert.ToDecimal(fila["KAHQ"]);
                //}
                //foreach (DataRow fila in dtGastosFijos.Rows)
                //{
                //    fila["fact_anual_empresa"] = fact_anual_empresa;
                //    fila["facturacion_alquiler"] = facturacion_alquiler;
                //    fila["facturacion_venta"] = facturacion_venta;
                //    fila["total_admin"] = total_admin;
                //    fila["var_admin"] = var_admin; 
                //    fila["total_comerc"] = total_comerc;
                //    fila["var_comerc"] = var_comerc;
                //    fila["total_gf_bu"] = total_gf_bu;
                //    fila["total_gf_hq"] = total_gf_hq;
                //    fila["KVBU"] = KVBU;
                //    fila["KABU"] = KABU;
                //    fila["KVHQ"] = KVHQ;
                //    fila["KAHQ"] = KAHQ;

                //    fila["BU ALQUILER"] = 0;
                //    fila["BU VENTA"] = 0;
                //    fila["CENTRAL ALQUILER"] = 0;
                //    fila["CENTRAL VENTA"] = 0;

                //    fila.AcceptChanges();
                //}

                //if (totalGastosFijosBU != 0)
                //{
                //    dondeVa = "Gastos Fijos BU";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = totalGastosFijosBU.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (totalGastosFijosCentral != 0)
                //{
                //    dondeVa = "Gastos Fijos Central";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRAL";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = totalGastosFijosCentral.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //hora_2 = DateTime.Now.Subtract(hora_1);
                //oItemTiempo = dtTiempos.NewRow();
                //oItemTiempo["EMPRESA-NUMERO-#"] = empresa + " " + numero + " / " + cual.ToString();
                //oItemTiempo["CONCEPTO"] = "TIEMPO TOTAL PROCESO";
                //oItemTiempo["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                //dtTiempos.Rows.Add(oItemTiempo);

                //hora_1 = DateTime.Now;

                //if (totalImporteAbonoBuenTrato != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ABONO_BUEN_TRATO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = totalImporteAbonoBuenTrato.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionAlquiler != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ALQUILERES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionAlquiler.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaDepartamentoTecnico != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "DEPARTAMENTO_TECNICO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaDepartamentoTecnico.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaDepartamentoTecnico != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_DEPARTAMENTO_TECNICO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaDepartamentoTecnico).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentFenolicoNuevo != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "FENÓLICO_NUEVO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentFenolicoNuevo.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaFenolicoNuevo != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_FENOLICO_NUEVO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaFenolicoNuevo).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaOtrosServicios != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "OTROS_SERVICIOS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaOtrosServicios.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaOtrosServicios != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_OTROS_SERVICIOS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaOtrosServicios).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaMontajes != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "MONTAJES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaMontajes.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaMontajes != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_MONTAJES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaMontajes).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaUneCif != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "SVP_CIF";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaUneCif.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteVentaUneCif != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_UNE_CIF";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaUneCif).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeFacturacionVentaProducto != 0)
                //{
                //    dondeVa = "Importes/cantidades venta productos 1";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "VENTAS_DIRECTAS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaProducto.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                ////if (importeFacturacionVentaLiquidacion != 0)
                ////{
                ////    dondeVa = "Importes/cantidades venta productos 1";
                ////    filaValores = dtValores.NewRow();
                ////    filaValores[dtValores_ETIQUETA] = "VENTAS_LIQUIDACIONES";
                ////    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                ////    filaValores[dtValores_IMPORTE] = importeFacturacionVentaLiquidacion.ToString("#,##0.00");
                ////    filaValores[dtValores_PORCENTAJE] = "0.00";
                ////    dtValores.Rows.Add(filaValores);
                ////    filaValores = null;
                ////}

                //if (importeFacturacionVentaLiquidacion != 0)
                //{
                //    dondeVa = "Importes/cantidades venta productos 1";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeFacturacionVentaLiquidacion.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                ////if (chkBoxPortes.Checked &&  importePorte_TR001 != 0)
                ////{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importePorte_TR001.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                ////}

                //////importeCostePorte = (-1) * (importePorte_TR001 * (1 - margenPorte));
                ////if (chkBoxPortes.Checked && importeCostePorte !=0)
                ////{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeCostePorte.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                ////}

                //if (importeCosteVenta != 0)
                //{
                //    dondeVa = "Importes/cantidades venta 2";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_VENTAS_DIRECTAS";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVenta).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (dec_importeTotalCosteMPOUsado != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_MPO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * dec_importeTotalCosteMPOUsado).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (dec_importeCosteChatarra != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_CHATARRA";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * dec_importeCosteChatarra).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (dec_importeTotalCosteLIQUsado != 0)
                //{
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO"; //"COSTE_VENTAS_MATERIAL_ALQUILADO";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha + " - USADO";
                //    filaValores[dtValores_IMPORTE] = ((-1) * dec_importeTotalCosteLIQUsado).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}


                //if (importeCosteTaximetroNoConsumible != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 2";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "TAXIMETRO_NO_CONSUMIBLE";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroNoConsumible).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteTaximetroConsumible != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 3";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "TAXIMETRO_CONSUMIBLE";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroConsumible).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeCosteBonificacionTaximetroConsumible != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 4";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "AJUSTE_TAXIMETRO_CONSUMIBLE";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = importeCosteBonificacionTaximetroConsumible.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (abonoMPOTC != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 4";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ABONO_MPO_TC";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = abonoMPOTC.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (abonoMPOTNC != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 4";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "ABONO_MPO_TNC";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = abonoMPOTNC.ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeGastosVariablesEntregaDevolucionAlquilerCapitulos != 0 || importeGastosVariablesEntregaDevolucionVentaCapitulos != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 6";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosVariablesEntregaDevolucionVentaCapitulos)).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //if (importeGastosVariablesClaisificacionReparacion != 0)
                //{
                //    dondeVa = "Importes/cantidades alquiler 6";
                //    filaValores = dtValores.NewRow();
                //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                //    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesClaisificacionReparacion).ToString("#,##0.00");
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //    dtValores.Rows.Add(filaValores);
                //    filaValores = null;
                //}

                //// MARGEN
                //filaValores = dtValores.NewRow();
                //filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                //filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                //filaValores[dtValores_IMPORTE] = (importePorte_TR001 + importeCostePorte).ToString("#,##0.00");
                //if (((importePorte_TR001) / (1 - margenPorte)) == 0)
                //    filaValores[dtValores_PORCENTAJE] = "0.00";
                //else
                //    filaValores[dtValores_PORCENTAJE] = (((importePorte_TR001 + importeCostePorte) / importePorte_TR001) * 100).ToString("#,##0.00");
                //dtValores.Rows.Add(filaValores);
                //filaValores = null;

                if (importeFacturacionVentaMontajes != 0 || importeCosteVentaMontajes != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajes - importeCosteVentaMontajes).ToString("#,##0.00");
                    if (importeFacturacionVentaMontajes == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaMontajes - importeCosteVentaMontajes) / importeFacturacionVentaMontajes) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaProducto != 0 || importeCosteVenta != 0)
                {
                    dondeVa = "Importes/cantidades venta 3";
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProducto - importeCosteVenta).ToString("#,##0.00");
                    if (importeFacturacionVentaProducto == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProducto - importeCosteVenta) / importeFacturacionVentaProducto) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionAlquiler != 0 || importeCosteTaximetroNoConsumible != 0 || importeCosteTaximetroConsumible != 0 || importeCosteBonificacionTaximetroConsumible != 0)
                {
                    dondeVa = "Importes/cantidades alquiler 5";
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_ALQUILER";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionAlquiler - importeCosteTaximetroNoConsumible - importeCosteTaximetroConsumible + importeCosteBonificacionTaximetroConsumible).ToString("#,##0.00");
                    if (importeFacturacionAlquiler == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionAlquiler - importeCosteTaximetroNoConsumible - importeCosteTaximetroConsumible + importeCosteBonificacionTaximetroConsumible) / importeFacturacionAlquiler) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaDepartamentoTecnico != 0 || importeCosteVentaDepartamentoTecnico != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnico - importeCosteVentaDepartamentoTecnico).ToString("#,##0.00");
                    if (importeFacturacionVentaDepartamentoTecnico == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaDepartamentoTecnico - importeCosteVentaDepartamentoTecnico) / importeFacturacionVentaDepartamentoTecnico) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentFenolicoNuevo != 0 || importeCosteVentaFenolicoNuevo != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevo - importeCosteVentaFenolicoNuevo).ToString("#,##0.00");
                    if (importeFacturacionVentFenolicoNuevo == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentFenolicoNuevo - importeCosteVentaFenolicoNuevo) / importeFacturacionVentFenolicoNuevo) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaUneCif != 0 || importeCosteVentaUneCif != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCif - importeCosteVentaUneCif).ToString("#,##0.00");
                    if (importeFacturacionVentaUneCif == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaUneCif - importeCosteVentaUneCif) / importeFacturacionVentaUneCif) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaOtrosServicios != 0 || importeCosteVentaOtrosServicios != 0)
                {
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_OTROS_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaOtrosServicios - importeCosteVentaOtrosServicios).ToString("#,##0.00");
                    if (importeFacturacionVentaOtrosServicios == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaOtrosServicios - importeCosteVentaOtrosServicios) / importeFacturacionVentaOtrosServicios) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                if (importeFacturacionVentaProducto != 0)
                {
                    dondeVa = "Importes/cantidades venta 3";
                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES"; //"MARGEN_VENTAS_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = numero + " / " + nombreFicha;
                    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProducto - dec_importeCosteMPONuevo - dec_importeCosteMPO).ToString("#,##0.00");
                    if (importeFacturacionVentaProducto == 0)
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProducto - dec_importeCosteMPONuevo - dec_importeCosteMPO) / importeFacturacionVentaProducto) * 100).ToString("#,##0.00");
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;
                }

                //datosGenerales = numero + " / " + fechaFicha.ToString("dd/MM/yyyy") + " / " + nombreFicha + " / " + moneda + " / " + delegacion;
                //nombreInforme = Server.MapPath("~/Ficheros excel/Ficha_" + numero + "_" + DateTime.Now.ToString("yyyy_MM_dd") + ".xlsx");
                //SLDocument sl = new SLDocument();
                //sl.ImportDataTable(1, 1, dtTax, true);
                //sl.SaveAs(nombreInforme);

                hora_2 = DateTime.Now.Subtract(hora_1);
                horaProcesar_2 = DateTime.Now.Subtract(horaProcesar_1);

                conexion = new SqlConnection(strConexion);
                conexion.Open();
                comando = conexion.CreateCommand();
                comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                comando.CommandTimeout = 240000;
                comando.CommandType = CommandType.StoredProcedure;
                comando.Parameters.AddWithValue("@usuario", usuario);
                comando.ExecuteNonQuery();
                comando.Dispose();
                conexion.Close();
                conexion.Dispose();

                //conexiones.crearConexion();
                //conexiones.comando = conexiones.conexion.CreateCommand();
                //conexiones.comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                //conexiones.comando.CommandTimeout = 240000;
                //conexiones.comando.CommandType = CommandType.StoredProcedure;
                //conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                //conexiones.comando.ExecuteNonQuery();
                //conexiones.comando.Dispose();
                //conexiones.conexion.Close();
                //conexiones.conexion.Dispose();

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();
                //dataTiempos.DataSource = dtTiempos;
                //dataTiempos.DataBind();
                //dataTiempos.Visible = true;

                pintarArbol(ref dtValores, false, false);

                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "FICHA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["COSTE"] = total.ToString("#,##0.00");

                total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                //dataResultados.DataSource = null;
                //dataResultados.Columns.Clear();
                //dataResultados.DataSource = dtResultados;
                //dataResultados.DataBind();
                //dataResultados.Visible = true;
            }
            catch (Exception ex)
            {
                hora_2 = DateTime.Now.Subtract(hora_1);
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular ficha // " + dondeVa + " // " + ex.Message;
                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "FICHA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numero;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularOfertaMasivo(ref DataTable dtResultados, int cual, string empresa, List<string> listaNumeros)
        {
            DataRow oItemResultados;
            DateTime hora_1 = default(DateTime);
            TimeSpan hora_2 = default(TimeSpan);
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DateTime horaProcesar_1 = default(DateTime);
            TimeSpan horaProcesar_2 = default(TimeSpan);
            string dondeVa = "";
            string numeros = "";
            string numeroOferta = "";
            int numOferta = 0;

            try
            {
                string usuario = "";
                var guid = Guid.NewGuid();
                var justNumbers = new String(guid.ToString().Where(Char.IsDigit).ToArray());
                var seed = int.Parse(justNumbers.Substring(0, 4));
                var rnd = new Random(seed);
                //Random rnd = new Random(10);
                int numeroRandom;

                string codigosTransporte = "";
                DataRow filaValores;

                List<string> listaArticulosSinFicha = new List<string>();
                List<string> listaArticulosPedido = new List<string>();
                List<DateTime> listaFechasPedido = new List<DateTime>();
                List<string> listaOfertas = new List<string>();
                List<DateTime> listaFechasOferta = new List<DateTime>();

                hora_1 = DateTime.Now;

                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();

                SqlConnection conexion;

                SqlDataAdapter adaptador;
                System.Data.DataTable dtTabla = new System.Data.DataTable();
                SqlCommand comando;

                DateTime horaTotal_1 = default(DateTime);
                TimeSpan horaTotal_2 = default(TimeSpan);

                string moneda = "";
                string masterObra = "";
                decimal total;

                DataTable dtArticulosPaneles;

                SqlDataAdapter adaptadorDatosConfiguracion;
                System.Data.DataTable dtDatosConfiguracion;

                List<int> listaBonificacionesDesde = new List<int>();
                List<int> listaBonificacionesHasta = new List<int>();
                List<decimal> listaBonificacionesValor = new List<decimal>();

                decimal pesoArticulo = 0;
                decimal kilometros = 0;
                decimal cambio = 1;
                bool hayTR001 = false;
                bool existeTR001 = false;
                bool esVenta = false;
                int lineasBonificacion;
                int duracion = 0;
                int diasCalculados = 0;
                int diasMultiplicar = 0;
                int diasDesdeTaxNoConsumible = 0;
                int diasHastaTaxNoConsumible = 0;
                int diasTaximetroNoConsumibleCalcular = 0;
                decimal importeAlquilerGastosFijosBU = 0;
                decimal importeAlquilerGastosFijosCentrales = 0;
                decimal importeCosteBonificacionTaximetroConsumible = 0;

                string tipoServicio = "";
                string tituloCapitulo = "";

                System.Data.DataTable dtValores;
                dtValores = new System.Data.DataTable();
                dtValores.Columns.Add("ETIQUETA");
                dtValores.Columns.Add("CONCEPTO");
                dtValores.Columns.Add("IMPORTE");
                dtValores.Columns.Add("PORCENTAJE");

                //dataTiempos.DataSource = null;
                //dataTiempos.Columns.Clear();

                DataTable dtTaximetro;
                dtTaximetro = new DataTable();
                dtTaximetro.Columns.Add("FECHA DOC");
                dtTaximetro.Columns.Add("FECHA CAPITULO");
                dtTaximetro.Columns.Add("CAPITULO");
                dtTaximetro.Columns.Add("TIPO CAPITULO");
                dtTaximetro.Columns.Add("MOVIMIENTO");
                dtTaximetro.Columns.Add("ITEM");
                dtTaximetro.Columns.Add("NUEVO/USADO");
                dtTaximetro.Columns.Add("COEF. NUEVO");
                dtTaximetro.Columns.Add("COEF. USADO");
                dtTaximetro.Columns.Add("CANTIDAD");
                dtTaximetro.Columns.Add("EURO/UD/DIA");
                dtTaximetro.Columns.Add("DURACION ESTIMADA");
                dtTaximetro.Columns.Add("FACT ALQUILER");
                dtTaximetro.Columns.Add("FACT TOTAL VENTA");
                dtTaximetro.Columns.Add("FACT VENTA SERVICIO");
                dtTaximetro.Columns.Add("FACT VENTA PRODUCTO");
                dtTaximetro.Columns.Add("CANTIDAD DIAS");
                dtTaximetro.Columns.Add("FECHA PS");
                dtTaximetro.Columns.Add("PS/UD");
                dtTaximetro.Columns.Add("PS/UD ORIGINAL");
                dtTaximetro.Columns.Add("PRECIO CAMBIO");
                dtTaximetro.Columns.Add("PS Corrección N");
                dtTaximetro.Columns.Add("PS Corrección U");
                dtTaximetro.Columns.Add("FECHA CAMBIO");
                dtTaximetro.Columns.Add("CAMBIO");
                dtTaximetro.Columns.Add("TIPO ARTICULO");
                dtTaximetro.Columns.Add("SUPERFICIE");
                dtTaximetro.Columns.Add("COSTE SUPERFICIE");
                dtTaximetro.Columns.Add("PRECIO CONSUMIBLE");
                dtTaximetro.Columns.Add("PRECIO NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("IMPORTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("% AJUSTE");
                dtTaximetro.Columns.Add("AJUSTE TAX CONSUMIBLE");
                dtTaximetro.Columns.Add("CANTIDAD DIAS TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS DESDE TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("DIAS HASTA TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("% TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("TAX NO CONSUMIBLE");
                dtTaximetro.Columns.Add("GASTO VARIABLE");
                dtTaximetro.Columns.Add("IMPORTE GASTO VARIABLE");
                dtTaximetro.Columns.Add("GASTO FIJO BU");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO BU");
                dtTaximetro.Columns.Add("GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("IMPORTE GASTO FIJO CENTRAL");
                dtTaximetro.Columns.Add("FECHA_CALCULADA");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION");
                dtTaximetro.Columns.Add("ALQUILER ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR DIRECTO");
                dtTaximetro.Columns.Add("ALQUILER REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("ALQUILER GASTOS PATIO");
                dtTaximetro.Columns.Add("VENTA ENTREGA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION");
                dtTaximetro.Columns.Add("VENTA ENTREGA NAVIERA");
                dtTaximetro.Columns.Add("VENTA DEVOLUCION NAVIERA");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA CLASIFICAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR DIRECTO");
                dtTaximetro.Columns.Add("VENTA REPARAR INDIRECTO");
                dtTaximetro.Columns.Add("VENTA GASTOS PATIO");
                dtTaximetro.Columns.Add("PRECIO GASTOS PATIO");
                dtTaximetro.Columns.Add("FECHA PRECIO GASTOS PATIO");

                // gastos variables oficina
                int mesPresupuestoValido = 0;
                decimal porcentajeGastoAdmministrativoVariable = 0;
                decimal porcentajeGastoComercialVariable = 0;
                decimal porcentajeMaximoTotalFacturacion = 0;
                System.Data.DataTable dtDatosGastosOficina;
                System.Data.DataTable dtGastosOficina = new System.Data.DataTable();
                dtGastosOficina.Columns.Add("CAPITULO");
                dtGastosOficina.Columns.Add("ITEM");
                dtGastosOficina.Columns.Add("MES PRESUPUESTO VALIDO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("PORCENTAJE GASTO COMERCIAL");
                dtGastosOficina.Columns.Add("PORCENTAJE MAXIMO TOTAL FACTURACON");
                dtGastosOficina.Columns.Add("TOTAL ANUAL");
                dtGastosOficina.Columns.Add("TOTAL ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("VAR ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("GASTOS ADMINISTRATIVO");
                dtGastosOficina.Columns.Add("TOTAL COMERCIAL");
                dtGastosOficina.Columns.Add("VAR COMERCIAL");
                dtGastosOficina.Columns.Add("GASTOS COMERCIAL");
                dtGastosOficina.Columns.Add("TOTAL FACTURACION");
                dtGastosOficina.Columns.Add("MAX FACTURACION");
                dtGastosOficina.Columns.Add("IMPORTE");
                dtGastosOficina.Columns.Add("COSTE DT");
                dtGastosOficina.Columns.Add("GASTOS DT");
                //decimal totalAnual = 0;
                //decimal totalAdministrativo = 0;
                //decimal varAdministrativo = 0;
                //decimal totalComercial = 0;
                //decimal varComercial = 0;
                //decimal costeDT = 0;
                //int preciosEnCero = 0;

                // gastos variables patio
                decimal clasificarRepararDirecto;
                decimal clasificarRepararIndirecto;
                decimal clasificarDirecto;
                decimal clasificarIndirecto;
                decimal repararDirecto;
                decimal repararIndirecto;
                decimal entrega = 0;
                decimal devolucion = 0;
                decimal naviera = 0;
                decimal precioGastosPatio = 0;

                decimal pesoCapitulo = 0;
                decimal pesoTotal = 0;
                decimal coeficienteNuevo = 0;
                decimal coeficienteUsado = 0;
                decimal coeficienteUsar = 0;
                //decimal coeficienteMixto = 0;
                string tipoArticulo = "";
                decimal porcentajeCosteMaterialNuevo = 0;
                decimal costeFenolicoNuevoEstandar = 0;
                decimal costeFenolicoNuevoEspecial = 0;

                decimal importeCosteMaterialNuevo = 0;
                decimal importeCosteMaterialFenolico = 0;

                DateTime fechaPrecio = DateTime.Now;
                decimal gastosFijosBUAlquiler = 0;
                decimal gastosFijosBUVenta = 0;
                decimal gastosFijosCentralesAlquiler = 0;
                decimal gastosFijosCentralesVenta = 0;

                bool metersInvoicing = false;
                string productType = "";
                bool calcularPorSuperficie = false;
                decimal superficie = 0;
                decimal costeSuperficie = 0;
                string articulosConfiguracion = "";
                decimal taximetroNoConsumible = 0;
                decimal taximetroConsumible = 0;
                decimal bonificacionTaximetroConsumible = 0;
                decimal precioTaximetroNoConsumible = 0;
                decimal precioTaximetroConsumible = 0;
                string tabla = "";
                string IDCapitulo = "";
                string campo = "";
                int dias = 0;
                int diasxMes = 0;
                int diasDiferencia = 0;
                int diasRestar = 0;
                DateTime fechaPrecios;
                bool hayPrecio = false;
                bool primeraVez = true;
                int lineaCapitulo;
                int lineaProducto;
                System.Data.DataTable dtArticulos;
                System.Data.DataTable dtGastosPatio;
                DataRow[] filaEncontrada;
                DataRow[] filaEncontradaFenolico;
                string articulos = "";
                string articulosCambio = "";
                decimal precioCoste = 0;

                decimal importeGastosPatioEntregaDevolucionVentas = 0;
                decimal importeGastosPatioEntregaDevolucionAlquiler = 0;
                decimal importeGastosPatioClasificacionReparacionAlquiler = 0;

                decimal importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                decimal importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                decimal importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;

                decimal importeFacturacionAlquilerCapitulos = 0;
                decimal importeCosteTaximetroNoConsumibleCapitulos = 0;
                decimal importeCosteTaximetroConsumibleCapitulos = 0;
                decimal importeCosteBonificacionTaximetroConsumibleCapitulos = 0;
                decimal importeFacturacionVentaCapitulos = 0;
                decimal importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeFacturacionVentFenolicoNuevoCapitulos = 0;
                decimal importeFacturacionVentaUneCifCapitulos = 0;
                decimal importeFacturacionVentaMontajesCapitulos = 0;
                decimal importeFacturacionVentaProductoCapitulos = 0;
                decimal importeCosteVentaCapitulos = 0;
                decimal importeGastosFijosBUVentaCapitulos = 0;
                decimal importeGastosFijosBUAlquilerCapitulos = 0;
                decimal importeGastosFijosCentralesVentaCapitulos = 0;
                decimal importeGastosFijosCentralesAlquilerCapitulos = 0;
                decimal importeFacturacionVentaOtrosServiciosCapitulos = 0;
                decimal importeCosteVentaOtrosServiciosCapitulos = 0;

                decimal importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;

                decimal importeCosteVentaFenolicoNuevoCapitulos = 0;
                decimal importeCosteVentaNuevoCapitulos = 0;
                decimal importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                decimal importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                decimal importeCosteVentaUneCifCapitulos = 0;
                decimal importeGastosVariablesVentaUneCifCapitulos = 0;
                decimal importeGastosFijosBUVentaUneCifCapitulos = 0;
                decimal importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                decimal importeCosteVentaMontajesCapitulos = 0;
                decimal importeGastosVariablesVentaMontajesCapitulos = 0;
                decimal importeGastosFijosBUVentaMontajesCapitulos = 0;
                decimal importeGastosFijosCentralesVentaMontajesCapitulos = 0;

                tablaOfertas.AxdEntity_SalesQuotationTable[] axdEntity_SalesQuotationTables;
                tablaOfertas.AxdEntity_SalesQuotationTable axdEntity_SalesQuotationTable;
                tablaOfertas.AxdEntity_SalesQuotationLine[] axdEntity_SalesQuotationLines;
                tablaOfertas.AxdEntity_SalesQuotationLine axdEntity_SalesQuotationLine;

                lblVersionUtilizada.Text = "";
                imgWarning.Visible = true;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";

                horaTotal_1 = DateTime.Now;
                System.Collections.IEnumerator enumerator_1;
                fechaPrecios = new DateTime();

                // CABECERA
                decimal importeAlquiler = 0;
                decimal importeVenta = 0;
                decimal importePorte = 0;
                decimal importePorte_TR001 = 0;
                decimal importeCosteTaximetroNoConsumible = 0;
                decimal importeCosteTaximetroConsumible = 0;
                decimal importeCosteVenta = 0;
                decimal importeCostePorte = 0;
                decimal importeMargenAlquiler = 0;
                decimal importeMargenVenta = 0;

                numeroRandom = rnd.Next();
                numeroRandom = rnd.Next();
                usuario = User.Identity.Name.ToString() + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();
                if (User.Identity.Name.ToString() == "")
                    usuario = "diana" + "_" + hora_1.Minute.ToString("00") + "_" + hora_1.Second.ToString("00") + "_" + hora_1.Millisecond.ToString("00") + "_" + numeroRandom.ToString();


                horaLlamada_1 = DateTime.Now;
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "SalesQuotationMasterTable";
                tablaOfertas.CallContext contexto_1 = new tablaOfertas.CallContext();
                contexto_1.Company = empresa;

                dondeVa = "SalesQuotationMasterTable muchos criterios";
                tablaOfertas.QueryCriteria criterio_1 = new tablaOfertas.QueryCriteria();
                criterio_1.CriteriaElement = new tablaOfertas.CriteriaElement[listaNumeros.Count];
                numeros = "";
                numOferta = 0;
                foreach (string nOferta in listaNumeros)
                {
                    criterio_1.CriteriaElement[numOferta] = new tablaOfertas.CriteriaElement();
                    criterio_1.CriteriaElement[numOferta].FieldName = "QuotationId";
                    criterio_1.CriteriaElement[numOferta].DataSourceName = "SalesQuotationMasterTable";
                    criterio_1.CriteriaElement[numOferta].Operator = tablaOfertas.Operator.Equal;
                    criterio_1.CriteriaElement[numOferta].Value1 = nOferta;
                    numOferta = numOferta + 1;
                    numeros = numeros + " / " + nOferta;
                }
 
                dondeVa = "SalesQuotationMasterTable proxy";
                tablaOfertas.SalesQuotationsServiceClient proxy_1 = new tablaOfertas.SalesQuotationsServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;
                tablaOfertas.AxdSalesQuotations axdTablaOfertas_1 = proxy_1.find(contexto_1, criterio_1);

                dondeVa = "SalesQuotationMasterTable proxy find";

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                horaProcesar_1 = DateTime.Now;
                if (axdTablaOfertas_1.SalesQuotationMasterTable is null)
                {
                    proxy_1.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO se ha encontrado la oferta indicada";
                    return;
                }
                else
                {
                    proxy_1.Close();

                    enumerator_1 = axdTablaOfertas_1.SalesQuotationMasterTable.GetEnumerator();
                    dtArticulos = new System.Data.DataTable();
                    dtGastosPatio = new System.Data.DataTable();

                    while (enumerator_1.MoveNext())
                    {
                        dondeVa = "Oferta";
                        tablaOfertas.AxdEntity_SalesQuotationMasterTable axdEntity_SalesQuotationMasterTable = (tablaOfertas.AxdEntity_SalesQuotationMasterTable)enumerator_1.Current;
                        datosGenerales = axdEntity_SalesQuotationMasterTable.QuotationId + " / " + axdEntity_SalesQuotationMasterTable.CustAccount + " / " + axdEntity_SalesQuotationMasterTable.QuotationName + " / " + axdEntity_SalesQuotationMasterTable.MasterObrasId + " // " + axdEntity_SalesQuotationMasterTable.CostCenter + " // " + axdEntity_SalesQuotationMasterTable.CurrencyCode;

                        codigosTransporte = "";
                        calcularCodigosTransporte(ref codigosTransporte, empresa, axdEntity_SalesQuotationMasterTable.Delegation);

                        moneda = axdEntity_SalesQuotationMasterTable.CurrencyCode;
                        masterObra = axdEntity_SalesQuotationMasterTable.MasterObrasId;
                        numeroOferta = axdEntity_SalesQuotationMasterTable.QuotationId.ToString();

                        if (axdEntity_SalesQuotationMasterTable.SalesRental.ToString().ToUpper() == "SALES")
                            esVenta = true;
                        else
                            esVenta = false;

                        dondeVa = "Recuperar versión a aplicar";
                        localizarVersion(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        // DATOS PANELES
                        dtArticulosPaneles = new DataTable();
                        dtArticulosPaneles = localizarPaneles(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));

                        // DATOS CONFIGURACION
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear conexion";
                        comando = conexion.CreateCommand();
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear comando";
                        comando.CommandText = "ROP_DatosConfiguracionGeneral";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear adaptador";
                        adaptador.Fill(dtTabla);
                        dondeVa = "Recuperar datos configuracion ROP_DatosConfiguracionGeneral crear datatable";
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();
                        dondeVa = "fin recuperar datos configuracion ROP_DatosConfiguracionGeneral";

                        for (int i = 0; i < dtTabla.Rows.Count; i++)
                        {
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "DÍAS POR MES")
                                diasxMes = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS ENTRE FECHA OFERTA Y FECHA CAPÍTULO")
                                diasDiferencia = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "CÁLCULO FECHA BASE: DÍAS A RETROCEDER FECHA CREACIÓN DEL CAPÍTULO DE LA OFERTA")
                                diasRestar = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "MES PRESUPUESTO VÁLIDO")
                                mesPresupuestoValido = Convert.ToInt32(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]));
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL ADMINISTRATIVO EN VARIABLE")
                                porcentajeGastoAdmministrativoVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE GASTO PERSONAL COMERCIAL EN VARIABLE")
                                porcentajeGastoComercialVariable = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "PORCENTAJE MÁXIMO TOTAL FACTURACIÓN")
                                porcentajeMaximoTotalFacturacion = Convert.ToDecimal(Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);

                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS BU")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosBUAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                    gastosFijosBUVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                            if (Convert.ToString(dtTabla.Rows[i]["Concepto"]).ToUpper() == "GASTOS FIJOS CENTRALES")
                            {
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "ALQUILER")
                                    gastosFijosCentralesAlquiler = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (Convert.ToString(dtTabla.Rows[i]["Tipo"]).ToUpper() == "VENTA")
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                if (String.IsNullOrEmpty(Convert.ToString(dtTabla.Rows[i]["Tipo"])))
                                {
                                    gastosFijosCentralesAlquiler = Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100;
                                    gastosFijosCentralesVenta = (Convert.ToDecimal(dtTabla.Rows[i]["Valor"]) / 100);
                                }
                            }
                        }

                        // DATOS COSTE TRANSPORTE
                        dondeVa = "Recuperar datos transporte ";
                        decimal valorCostePorte = 0;
                        decimal margenPorte = 0;

                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_TransporteCambiarAKilometros";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@unidadMedida", null);
                        comando.Parameters.AddWithValue("@medida", axdEntity_SalesQuotationMasterTable.Kilometer);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        if (dtTabla.Rows.Count > 0)
                            kilometros = Convert.ToDecimal(dtTabla.Rows[0]["medida"]);

                        dondeVa = "Salió de conversion transporte";

                        dondeVa = "ROP_DatosConfiguracionTransporte";
                        strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                        conexion = new SqlConnection(strConexion);
                        conexion.Open();
                        comando = conexion.CreateCommand();
                        comando.CommandText = "ROP_DatosConfiguracionTransporte";
                        comando.CommandTimeout = 240000;
                        comando.CommandType = CommandType.StoredProcedure;
                        comando.Parameters.AddWithValue("@empresa", empresa);
                        comando.Parameters.AddWithValue("@delegacion", axdEntity_SalesQuotationMasterTable.Delegation.ToString());
                        if (kilometros <= 120)
                            comando.Parameters.AddWithValue("@distancia", "<= 120");
                        else
                            if (kilometros >= 120)
                            comando.Parameters.AddWithValue("@distancia", "> 120");
                        else
                            comando.Parameters.AddWithValue("@distancia", DBNull.Value);
                        if (cmbVersion.SelectedValue == "")
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                            comando.Parameters.AddWithValue("@CFG_ID", null);
                        else
                            comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                        comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                        comando.Parameters.AddWithValue("@monedaA", moneda);
                        comando.Parameters.AddWithValue("@usuario", usuario);
                        dtTabla = new System.Data.DataTable();
                        adaptador = new SqlDataAdapter(comando);
                        adaptador.Fill(dtTabla);
                        adaptador.Dispose();
                        comando.Dispose();
                        conexion.Close();
                        conexion.Dispose();

                        dondeVa = "ROP_DatosConfiguracionTransporte salio";
                        if (dtTabla.Rows.Count > 0)
                        {
                            dondeVa = "ROP_DatosConfiguracionTransporte valorCostePorte";
                            valorCostePorte = (Convert.ToDecimal(dtTabla.Rows[0]["Valor"]) / 100);
                            dondeVa = "ROP_DatosConfiguracionTransporte Margen";
                            margenPorte = Convert.ToDecimal(dtTabla.Rows[0]["Margen"]) / 100;
                        }
                        dondeVa = "Salió de ROP_DatosConfiguracionTransporte";

                        axdEntity_SalesQuotationTables = axdEntity_SalesQuotationMasterTable.SalesQuotationTable;

                        // Recoger los artículos de toda la oferta
                        if (axdEntity_SalesQuotationTables is null)
                            datosGenerales = "NO HAY DATOS DE LOS CAPÍTULOS";
                        else
                        {
                            articulos = ";";
                            articulosCambio = ";";
                            articulosConfiguracion = "|";

                            DateTime horaDatosPase1_1 = DateTime.Now;
                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                dondeVa = "recorrer capitulos " + capitulo.ToString();
                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];

                                axdEntity_SalesQuotationLines = axdEntity_SalesQuotationTable.SalesQuotationLine;

                                if (axdEntity_SalesQuotationLines is null)
                                    datosGenerales = "NO HAY DATOS DE LAS LÍNEAS";
                                else
                                {
                                    for (lineaProducto = 0; lineaProducto < axdEntity_SalesQuotationLines.Length; lineaProducto++)
                                    {

                                        dondeVa = "recorrer productos " + lineaProducto.ToString();
                                        axdEntity_SalesQuotationLine = axdEntity_SalesQuotationLines[lineaProducto];
                                        dondeVa = "recorrer productos + línea de la oferta";

                                        dondeVa = "recorrer productos + recuperar axdEntity_SalesQuotationLine.ItemId";
                                        if (codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) >= 0)
                                            existeTR001 = true;

                                        dondeVa = "recorrer productos + recuperar axdEntity_SalesQuotationLine.ItemId -sale-";
                                        // artículos si hay ficha
                                        if (!listaArticulosPedido.Contains(axdEntity_SalesQuotationLine.ItemId.ToString()))
                                        {
                                            dondeVa = "recorrer productos + en listaArticulosPedido";
                                            listaArticulosPedido.Add(axdEntity_SalesQuotationLine.ItemId.ToString());
                                            if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0)
                                                listaFechasPedido.Add(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value));
                                            else
                                                listaFechasPedido.Add(new DateTime());
                                        }

                                        // artículos si no hay ficha
                                        if (!listaArticulosSinFicha.Contains(axdEntity_SalesQuotationLine.ItemId.ToString()))
                                        {
                                            dondeVa = "recorrer productos + en listaArticulosSinFicha";
                                            articulosConfiguracion = articulosConfiguracion + axdEntity_SalesQuotationLine.ItemId.ToString() + "|";
                                            listaArticulosSinFicha.Add(axdEntity_SalesQuotationLine.ItemId.ToString());
                                        }
                                    }
                                    dondeVa = "fin recorrer productos";

                                    // Calculo de la fecha a utilizar
                                    //o   ¿La oferta está asociada a una ficha ?
                                    //	SI:
                                    //•	Fecha base = Fecha base ficha
                                    //•	Consultar tabla BaseDateItemObra
                                    //	NO:
                                    //•	¿Existe cabecera de oferta? (RefQuotationMaster)
                                    //o   NO: Fecha base = Fecha creación capitulo
                                    //o SI: ¿fecha creación capítulo > p1 días fecha creación cabecera?
                                    //	NO: fecha base = fecha creación capitulo
                                    //	SI: fecha base = fecha creación capitulo – p2 días
                                    if (String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                                    {
                                        dondeVa = "no hay ficha";
                                        fechaPrecios = new DateTime();
                                        if (axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString().Length > 0 && axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString().Length > 0)
                                        {
                                            dias = Math.Abs(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Subtract(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value)).Days);
                                            if (Math.Abs(Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value).Subtract(Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value)).Days) > diasDiferencia)
                                            {
                                                fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value).AddDays((-1) * diasRestar);
                                                tabla = "SalesQuotationMasterTable";
                                                IDCapitulo = axdEntity_SalesQuotationTable.QuotationId;
                                                campo = "CreatedDateTime - " + diasRestar.ToString();
                                            }
                                            else
                                            {
                                                fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                                tabla = "SalesQuotationMasterTable";
                                                IDCapitulo = axdEntity_SalesQuotationTable.QuotationId;
                                                campo = "CreatedDateTime";
                                            }
                                        }
                                        else
                                        {
                                            if (axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString().Length > 0)
                                            {
                                                fechaPrecios = Convert.ToDateTime(axdEntity_SalesQuotationTable.CreatedDateTime.Value);
                                                tabla = "SalesQuotationMasterTable";
                                                IDCapitulo = axdEntity_SalesQuotationTable.QuotationId;
                                                campo = "CreatedDateTime";
                                            }
                                        }

                                        for (lineaCapitulo = 0; lineaCapitulo < listaArticulosSinFicha.Count; lineaCapitulo++)
                                        {
                                            if (String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                                            {
                                                articulos = articulos + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                                            }
                                            articulosCambio = articulosCambio + listaArticulosSinFicha.ElementAt(lineaCapitulo) + "|" + fechaPrecios + ";";
                                        }
                                        // Fin calculo de la fecha a utilizar
                                    }
                                }
                            }
                            TimeSpan horaDatosPase1_2 = DateTime.Now.Subtract(horaDatosPase1_1);

                            // Calculo de la fecha a utilizar
                            //o   ¿La oferta está asociada a una ficha ?
                            //	SI:
                            //•	Fecha base = Fecha base ficha
                            //•	Consultar tabla BaseDateItemObra
                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.ObraId))
                            {
                                fechaPrecios = new DateTime();
                                fechaPrecios = DateTime.Now;
                                dondeVa = "fecha base ficha artículo:entró";
                                fechaBaseFichaArticulo(ref listaOfertas, ref listaFechasOferta, ref listaArticulosPedido, ref listaFechasPedido, empresa, axdEntity_SalesQuotationMasterTable.ObraId.ToString(), diasDiferencia, diasRestar);
                                dondeVa = "fecha base ficha artículo: salió";

                                tabla = "fechaBaseFichaArticulo";
                                IDCapitulo = "Ficha " + axdEntity_SalesQuotationMasterTable.ObraId;
                                campo = "fechaBaseFichaArticulo";

                                articulos = ";";
                                articulosCambio = ";";
                                for (lineaCapitulo = 0; lineaCapitulo < listaArticulosPedido.Count; lineaCapitulo++)
                                {
                                    articulos = articulos + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";
                                    articulosCambio = articulosCambio + listaArticulosPedido.ElementAt(lineaCapitulo) + "|" + listaFechasPedido.ElementAt(lineaCapitulo).ToString() + ";";

                                    if (listaFechasPedido.ElementAt(lineaCapitulo) < fechaPrecios)
                                        fechaPrecios = listaFechasPedido.ElementAt(lineaCapitulo);
                                }
                            }

                            if (fechaPrecios != new DateTime())
                            {
                                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
                                conexion = new SqlConnection(strConexion);
                                conexion.Open();
                                comando = conexion.CreateCommand();
                                comando.CommandText = "sp_ROP_FechaBaseOfertaIncluir";
                                comando.CommandType = CommandType.StoredProcedure;
                                comando.Parameters.AddWithValue("@FBO_Oferta", numeros);
                                comando.Parameters.AddWithValue("@FBO_Capitulo", IDCapitulo);
                                comando.Parameters.AddWithValue("@FBO_Fecha", fechaPrecios);
                                comando.Parameters.AddWithValue("@FBO_Articulo", articulos.Replace("'", ""));
                                comando.Parameters.AddWithValue("@FBO_TablaFechaSeleccionada", tabla);
                                comando.Parameters.AddWithValue("@FBO_CampoFechaSeleccionada1", campo);
                                comando.Parameters.AddWithValue("@FBO_DiasDiferencia", dias);
                                comando.Parameters.AddWithValue("@primeraVez", primeraVez);
                                comando.ExecuteNonQuery();
                                conexion.Close();
                                primeraVez = false;

                                dondeVa = "localizar precios artículos";

                                dtArticulos = localizarPreciosArticulos(empresa, axdEntity_SalesQuotationMasterTable.Delegation.ToString(), articulos, moneda, articulosCambio, "", usuario);
                                hayPrecio = true;
                            }

                            DateTime horaDatosConfigurados_1 = DateTime.Now;
                            dtGastosPatio = gastosPatio(empresa, articulos, fechaPrecios, moneda, usuario);

                            TimeSpan horaDatosConfigurados_2 = DateTime.Now.Subtract(horaDatosConfigurados_1);
                            DateTime horaDatosPase2_1 = DateTime.Now;
                            for (int capitulo = 0; capitulo < axdEntity_SalesQuotationTables.Length; capitulo++)
                            {
                                dondeVa = "* recorrer capitulos " + capitulo.ToString();

                                axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];
                                axdEntity_SalesQuotationLines = axdEntity_SalesQuotationTable.SalesQuotationLine;

                                if (axdEntity_SalesQuotationLines is null)
                                    datosGenerales = "NO HAY DATOS DE LAS LÍNEAS";
                                else
                                {
                                    axdEntity_SalesQuotationTable = axdEntity_SalesQuotationTables[capitulo];

                                    if (axdEntity_SalesQuotationTable.QuotationTitle is null)
                                        tituloCapitulo = "";
                                    else
                                        tituloCapitulo = " / " + axdEntity_SalesQuotationTable.QuotationTitle.ToString();


                                    //importePorte_TR001 = 0;
                                    //importeCostePorte = 0;
                                    importePorte = 0;

                                    importeFacturacionAlquilerCapitulos = 0;
                                    importeFacturacionVentaCapitulos = 0;
                                    importeFacturacionVentaDepartamentoTecnicoCapitulos = 0;
                                    importeFacturacionVentFenolicoNuevoCapitulos = 0;
                                    importeFacturacionVentaUneCifCapitulos = 0;
                                    importeFacturacionVentaMontajesCapitulos = 0;
                                    importeFacturacionVentaProductoCapitulos = 0;
                                    importeCosteVentaDepartamentoTecnicoCapitulos = 0;
                                    importeGastosVariablesVentaDepartamentoTecnicoCapitulos = 0;
                                    importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = 0;
                                    importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = 0;
                                    importeFacturacionVentaOtrosServiciosCapitulos = 0;
                                    importeCosteVentaOtrosServiciosCapitulos = 0;

                                    importeGastosVariablesEntregaDevolucionAlquilerCapitulos = 0;
                                    importeGastosVariablesEntregaDevolucionVentaCapitulos = 0;
                                    importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = 0;
                                    importeGastosVariablesClaisificacionReparacionVentaCapitulos = 0;
                                    importeCosteVentaFenolicoNuevoCapitulos = 0;
                                    importeGastosVariablesVentaFenolicoNuevoCapitulos = 0;
                                    importeGastosFijosBUVentaFenolicoNuevoCapitulos = 0;
                                    importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = 0;

                                    importeCosteVentaUneCifCapitulos = 0;
                                    importeGastosVariablesVentaUneCifCapitulos = 0;
                                    importeGastosFijosBUVentaUneCifCapitulos = 0;
                                    importeGastosFijosCentralesVentaUneCifCapitulos = 0;

                                    importeCosteVentaMontajesCapitulos = 0;
                                    importeGastosVariablesVentaMontajesCapitulos = 0;
                                    importeGastosFijosBUVentaMontajesCapitulos = 0;
                                    importeGastosFijosCentralesVentaMontajesCapitulos = 0;

                                    importeGastosFijosBUAlquilerCapitulos = 0;
                                    importeGastosFijosBUVentaCapitulos = 0;

                                    importeGastosFijosCentralesAlquilerCapitulos = 0;
                                    importeGastosFijosCentralesVentaCapitulos = 0;

                                    importeCosteVentaCapitulos = 0;
                                    importeCosteTaximetroNoConsumibleCapitulos = 0;
                                    importeCosteTaximetroConsumibleCapitulos = 0;
                                    importeCosteBonificacionTaximetroConsumibleCapitulos = 0;


                                    // RECUPERAR LOS DATOS DE CONFIGURACIÓN: TAXIMETRO - GASTOS - AJUSTES
                                    horaDatosConfigurados_3 = DateTime.Now;

                                    dondeVa = "ROP_DatosConfiguracion";
                                    dtDatosConfiguracion = new System.Data.DataTable();
                                    horaDatosConfigurados_3 = DateTime.Now;
                                    conexion = new SqlConnection(strConexion);
                                    conexion.Open();
                                    comando = conexion.CreateCommand();
                                    comando.CommandText = "ROP_DatosConfiguracion";
                                    comando.CommandTimeout = 240000;
                                    comando.CommandType = CommandType.StoredProcedure;
                                    comando.Parameters.AddWithValue("@empresa", empresa);
                                    comando.Parameters.AddWithValue("@usuario", usuario); // Environment.UserName);
                                    if (cmbVersion.SelectedValue == "")
                                        comando.Parameters.AddWithValue("@CFG_ID", null);
                                    else if (Convert.ToInt32(cmbVersion.SelectedValue) == -1)
                                        comando.Parameters.AddWithValue("@CFG_ID", null);
                                    else
                                        comando.Parameters.AddWithValue("@CFG_ID", Convert.ToInt32(cmbVersion.SelectedValue));
                                    comando.Parameters.AddWithValue("@fecha", Convert.ToDateTime(axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value));
                                    comando.Parameters.AddWithValue("@moneda", moneda);
                                    comando.Parameters.AddWithValue("@articulos", articulosConfiguracion);
                                    adaptadorDatosConfiguracion = new SqlDataAdapter(comando);
                                    adaptadorDatosConfiguracion.Fill(dtDatosConfiguracion);
                                    adaptadorDatosConfiguracion.Dispose();
                                    comando.Dispose();
                                    conexion.Close();
                                    conexion.Dispose();
                                    horaDatosConfigurados_4 = DateTime.Now.Subtract(horaDatosConfigurados_3);

                                    pesoCapitulo = 0;
                                    importePorte_TR001 = 0;
                                    hayTR001 = false;

                                    for (int producto = 0; producto < axdEntity_SalesQuotationLines.Length; producto++)
                                    {
                                        dondeVa = "* recorrer productos " + producto.ToString();

                                        axdEntity_SalesQuotationLine = axdEntity_SalesQuotationLines[producto];

                                        if (codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) >= 0)
                                            hayTR001 = true;

                                        DataRow oItemTaximetro = dtTaximetro.NewRow();
                                        oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty).ToString("#,##0.00");
                                        taximetroNoConsumible = 0;
                                        taximetroConsumible = 0;
                                        bonificacionTaximetroConsumible = 0;
                                        precioTaximetroNoConsumible = 0;
                                        precioTaximetroConsumible = 0;
                                        costeSuperficie = 0;
                                        superficie = 0;
                                        calcularPorSuperficie = false;
                                        metersInvoicing = false;
                                        productType = "";
                                        tipoServicio = "";

                                        precioCoste = 0;
                                        if (hayPrecio)
                                        {
                                            dondeVa = "buscar precio dataset";
                                            filaEncontrada = dtArticulos.Select("Articulo = '" + axdEntity_SalesQuotationLine.ItemId.Trim().ToString() + "'");
                                            if (filaEncontrada.Count() == 0 && codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) == -1)
                                            {
                                                salvarIndicencia(empresa, "OFERTA", axdEntity_SalesQuotationLine.ItemId.ToString(), "No hay PS del artículo.");

                                                imgWarning.Visible = true;
                                                lblMensajeError.Visible = true;
                                                lblMensajeError.Text = "(PED_1) No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'";

                                                oItemResultados = dtResultados.NewRow();
                                                oItemResultados["TIPO"] = "OFERTA // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                                oItemResultados["EMPRESA"] = empresa;
                                                oItemResultados["NUMERO"] = axdEntity_SalesQuotationTable.QuotationId.ToString();
                                                oItemResultados["ERROR"] = "(PED_1) No se ha localizado el precio del articulo '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'";
                                                dtResultados.Rows.Add(oItemResultados);
                                                oItemResultados = null;
                                                //return;
                                            }
                                            foreach (DataRow fila in filaEncontrada)
                                            {
                                                dondeVa = "encontró precio coste dataset // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Precio"])))
                                                {
                                                    precioCoste = Convert.ToDecimal(fila["Precio"]);
                                                    oItemTaximetro[COL_DATA_PRECIO_CAMBIO] = Convert.ToDecimal(fila["Precio"]).ToString("#,##0.00");
                                                }
                                                dondeVa = "fecha dataset // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Fecha"])))
                                                    fechaPrecio = Convert.ToDateTime(fila["Fecha"]);

                                                dondeVa = "Precio original // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["PrecioOriginal"])))
                                                    oItemTaximetro[COL_DATA_PRECIO_ORIGINAL] = Convert.ToDecimal(fila["PrecioOriginal"]).ToString("#,##0.00");
                                                dondeVa = "Fecha cambio // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["FechaCambio"])))
                                                    oItemTaximetro[COL_DATA_FECHA_CAMBIO] = Convert.ToDateTime(fila["FechaCambio"]).ToString("dd/MM/yyyy");
                                                dondeVa = "Cambio // " + articulosCambio + " // ";
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Cambio"])))
                                                    oItemTaximetro[COL_DATA_CAMBIO] = Convert.ToDecimal(fila["Cambio"]).ToString("#,##0.000000");
                                            }
                                        }

                                        // gastos variables patio
                                        clasificarRepararDirecto = 0;
                                        clasificarRepararIndirecto = 0;
                                        clasificarDirecto = 0;
                                        clasificarIndirecto = 0;
                                        repararDirecto = 0;
                                        repararIndirecto = 0;
                                        entrega = 0;
                                        devolucion = 0;
                                        naviera = 0;

                                        filaEncontrada = dtGastosPatio.Select("ProductId = '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'");
                                        foreach (DataRow fila in filaEncontrada)
                                        {
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["Entrega"])))
                                                entrega = Convert.ToDecimal(fila["Entrega"]);
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["Devolucion"])))
                                                devolucion = Convert.ToDecimal(fila["Devolucion"]);
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["Naviera"])))
                                                naviera = Convert.ToDecimal(fila["Naviera"]);

                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarReparar"])))
                                            {
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararDirecto"])))
                                                    clasificarRepararDirecto = Convert.ToDecimal(fila["ClasificarRepararDirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarRepararIndirecto"])))
                                                    clasificarRepararIndirecto = Convert.ToDecimal(fila["ClasificarRepararIndirecto"]);
                                            }
                                            else
                                            {
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarDirecto"])))
                                                    clasificarDirecto = Convert.ToDecimal(fila["ClasificarDirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["ClasificarIndirecto"])))
                                                    clasificarIndirecto = Convert.ToDecimal(fila["ClasificarIndirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararDirecto"])))
                                                    repararDirecto = Convert.ToDecimal(fila["RepararDirecto"]);
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["RepararIndirecto"])))
                                                    repararIndirecto = Convert.ToDecimal(fila["RepararIndirecto"]);
                                            }
                                            precioGastosPatio = Convert.ToDecimal(fila["Precio"]);
                                        }

                                        // recuperar datos de configuración del datatable
                                        dondeVa = "";
                                        listaBonificacionesDesde.Clear();
                                        listaBonificacionesHasta.Clear();
                                        listaBonificacionesValor.Clear();
                                        diasDesdeTaxNoConsumible = 0;
                                        diasHastaTaxNoConsumible = 0;
                                        pesoArticulo = 0;
                                        filaEncontrada = dtDatosConfiguracion.Select("Itemid = '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'");
                                        if (filaEncontrada.Count() == 0)
                                        {
                                            oItemResultados = dtResultados.NewRow();
                                            oItemResultados["TIPO"] = "OFERTA // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                            oItemResultados["EMPRESA"] = empresa;
                                            oItemResultados["NUMERO"] = axdEntity_SalesQuotationTable.QuotationId.ToString();
                                            oItemResultados["ERROR"] = "No se han localizado datos de configuración para '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "' // Usuario: " + usuario + "  //  artículos: " + articulosConfiguracion; ;
                                            dtResultados.Rows.Add(oItemResultados);
                                            oItemResultados = null;
                                        }
                                        foreach (DataRow fila in filaEncontrada)
                                        {
                                            dondeVa = "encontró configuracion dataset // " + axdEntity_SalesQuotationLine.ItemId.ToString() + " // ";

                                            dondeVa = "Peso del artículo";
                                            pesoArticulo = Convert.ToDecimal(fila["WeightVolumeKg"]);
                                            dondeVa = "encontró configuracion dataset // Tipo Servicio ";
                                            if (!String.IsNullOrEmpty(Convert.ToString(fila["CFGSERV_Tipo"])))
                                                tipoServicio = Convert.ToString(fila["CFGSERV_Tipo"]);
                                            dondeVa = "encontró configuracion dataset // Coste superficie";
                                            if (Convert.ToString(fila["Concepto"]) == "Coste superficie")
                                            {
                                                cambio = Convert.ToDecimal(fila["Cambio"]);
                                                costeSuperficie = Convert.ToDecimal(fila["Valor"]) * cambio;
                                            }
                                            dondeVa = "encontró configuracion dataset // Taxímetro consumible";
                                            if (Convert.ToString(fila["Concepto"]) == "Taxímetro consumible")
                                            {
                                                taximetroConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                                dondeVa = "encontró configuracion dataset // Desde Bonificacion";
                                                listaBonificacionesDesde.Add(Convert.ToInt32(fila["Desde"]));
                                                dondeVa = "encontró configuracion dataset // Hasta Bonificacion";
                                                listaBonificacionesHasta.Add(Convert.ToInt32(fila["Hasta"]));
                                                dondeVa = "encontró configuracion dataset // Ajuste Bonificacion";
                                                listaBonificacionesValor.Add(Convert.ToDecimal(fila["Ajuste"]));

                                                calcularPorSuperficie = false;
                                                dondeVa = "encontró configuracion dataset // Valorar";
                                                superficie = 0;
                                                if (!String.IsNullOrEmpty(Convert.ToString(fila["Valorar"])))
                                                    if (Convert.ToString(fila["Valorar"]).ToUpper() == "SUPERFICIE")
                                                    {
                                                        calcularPorSuperficie = true;
                                                        dondeVa = "encontró configuracion dataset // Superficie";
                                                        superficie = Convert.ToDecimal(fila["Superficie"]);
                                                    }
                                            }
                                            dondeVa = "encontró configuracion dataset // Tax no consumible";
                                            diasDesdeTaxNoConsumible = 0;
                                            diasHastaTaxNoConsumible = 0;
                                            if (Convert.ToString(fila["Concepto"]) == "Taxímetro no consumible" && (calcularPorSuperficie || taximetroConsumible == 0))
                                            {
                                                dondeVa = "encontró configuracion dataset // Valor tax no consumible";
                                                taximetroNoConsumible = (Convert.ToDecimal(fila["Valor"]) / 100);
                                                diasDesdeTaxNoConsumible = Convert.ToInt32(fila["Desde"]);
                                                diasHastaTaxNoConsumible = Convert.ToInt32(fila["Hasta"]);
                                            }

                                            dondeVa = "encontró configuracion dataset // Meters";
                                            metersInvoicing = Convert.ToBoolean(fila["MetersInvoicing"]);
                                            dondeVa = "encontró configuracion dataset // Tipo producto";
                                            productType = Convert.ToString(fila["ProductTypeName_es"]);

                                            dondeVa = "encontró configuracion dataset // Correcion PS Nuevo";
                                            if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Nuevo")
                                                coeficienteNuevo = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Correcion PS Usado";
                                            if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Usado")
                                                coeficienteUsado = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Correcion PS servicio";
                                            //if (Convert.ToString(fila["Concepto"]) == "Coef. Corrección PS Servicio")
                                            //    coeficienteServicio = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Tipo artículo " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            tipoArticulo = Convert.ToString(fila["TipoArticulo"]);

                                            dondeVa = "encontró configuracion dataset // Porcentaje coste material nuevo " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            // Fenólico / Nuevo
                                            if (Convert.ToString(fila["Concepto"]) == "Porcentaje coste material nuevo")
                                                porcentajeCosteMaterialNuevo = Convert.ToDecimal(fila["Valor"]);
                                            dondeVa = "encontró configuracion dataset // Canon fenólico nuevo panel estándar " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel estándar")
                                            {
                                                cambio = Convert.ToDecimal(fila["Cambio"]);
                                                costeFenolicoNuevoEstandar = Convert.ToDecimal(fila["Valor"]) * cambio;
                                            }
                                            dondeVa = "encontró configuracion dataset // Canon fenólico nuevo panel especial " + axdEntity_SalesQuotationLine.ItemId.ToString();
                                            if (Convert.ToString(fila["Concepto"]) == "Canon fenólico nuevo panel especial")
                                            {
                                                cambio = Convert.ToDecimal(fila["Cambio"]);
                                                costeFenolicoNuevoEspecial = Convert.ToDecimal(fila["Valor"]) * cambio;
                                            }
                                        }

                                        dondeVa = "salio configuracion dataset";

                                        dondeVa = "Artículo nuevo/usado";

                                        importeCosteMaterialNuevo = 0;
                                        importeCosteMaterialFenolico = 0;

                                        if (tipoArticulo == "NUEVO")
                                        {
                                            coeficienteUsar = coeficienteNuevo;
                                            oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteNuevo).ToString("#,##0.00");

                                            importeCosteMaterialNuevo = (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * precioCoste * porcentajeCosteMaterialNuevo);
                                        }
                                        //if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                        //{
                                        //    coeficienteUsar = coeficienteServicio;
                                        //    oItemTaximetro[COL_DATA_PRECIO_CORRECION_NUEVO] = (precioCoste * coeficienteServicio).ToString("#,##0.00");
                                        //}
                                        if (tipoArticulo == "USADO")
                                        {
                                            coeficienteUsar = coeficienteUsado;
                                            oItemTaximetro[COL_DATA_PRECIO_CORRECION_USADO] = (precioCoste * coeficienteUsado).ToString("#,##0.00");
                                        }

                                        dondeVa = "Guarda datos taxímetro";
                                        oItemTaximetro[COL_DATA_FECHA_DOC] = axdEntity_SalesQuotationMasterTable.CreatedDateTime.Value.ToString();
                                        oItemTaximetro[COL_DATA_FECHA_CAPITULO] = axdEntity_SalesQuotationTable.CreatedDateTime.Value.ToString();
                                        oItemTaximetro[COL_DATA_CAPITULO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        oItemTaximetro[COL_DATA_ITEM] = axdEntity_SalesQuotationLine.ItemId.ToString();
                                        oItemTaximetro[COL_DATA_TIPO_ITEM] = tipoArticulo;
                                        oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = 0;
                                        oItemTaximetro[COL_DATA_IMPORTE_VENTA] = 0;

                                        oItemTaximetro[COL_DATA_PRECIO] = precioCoste.ToString("#,##0.00");
                                        oItemTaximetro[COL_DATA_FECHA] = fechaPrecio.ToString("dd/MM/yyyy");
                                        oItemTaximetro[COL_DATA_TIPO_CAPITULO] = axdEntity_SalesQuotationTable.SalesRental.ToString().ToUpper();
                                        oItemTaximetro[COL_DATA_PRECIO_GASTOS_PATIO] = precioGastosPatio.ToString("##0.00");

                                        dondeVa = "Fenólico";
                                        //if (tipoArticulo == "MIXTO")
                                        //{
                                        filaEncontradaFenolico = dtArticulosPaneles.Select("Itemid = '" + axdEntity_SalesQuotationLine.ItemId.ToString() + "'");
                                        foreach (DataRow filaFenolico in filaEncontradaFenolico)
                                        {
                                            if (Convert.ToBoolean(filaFenolico["Estandar"]))
                                                importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * superficie * costeFenolicoNuevoEstandar);
                                            else
                                                importeCosteMaterialFenolico = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * superficie * costeFenolicoNuevoEspecial);
                                        }
                                        importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + importeCosteMaterialFenolico;
                                        //}


                                        // gastos oficina
                                        //DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                                        //oItemGastosOficina["CAPITULO"] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        //oItemGastosOficina["ITEM"] = axdEntity_SalesQuotationLine.ItemId.ToString();
                                        //oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                                        //oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                                        //oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                                        //oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                                        //oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                                        //oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                                        //oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                                        //oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                                        //oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                                        //oItemGastosOficina["IMPORTE VENTA"] = "0.00";
                                        //oItemGastosOficina["IMPORTE ALQUILER"] = "0.00";
                                        //oItemGastosOficina["IMPORTE"] = "0.00";

                                        if (axdEntity_SalesQuotationTable.SalesRental.ToString().ToUpper() == "SALES")
                                        {
                                            dondeVa = "VENTAS";

                                            dondeVa = "VENTAS: Gastos variables";
                                            importeGastosPatioEntregaDevolucionVentas = 0;
                                            importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio;
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                    importeGastosPatioEntregaDevolucionVentas = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio;
                                            importeGastosVariablesEntregaDevolucionVentaCapitulos = importeGastosVariablesEntregaDevolucionVentaCapitulos + importeGastosPatioEntregaDevolucionVentas;

                                            oItemTaximetro[COL_DATA_VENTAS_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_VENTAS_DEVOLUCION] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_ENTREGA_NAVIERA] = "0.00";
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                    oItemTaximetro[COL_DATA_VENTAS_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");

                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_DIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_REPARAR_INDIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_DIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_CLASIFICAR_INDIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_REPARAR_DIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_REPARAR_INDIRECTO] = "0.00";
                                            oItemTaximetro[COL_DATA_VENTAS_GASTOS_PATIO] = importeGastosPatioEntregaDevolucionVentas.ToString("##0.00");

                                            dondeVa = "VENTAS: Guardar coeficiente nuevo/usado";
                                            if (tipoArticulo == "NUEVO")
                                                oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteNuevo.ToString("##0.00");
                                            //if (tipoArticulo.IndexOf("SERVICIOS") > 0)
                                            //    oItemTaximetro[COL_DATA_COEFICIENTE_NUEVO] = coeficienteServicio.ToString("S ##0.00");
                                            if (tipoArticulo == "USADO")
                                                oItemTaximetro[COL_DATA_COEFICIENTE_USADO] = coeficienteUsado.ToString("##0.00");

                                            dondeVa = "VENTAS: Calcular importe venta";
                                            importeVenta = importeVenta + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                            importeFacturacionVentaCapitulos = importeFacturacionVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);

                                            // mail 29/07/2021 Nacho: configuración manda sobre tipo producto
                                            if (tipoServicio.ToUpper() == "DPTO_TECNICO")
                                            {
                                                importeFacturacionVentaDepartamentoTecnicoCapitulos = importeFacturacionVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                // COSTEC:\Diana\Proyectos\Alsina ROP Informe\ROP_Informe\App_Start\
                                                //lblMensajeError.Visible = true;
                                                //lblMensajeError.Text = "Cantidad: " + axdEntity_SalesQuotationLine.SalesQty.ToString() + "// Precio coste: " + precioCoste.ToString() + " // Coeficiente a usar: " + coeficienteUsar.ToString();
                                                importeCosteVentaDepartamentoTecnicoCapitulos = importeCosteVentaDepartamentoTecnicoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste * coeficienteUsar;
                                                // Gastos variables
                                                //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaDepartamentoTecnicoCapitulos = importeGastosVariablesVentaDepartamentoTecnicoCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaDepartamentoTecnicoCapitulos = importeGastosFijosBUVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos = importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            else if (tipoServicio.ToUpper() == "MONTAJES")
                                            {
                                                importeFacturacionVentaMontajesCapitulos = importeFacturacionVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                // COSTE
                                                importeCosteVentaMontajesCapitulos = importeCosteVentaMontajesCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * precioCoste;
                                                // Gastos variables
                                                //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaMontajesCapitulos = importeGastosVariablesVentaMontajesCapitulos + importeGastosPatioVentas;
                                                // Gastos fijos BU
                                                importeGastosFijosBUVentaMontajesCapitulos = importeGastosFijosBUVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                // Gastos fijos centrales
                                                importeGastosFijosCentralesVentaMontajesCapitulos = importeGastosFijosCentralesVentaMontajesCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                            }
                                            else
                                            {
                                                if (productType.Trim().ToUpper() == "SERVICIO")
                                                {
                                                    dondeVa = "VENTAS: Servicio";
                                                    // Fenólico
                                                    if (axdEntity_SalesQuotationLine.CanonFenolico.HasValue && axdEntity_SalesQuotationLine.CanonFenolico != 0)
                                                    {
                                                        //if (chkBoxFenolico.Checked)
                                                        importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.CanonFenolico));
                                                        // COSTE
                                                        //importeCosteVentaFenolicoNuevoCapitulos = importeCosteVentaFenolicoNuevoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.CanonFenolico); 
                                                        // Gastos variables
                                                        //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                        //importeGastosVariablesVentaFenolicoNuevoCapitulos = importeGastosVariablesVentaFenolicoNuevoCapitulos + importeGastosPatioVentas;
                                                        // Gastos fijos BU
                                                        importeGastosFijosBUVentaFenolicoNuevoCapitulos = importeGastosFijosBUVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                        // Gastos fijos centrales
                                                        importeGastosFijosCentralesVentaFenolicoNuevoCapitulos = importeGastosFijosCentralesVentaFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                                    }
                                                    // SVP/CIF
                                                    else if (axdEntity_SalesQuotationLine.CanonImport.HasValue && axdEntity_SalesQuotationLine.CanonImport != 0)
                                                    {
                                                        importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                        // COSTE
                                                        importeCosteVentaUneCifCapitulos = importeCosteVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste) * (Convert.ToDecimal(axdEntity_SalesQuotationLine.Canon) / 100));
                                                        // Gastos variables
                                                        //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                        //importeGastosVariablesVentaUneCifCapitulos = importeGastosVariablesVentaUneCifCapitulos + importeGastosPatioVentas;
                                                        // Gastos fijos BU
                                                        importeGastosFijosBUVentaUneCifCapitulos = importeGastosFijosBUVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);
                                                        // Gastos fijos centrales
                                                        importeGastosFijosCentralesVentaUneCifCapitulos = importeGastosFijosCentralesVentaUneCifCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                                    }
                                                    // OTROS SERVICIOS
                                                    else
                                                    {
                                                        importeFacturacionVentaOtrosServiciosCapitulos = importeFacturacionVentaOtrosServiciosCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                        // COSTE
                                                        importeCosteVentaOtrosServiciosCapitulos = importeCosteVentaOtrosServiciosCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste));
                                                    }
                                                    oItemTaximetro[COL_DATA_IMPORTE_VENTA_SERVICIO] = Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount).ToString("#,##0.00");
                                                }
                                            }
                                            if (productType.Trim().ToUpper() != "SERVICIO")
                                            {
                                                dondeVa = "VENTAS: Producto";
                                                importeFacturacionVentaProductoCapitulos = importeFacturacionVentaProductoCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                                oItemTaximetro[COL_DATA_IMPORTE_VENTA_PRODUCTO] = Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount).ToString("#,##0.00");

                                                dondeVa = "Coste venta";
                                                importeCosteVentaCapitulos = importeCosteVentaCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioCoste * coeficienteUsar;

                                                // Gastos variables
                                                //dondeVa = "VENTAS: Gastos variables";
                                                //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosVariablesVenta);
                                                //importeGastosVariablesVentaCapitulos = importeGastosVariablesVentaCapitulos + importeGastosPatioVentas;

                                                // Gastos fijos BU
                                                dondeVa = "VENTAS: Gastos fijos BU";
                                                importeGastosFijosBUVentaCapitulos = importeGastosFijosBUVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta);

                                                // Gastos fijos centrales
                                                dondeVa = "VENTAS: Gastos fijos centrales";
                                                importeGastosFijosCentralesVentaCapitulos = importeGastosFijosCentralesVentaCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta);
                                            }

                                            dondeVa = "VENTAS: Datos en datatble taximetro";
                                            oItemTaximetro[COL_DATA_IMPORTE_VENTA] = Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUVenta.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosBUVenta).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesVenta.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount) * gastosFijosCentralesVenta).ToString("#,##0.00");
                                        }

                                        if (axdEntity_SalesQuotationTable.SalesRental.ToString().ToUpper() == "RENTAL")
                                        {
                                            // SVP/CIF
                                            if (axdEntity_SalesQuotationLine.CanonImport.HasValue && axdEntity_SalesQuotationLine.CanonImport != 0)
                                                importeFacturacionVentaUneCifCapitulos = importeFacturacionVentaUneCifCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesPrice) * Convert.ToDecimal(axdEntity_SalesQuotationLine.Canon)) / 100);

                                            //if (chkBoxFenolico.Checked && axdEntity_SalesQuotationLine.CanonFenolico.HasValue && axdEntity_SalesQuotationLine.CanonFenolico != 0)
                                            if (axdEntity_SalesQuotationLine.CanonFenolico.HasValue && axdEntity_SalesQuotationLine.CanonFenolico != 0)
                                                importeFacturacionVentFenolicoNuevoCapitulos = importeFacturacionVentFenolicoNuevoCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.CanonFenolico));

                                            dondeVa = "ALQUILER";
                                            importeAlquiler = importeAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada));
                                            importeFacturacionAlquilerCapitulos = importeFacturacionAlquilerCapitulos + Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada);

                                            // Gastos variables
                                            dondeVa = "ALQUILER: Gastos variables";
                                            importeGastosPatioEntregaDevolucionAlquiler = 0;
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                            {
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                {
                                                    importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio;
                                                    importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * naviera * precioGastosPatio);
                                                }
                                                else
                                                {
                                                    importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio;
                                                    importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * precioGastosPatio);

                                                }
                                            }
                                            else
                                            {
                                                importeGastosPatioEntregaDevolucionAlquiler = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio;
                                                importeGastosPatioEntregaDevolucionAlquiler = importeGastosPatioEntregaDevolucionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * precioGastosPatio);

                                            }
                                            importeGastosVariablesEntregaDevolucionAlquilerCapitulos = importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosPatioEntregaDevolucionAlquiler;

                                            importeGastosPatioClasificacionReparacionAlquiler = 0;
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararDirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararIndirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarDirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarIndirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararDirecto * precioGastosPatio);
                                            importeGastosPatioClasificacionReparacionAlquiler = importeGastosPatioClasificacionReparacionAlquiler + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararIndirecto * precioGastosPatio);
                                            importeGastosVariablesClaisificacionReparacionAlquilerCapitulos = importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosPatioClasificacionReparacionAlquiler;

                                            oItemTaximetro[COL_DATA_ALQUILER_ENTREGA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * precioGastosPatio).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * precioGastosPatio).ToString("##0.00");
                                            if (!String.IsNullOrEmpty(axdEntity_SalesQuotationMasterTable.DlvMode))
                                            {
                                                if (axdEntity_SalesQuotationMasterTable.DlvMode.ToString() == "1")
                                                {
                                                    oItemTaximetro[COL_DATA_ALQUILER_ENTREGA_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * entrega * naviera * precioGastosPatio).ToString("##0.00");
                                                    oItemTaximetro[COL_DATA_ALQUILER_DEVOLUCION_NAVIERA] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * devolucion * naviera * precioGastosPatio).ToString("##0.00");
                                                }
                                            }
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararDirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarRepararIndirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarDirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_CLASIFICAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * clasificarIndirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_REPARAR_DIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararDirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_REPARAR_INDIRECTO] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * repararIndirecto).ToString("##0.00");
                                            oItemTaximetro[COL_DATA_ALQUILER_GASTOS_PATIO] = (importeGastosPatioEntregaDevolucionAlquiler + importeGastosPatioClasificacionReparacionAlquiler).ToString("##0.00");

                                            //importeAlquilerGastosVariables = importeAlquilerGastosVariables + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosVariablesAlquiler);
                                            //importeGastosVariablesAlquilerCapitulos = importeGastosVariablesAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosVariablesAlquiler);

                                            // Gastos fijos BU
                                            dondeVa = "ALQUILER: gastos fijos BU";
                                            importeAlquilerGastosFijosBU = importeAlquilerGastosFijosBU + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosBUAlquiler);
                                            importeGastosFijosBUAlquilerCapitulos = importeGastosFijosBUAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosBUAlquiler);

                                            // Gastos fijos centrales
                                            dondeVa = "ALQUILER: gastos centrales";
                                            importeAlquilerGastosFijosCentrales = importeAlquilerGastosFijosCentrales + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosCentralesAlquiler);
                                            importeGastosFijosCentralesAlquilerCapitulos = importeGastosFijosCentralesAlquilerCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosCentralesAlquiler);

                                            dondeVa = "ALQUILER: Datos en datatble taximetro";
                                            oItemTaximetro[COL_DATA_CANTIDAD] = Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_EURO_DIA] = Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia).ToString("#,##0.0000");
                                            oItemTaximetro[COL_DATA_DURACION_ESTIMADA] = Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_ALQUILER] = (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_BU] = gastosFijosBUAlquiler.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_BU] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosBUAlquiler).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_GASTO_FIJO_CENTRAL] = gastosFijosCentralesAlquiler.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_IMPORTE_GASTO_FIJO_CENTRAL] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * Convert.ToDecimal(axdEntity_SalesQuotationLine.EurDia) * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) * gastosFijosCentralesAlquiler).ToString("#,##0.00");

                                            dondeVa = "Calcular datos taxímetros";
                                            if (taximetroConsumible == 0)
                                            {
                                                precioTaximetroNoConsumible = precioCoste;
                                            }
                                            else
                                            {
                                                if (calcularPorSuperficie)
                                                {
                                                    if (!metersInvoicing)
                                                    {
                                                        precioTaximetroNoConsumible = precioCoste; //(precioCoste - (costeSuperficie * superficie));
                                                        precioTaximetroConsumible = 0;
                                                    }
                                                    else
                                                    {
                                                        precioTaximetroNoConsumible = (precioCoste - (costeSuperficie * superficie));
                                                        precioTaximetroConsumible = (costeSuperficie * superficie);
                                                    }
                                                }
                                                else
                                                {
                                                    precioTaximetroNoConsumible = 0;
                                                    precioTaximetroConsumible = precioCoste;
                                                }
                                            }

                                            dondeVa = "Calcular datos taxímetros: superficie";
                                            if (calcularPorSuperficie)
                                            {
                                                if (!metersInvoicing)
                                                    oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE / NO meters invoicing";
                                                else
                                                    oItemTaximetro[COL_DATA_TIPO] = "SUPERFICIE";
                                            }
                                            else
                                                oItemTaximetro[COL_DATA_TIPO] = "";

                                            oItemTaximetro[COL_DATA_TAX_CONSUMIBLE] = taximetroConsumible.ToString("#,##0.0000");
                                            oItemTaximetro[COL_DATA_TAX_NO_CONSUMIBLE] = taximetroNoConsumible.ToString("#,##0.0000");
                                            oItemTaximetro[COL_DATA_SUPERFICIE] = superficie.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_COSTE_SUPERFICIE] = (costeSuperficie * superficie).ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_PRECIO_CONSUMIBLE] = precioTaximetroConsumible.ToString("#,##0.00");
                                            oItemTaximetro[COL_DATA_PRECIO_NO_CONSUMIBLE] = precioTaximetroNoConsumible.ToString("#,##0.00");

                                            importeCosteTaximetroConsumible = importeCosteTaximetroConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) / diasxMes;
                                            importeCosteTaximetroConsumibleCapitulos = importeCosteTaximetroConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) / diasxMes;

                                            dondeVa = "Empieza recorrido bonificación";
                                            oItemTaximetro[COL_DATA_AJUSTE] = "";

                                            duracion = Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada);
                                            diasCalculados = 0;
                                            diasMultiplicar = 0;
                                            while (diasCalculados < duracion)
                                            {
                                                for (lineasBonificacion = 0; lineasBonificacion < listaBonificacionesDesde.Count; lineasBonificacion++)
                                                {
                                                    if ((diasCalculados + diasxMes) >= listaBonificacionesDesde.ElementAt(lineasBonificacion) && (diasCalculados + diasxMes) <= listaBonificacionesHasta.ElementAt(lineasBonificacion))
                                                    {
                                                        if (duracion - diasCalculados >= diasxMes)
                                                            diasMultiplicar = diasxMes;
                                                        else
                                                            diasMultiplicar = duracion - diasCalculados;
                                                        bonificacionTaximetroConsumible = taximetroConsumible - (listaBonificacionesValor.ElementAt(lineasBonificacion) / 100);
                                                        oItemTaximetro[COL_DATA_AJUSTE] = oItemTaximetro[COL_DATA_AJUSTE] + "Bonif. (" + bonificacionTaximetroConsumible.ToString("#,##0.0000") + ") * Dias(" + diasMultiplicar.ToString() + ") // ";
                                                        if (oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE].ToString() == "")
                                                            oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes).ToString("#,##0.00");
                                                        else
                                                            oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE] = (Convert.ToDecimal(oItemTaximetro[COL_DATA_AJUSTE_TAX_CONSUMIBLE]) + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes)).ToString("#,##0.00");
                                                        importeCosteBonificacionTaximetroConsumible = importeCosteBonificacionTaximetroConsumible + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                        importeCosteBonificacionTaximetroConsumibleCapitulos = importeCosteBonificacionTaximetroConsumibleCapitulos + ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * bonificacionTaximetroConsumible * diasMultiplicar) / diasxMes);
                                                    }
                                                }
                                                diasCalculados = diasCalculados + diasxMes;
                                            }
                                            dondeVa = "Fin recorrido bonificación";

                                            oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_DESDE] = diasDesdeTaxNoConsumible.ToString();
                                            oItemTaximetro[COL_DATA_IMPORTE_NO_TAX_DIAS_HASTA] = diasHastaTaxNoConsumible.ToString();
                                            oItemTaximetro[COL_DATA_IMPORTE_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroConsumible * taximetroConsumible * Convert.ToDecimal(axdEntity_SalesQuotationLine.DuracionEstimada)) / diasxMes).ToString("#,##0.00");

                                            if (Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada) <= diasHastaTaxNoConsumible)
                                                diasTaximetroNoConsumibleCalcular = Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada) - diasDesdeTaxNoConsumible;
                                            if (Convert.ToInt32(axdEntity_SalesQuotationLine.DuracionEstimada) >= diasHastaTaxNoConsumible)
                                                diasTaximetroNoConsumibleCalcular = diasHastaTaxNoConsumible - diasDesdeTaxNoConsumible;

                                            importeCosteTaximetroNoConsumible = importeCosteTaximetroNoConsumible + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                            importeCosteTaximetroNoConsumibleCapitulos = importeCosteTaximetroNoConsumibleCapitulos + (Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes;
                                            oItemTaximetro[COL_DATA_IMPORTE_NO_TAX] = ((Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty) * precioTaximetroNoConsumible * taximetroNoConsumible * diasTaximetroNoConsumibleCalcular) / diasxMes).ToString("#,##0.00");
                                        }

                                        if ((importeCosteMaterialNuevo != 0) && (importeCosteMaterialFenolico != 0))
                                            importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + (importeCosteMaterialNuevo - importeCosteMaterialFenolico);
                                        else
                                            importeCosteVentaNuevoCapitulos = importeCosteVentaNuevoCapitulos + importeCosteMaterialNuevo;

                                        dtTaximetro.Rows.Add(oItemTaximetro);
                                        oItemTaximetro = null;

                                        pesoCapitulo = pesoCapitulo + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));
                                        pesoTotal = pesoTotal + (pesoArticulo * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));

                                        if (codigosTransporte.IndexOf(axdEntity_SalesQuotationLine.ItemId.ToString().ToUpper()) >= 0)
                                        {
                                            dondeVa = "VALIDAR TRANSPORTE TR-001";
                                            importePorte_TR001 = importePorte_TR001 + Convert.ToDecimal(axdEntity_SalesQuotationLine.LineAmount);
                                        }

                                        importePorte = importePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));
                                        importeCostePorte = importeCostePorte + (valorCostePorte * Convert.ToDecimal(kilometros) * (pesoArticulo / 1000) * Convert.ToDecimal(axdEntity_SalesQuotationLine.SalesQty));

                                        //dtGastosOficina.Rows.Add(oItemGastosOficina);
                                        //oItemGastosOficina = null;
                                    }

                                    dondeVa = "FIN RECORRIDO CAPÍTULO";

                                    importeMargenAlquiler = importeAlquiler - (importeCosteTaximetroNoConsumible + importeCosteTaximetroConsumible - importeCosteBonificacionTaximetroConsumible);
                                    importeMargenVenta = importeVenta - importeCosteVenta;

                                    // INICIO PORTES POR CAPÍTULO
                                    //if (chkBoxPortes.Checked && axdEntity_SalesQuotationMasterTable.Delegation.ToString().ToUpper() != "EX" && axdEntity_SalesQuotationMasterTable.GestionPorte == tablaOfertas.AxdEnum_GestionPorte.Alsina && (axdEntity_SalesQuotationMasterTable.TipoPorte == tablaOfertas.AxdEnum_TipoPorte.Todo || axdEntity_SalesQuotationMasterTable.TipoPorte == tablaOfertas.AxdEnum_TipoPorte.SoloEntrega))
                                    //{
                                    if (hayTR001 && importePorte_TR001 > 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importePorte_TR001.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        importeCostePorte = (-1) * (importePorte_TR001 * (1 - margenPorte));
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeCostePorte.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE PORTES // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = importeCostePorte.ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importePorte_TR001 + importeCostePorte).ToString("#,##0.00");
                                        if (((importePorte_TR001) / (1 - margenPorte)) == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importePorte_TR001 + importeCostePorte) / importePorte_TR001) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((importePorte_TR001 / (1 - margenPorte)) - importePorte_TR001).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        if (esVenta)
                                        {
                                            //filaValores = dtValores.NewRow();
                                            //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                            //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesVenta).ToString("#,##0.00");
                                            //filaValores[dtValores_PORCENTAJE] = "0.00";
                                            //dtValores.Rows.Add(filaValores);
                                            //filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUVenta).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesVenta).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;
                                        }
                                        else
                                        {
                                            //filaValores = dtValores.NewRow();
                                            //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                            //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            //filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosVariablesAlquiler).ToString("#,##0.00");
                                            //filaValores[dtValores_PORCENTAJE] = "0.00";
                                            //dtValores.Rows.Add(filaValores);
                                            //filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosBUAlquiler).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importeCostePorte * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;
                                        }
                                    }

                                    if (!existeTR001)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "FACTURACION_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        if (1 - margenPorte != 0)
                                            filaValores[dtValores_IMPORTE] = ((importePorte * 100) / (1 - margenPorte)).ToString("#,##0.00");
                                        else
                                            filaValores[dtValores_IMPORTE] = "0.00";
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importePorte * 100).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE PORTES // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importePorte * 100).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;

                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_PORTES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                        if (((importePorte * 100) / (1 - margenPorte)) == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = ((((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)) / ((importePorte * 100) / (1 - margenPorte))).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        if ((1 - margenPorte) != 0)
                                        {
                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "ROP_BASICO_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (((importePorte * 100) / (1 - margenPorte)) - (importePorte * 100)).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;
                                        }

                                        if (esVenta)
                                        {
                                            //filaValores = dtValores.NewRow();
                                            //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                            //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesVenta).ToString("#,##0.00");
                                            //filaValores[dtValores_PORCENTAJE] = "0.00";
                                            //dtValores.Rows.Add(filaValores);
                                            //filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUVenta).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesVenta).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;
                                        }
                                        else
                                        {
                                            //filaValores = dtValores.NewRow();
                                            //filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_PORTES";
                                            //filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            //filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosVariablesAlquiler).ToString("#,##0.00");
                                            //filaValores[dtValores_PORCENTAJE] = "0.00";
                                            //dtValores.Rows.Add(filaValores);
                                            //filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosBUAlquiler).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;

                                            filaValores = dtValores.NewRow();
                                            filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_PORTES";
                                            filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                            filaValores[dtValores_IMPORTE] = (importePorte * 100 * gastosFijosCentralesAlquiler).ToString("#,##0.00");
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                            dtValores.Rows.Add(filaValores);
                                            filaValores = null;
                                        }
                                    }
                                    //}
                                    // FIN PORTES POR CAPÍTULO

                                    if (importeGastosVariablesEntregaDevolucionAlquilerCapitulos != 0 || importeGastosVariablesEntregaDevolucionVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesEntregaDevolucionAlquilerCapitulos + importeGastosVariablesEntregaDevolucionVentaCapitulos)).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos != 0 || importeGastosVariablesClaisificacionReparacionVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * (importeGastosVariablesClaisificacionReparacionAlquilerCapitulos + importeGastosVariablesClaisificacionReparacionVentaCapitulos)).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    dondeVa = "Importes/cantidades venta 1";
                                    if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaDepartamentoTecnicoCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE DEPARTAMENTO TECNICO // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaDepartamentoTecnicoCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos) / importeFacturacionVentaDepartamentoTecnicoCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_DEPARTAMENTO_TECNICO";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaDepartamentoTecnicoCapitulos != 0 || importeCosteVentaDepartamentoTecnicoCapitulos != 0 || importeGastosVariablesVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosBUVentaDepartamentoTecnicoCapitulos != 0 || importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_DEPARTAMENTO_TECNICO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaDepartamentoTecnicoCapitulos - importeCosteVentaDepartamentoTecnicoCapitulos - importeGastosVariablesVentaDepartamentoTecnicoCapitulos - importeGastosFijosBUVentaDepartamentoTecnicoCapitulos - importeGastosFijosCentralesVentaDepartamentoTecnicoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "FENÓLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentFenolicoNuevoCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE FENOLICO NUEVO // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentFenolicoNuevoCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos) / importeFacturacionVentFenolicoNuevoCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaFenolicoNuevoCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_FENOLICO_NUEVO";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentFenolicoNuevoCapitulos != 0 || importeCosteVentaFenolicoNuevoCapitulos != 0 || importeGastosVariablesVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosBUVentaFenolicoNuevoCapitulos != 0 || importeGastosFijosCentralesVentaFenolicoNuevoCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_FENOLICO_NUEVO";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentFenolicoNuevoCapitulos - importeCosteVentaFenolicoNuevoCapitulos - importeGastosVariablesVentaFenolicoNuevoCapitulos - importeGastosFijosBUVentaFenolicoNuevoCapitulos - importeGastosFijosCentralesVentaFenolicoNuevoCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "SVP_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaUneCifCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE UNE CIF // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaUneCifCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos) / importeFacturacionVentaUneCifCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaOtrosServiciosCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "OTROS_SERVICIOS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaOtrosServiciosCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaOtrosServiciosCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_OTROS_SERVICIOS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE OTROS SERVICIOS // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaOtrosServiciosCapitulos != 0 || importeCosteVentaOtrosServiciosCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_OTROS_SERVICIOS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaOtrosServiciosCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaOtrosServiciosCapitulos - importeCosteVentaOtrosServiciosCapitulos) / importeFacturacionVentaOtrosServiciosCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }


                                    //if (importeGastosVariablesVentaUneCifCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_UNE_CIF";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaUneCifCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaUneCifCapitulos != 0 || importeCosteVentaUneCifCapitulos != 0 || importeGastosVariablesVentaUneCifCapitulos != 0 || importeGastosFijosBUVentaUneCifCapitulos != 0 || importeGastosFijosCentralesVentaUneCifCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_UNE_CIF";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaUneCifCapitulos - importeCosteVentaUneCifCapitulos - importeGastosVariablesVentaUneCifCapitulos - importeGastosFijosBUVentaUneCifCapitulos - importeGastosFijosCentralesVentaUneCifCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaMontajesCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE MONTAJES // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaMontajesCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos) / importeFacturacionVentaMontajesCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaMontajesCapitulos != 0)
                                    //{
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_MONTAJES";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaMontajesCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaMontajesCapitulos != 0 || importeCosteVentaMontajesCapitulos != 0 || importeGastosVariablesVentaMontajesCapitulos != 0 || importeGastosFijosBUVentaMontajesCapitulos != 0 || importeGastosFijosCentralesVentaMontajesCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ROP_BASICO_MONTAJES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaMontajesCapitulos - importeCosteVentaMontajesCapitulos - importeGastosVariablesVentaMontajesCapitulos - importeGastosFijosBUVentaMontajesCapitulos - importeGastosFijosCentralesVentaMontajesCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeFacturacionVentaProductoCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta productos 1";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionVentaProductoCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 2";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "COSTE_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - COSTE VENTAS DIRECTAS // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteVentaCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 3";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionVentaProductoCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos) / importeFacturacionVentaProductoCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeGastosVariablesVentaCapitulos != 0)
                                    //{
                                    //    dondeVa = "Importes/cantidades venta 4";
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_VENTAS_DIRECTAS";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = ((-1) * importeGastosVariablesVentaCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    if (importeGastosFijosBUVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_BU_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosBUVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeGastosFijosCentralesVentaCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades venta 6";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    //if (importeFacturacionVentaProductoCapitulos != 0 || importeCosteVentaCapitulos != 0 || importeGastosVariablesVentaCapitulos != 0 || importeGastosFijosBUVentaCapitulos != 0 || importeGastosFijosCentralesVentaCapitulos != 0)
                                    //{
                                    //    dondeVa = "Importes/cantidades venta 7";
                                    //    filaValores = dtValores.NewRow();
                                    //    filaValores[dtValores_ETIQUETA] = "ROP_BASICO_VENTAS_DIRECTAS";
                                    //    filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                    //    filaValores[dtValores_IMPORTE] = (importeFacturacionVentaProductoCapitulos - importeCosteVentaCapitulos - importeGastosVariablesVentaCapitulos - importeGastosFijosBUVentaCapitulos - importeGastosFijosCentralesVentaCapitulos).ToString("#,##0.00");
                                    //    filaValores[dtValores_PORCENTAJE] = "0.00";
                                    //    dtValores.Rows.Add(filaValores);
                                    //    filaValores = null;
                                    //}

                                    dondeVa = "ALQUILER 2";

                                    dondeVa = "Importes/cantidades alquiler 1";
                                    if (importeFacturacionAlquilerCapitulos != 0)
                                    {
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "ALQUILERES";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeFacturacionAlquilerCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }

                                    if (importeCosteTaximetroNoConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 2";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "TAXIMETRO_NO_CONSUMIBLE";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroNoConsumibleCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - TAXIMETRO NO CONSUMIBLE // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteTaximetroNoConsumibleCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeCosteTaximetroConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 3";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "TAXIMETRO_CONSUMIBLE";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = ((-1) * importeCosteTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - TAXIMETRO CONSUMIBLE // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = ((-1) * importeCosteTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 4";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "AJUSTE_TAXIMETRO_CONSUMIBLE";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = importeCosteBonificacionTaximetroConsumibleCapitulos.ToString("#,##0.00");
                                        filaValores[dtValores_PORCENTAJE] = "0.00";
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;

                                        //oItemResultados = dtResultados.NewRow();
                                        //oItemResultados["TIPO"] = "OFERTA - AJUSTE TAXIMETRO CONSUMIBLE // " + axdEntity_SalesQuotationTable.QuotationId.ToString();
                                        //oItemResultados["EMPRESA"] = empresa;
                                        //oItemResultados["NUMERO"] = numero;
                                        //oItemResultados["COSTE"] = importeCosteBonificacionTaximetroConsumibleCapitulos.ToString("#,##0.00");
                                        //dtResultados.Rows.Add(oItemResultados);
                                        //oItemResultados = null;
                                    }

                                    if (importeFacturacionAlquilerCapitulos != 0 || importeCosteTaximetroNoConsumibleCapitulos != 0 || importeCosteTaximetroConsumibleCapitulos != 0 || importeCosteBonificacionTaximetroConsumibleCapitulos != 0)
                                    {
                                        dondeVa = "Importes/cantidades alquiler 5";
                                        filaValores = dtValores.NewRow();
                                        filaValores[dtValores_ETIQUETA] = "MARGEN_ALQUILER";
                                        filaValores[dtValores_CONCEPTO] = axdEntity_SalesQuotationTable.QuotationId.ToString() + tituloCapitulo;
                                        filaValores[dtValores_IMPORTE] = (importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos).ToString("#,##0.00");
                                        if (importeFacturacionAlquilerCapitulos == 0)
                                            filaValores[dtValores_PORCENTAJE] = "0.00";
                                        else
                                            filaValores[dtValores_PORCENTAJE] = (((importeFacturacionAlquilerCapitulos - importeCosteTaximetroNoConsumibleCapitulos - importeCosteTaximetroConsumibleCapitulos + importeCosteBonificacionTaximetroConsumibleCapitulos) / importeFacturacionAlquilerCapitulos) * 100).ToString("#,##0.00");
                                        dtValores.Rows.Add(filaValores);
                                        filaValores = null;
                                    }
                                    dtDatosConfiguracion.Dispose();
                                }
                            }
                            TimeSpan horaDatosPase2_2 = DateTime.Now.Subtract(horaDatosPase2_1);
                        }

                        // CALCULAR GASTOS OFICINA 
                        //totalAnual = 0;
                        //totalAdministrativo = 0;
                        //varAdministrativo = 0;
                        //totalComercial = 0;
                        //varComercial = 0;
                        //costeDT = 0;
                        //preciosEnCero = 0;
                        //dtDatosGastosOficina = gastosOficina(empresa, masterObra, fechaPrecios, moneda, mesPresupuestoValido, porcentajeGastoAdmministrativoVariable, porcentajeGastoComercialVariable);
                        //foreach (DataRow fila in dtDatosGastosOficina.Rows)
                        //{
                        //    dondeVa = "encontró precio coste dataset dtDatosGastosOficina";
                        //    totalAnual = Convert.ToDecimal(fila["fact_anual_empresa"]);
                        //    totalAdministrativo = Convert.ToDecimal(fila["total_admin"]);
                        //    varAdministrativo = Convert.ToDecimal(fila["var_admin"]);
                        //    totalComercial = Convert.ToDecimal(fila["total_comerc"]);
                        //    varComercial = Convert.ToDecimal(fila["var_comerc"]);
                        //    costeDT = Convert.ToDecimal(fila["costeDT"]);
                        //    preciosEnCero = Convert.ToInt32(fila["preciosEnCero"]);
                        //}
                        //if (preciosEnCero != 0)
                        //{
                        //    salvarIndicencia(empresa, "OFERTA", "", "En el cálculo de coste gastos oficina DT hay precios en cero.");
                        //    imgWarning.Visible = true;
                        //    lblMensajeError.Visible = true;
                        //    lblMensajeError.Text = "En el cálculo de coste gastos oficina DT hay precios en cero.";
                        //}

                        //decimal total = 0;
                        //decimal totalAlquiler = 0;
                        //decimal totalVenta = 0;
                        //decimal totalPortes = 0;
                        //decimal costeDTPorratear = 0;
                        //decimal totalPortesLinea = 0;
                        //string tituloAnterior = "";
                        //decimal totalGastosOficinaDToCapitulo = 0;
                        //decimal totalGastosOficinaAdministrativoCapitulo = 0;
                        //decimal totalGastosOficinaComercialCapitulo = 0;

                        //totalAlquiler = dtValores.AsEnumerable()
                        //        .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES")
                        //        .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                        ////totalVenta = dtValores.AsEnumerable()
                        ////       .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "VENTAS_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                        ////       .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                        //totalVenta = dtValores.AsEnumerable()
                        //      .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                        //      .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                        //totalPortes = dtValores.AsEnumerable()
                        //      .Where(y => y.Field<string>("ETIQUETA") == "FACTURACION_PORTES")
                        //      .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                        ////if (chkBoxPortes.Checked)
                        //    total = totalAlquiler + totalVenta + totalPortes;
                        ////else
                        ////    total = totalAlquiler + totalVenta;

                        //if (total * porcentajeMaximoTotalFacturacion > costeDT)
                        //    costeDTPorratear = costeDT;
                        //else
                        //    costeDTPorratear = total * porcentajeMaximoTotalFacturacion;

                        //tituloCapitulo = "";
                        //foreach (DataRow fila in dtTaximetro.Rows)
                        //{
                        //    if (fila["CAPITULO"].ToString() != tituloAnterior)
                        //    {
                        //        if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                        //        {
                        //            dondeVa = "Gastos Oficina Administrativo y Comercial";
                        //            filaValores = dtValores.NewRow();
                        //            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                        //            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                        //            filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                        //            filaValores[dtValores_PORCENTAJE] = "0.00";
                        //            dtValores.Rows.Add(filaValores);
                        //            filaValores = null;
                        //        }

                        //        if (totalGastosOficinaDToCapitulo != 0)
                        //        {
                        //            dondeVa = "Gastos Oficina Tecnico";
                        //            filaValores = dtValores.NewRow();
                        //            filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                        //            filaValores[dtValores_CONCEPTO] = tituloAnterior;
                        //            filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                        //            filaValores[dtValores_PORCENTAJE] = "0.00";
                        //            dtValores.Rows.Add(filaValores);
                        //            filaValores = null;
                        //            tituloAnterior = fila["CAPITULO"].ToString();
                        //        }

                        //        totalGastosOficinaAdministrativoCapitulo = 0;
                        //        totalGastosOficinaComercialCapitulo = 0;
                        //        totalGastosOficinaDToCapitulo = 0;
                        //    }

                        //    tituloAnterior = fila["CAPITULO"].ToString();

                        //    DataRow oItemGastosOficina = dtGastosOficina.NewRow();
                        //    oItemGastosOficina["CAPITULO"] = fila["CAPITULO"].ToString();
                        //    oItemGastosOficina["ITEM"] = fila["ITEM"].ToString();
                        //    oItemGastosOficina["MES PRESUPUESTO VALIDO"] = mesPresupuestoValido.ToString("#,##0");
                        //    oItemGastosOficina["PORCENTAJE GASTO ADMINISTRATIVO"] = porcentajeGastoAdmministrativoVariable.ToString("#,##0.00");
                        //    oItemGastosOficina["PORCENTAJE GASTO COMERCIAL"] = porcentajeGastoComercialVariable.ToString("#,##0.00");
                        //    oItemGastosOficina["PORCENTAJE MAXIMO TOTAL FACTURACON"] = porcentajeMaximoTotalFacturacion.ToString("#,##0.00");
                        //    oItemGastosOficina["TOTAL ANUAL"] = totalAnual.ToString("#,##0.00");
                        //    oItemGastosOficina["TOTAL ADMINISTRATIVO"] = totalAdministrativo.ToString("#,##0.00");
                        //    oItemGastosOficina["VAR ADMINISTRATIVO"] = varAdministrativo.ToString("#,##0.00");
                        //    oItemGastosOficina["TOTAL COMERCIAL"] = totalComercial.ToString("#,##0.00");
                        //    oItemGastosOficina["VAR COMERCIAL"] = varComercial.ToString("#,##0.00");
                        //    oItemGastosOficina["IMPORTE"] = "0.00";

                        //    oItemGastosOficina["TOTAL FACTURACION"] = total.ToString("#,##0.00");
                        //    oItemGastosOficina["MAX FACTURACION"] = (total * porcentajeMaximoTotalFacturacion).ToString("#,##0.00");
                        //    oItemGastosOficina["COSTE DT"] = costeDT.ToString("#,##0.00");

                        //    //if (chkBoxPortes.Checked)
                        //    //{
                        //        if (totalAlquiler + totalVenta != 0)
                        //            totalPortesLinea = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])) * totalPortes) / (totalAlquiler + totalVenta);
                        //        else
                        //            totalPortesLinea = 0;
                        //    //}

                        //    // ADMINISTRACION
                        //    if (totalAnual != 0)
                        //    {
                        //        //if (chkBoxPortes.Checked)
                        //        //{
                        //            // gastos oficina venta
                        //            totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                        //            totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual);
                        //            oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                        //            oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea)) / totalAnual).ToString("#,##0.00");
                        //        //}
                        //        //else
                        //        //{
                        //        //    // gastos oficina venta
                        //        //    totalGastosOficinaAdministrativoCapitulo = totalGastosOficinaAdministrativoCapitulo + ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                        //        //    totalGastosOficinaComercialCapitulo = totalGastosOficinaComercialCapitulo + ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual);
                        //        //    oItemGastosOficina["GASTOS ADMINISTRATIVO"] = ((varAdministrativo * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                        //        //    oItemGastosOficina["GASTOS COMERCIAL"] = ((varComercial * (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]))) / totalAnual).ToString("#,##0.00");
                        //        //}
                        //    }

                        //    // DT
                        //    //if (chkBoxPortes.Checked)
                        //    //{
                        //        oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea).ToString("#,##0.00");
                        //        oItemGastosOficina["GASTOS DT"] = (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total).ToString("#,##0.00");
                        //        totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + (((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) + totalPortesLinea) * costeDTPorratear) / total);
                        //    //}
                        //    //else
                        //    //{
                        //    //    oItemGastosOficina["IMPORTE"] = (Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"])).ToString("#,##0.00");
                        //    //    oItemGastosOficina["GASTOS DT"] = ((Convert.ToDecimal(fila["FACT TOTAL VENTA"]) + Convert.ToDecimal(fila["FACT ALQUILER"]) * costeDTPorratear) / total).ToString("#,##0.00");
                        //    //    totalGastosOficinaDToCapitulo = totalGastosOficinaDToCapitulo + ((Convert.ToDecimal(oItemGastosOficina["IMPORTE"]) * costeDTPorratear) / total);
                        //    //}

                        //    dtGastosOficina.Rows.Add(oItemGastosOficina);
                        //    oItemGastosOficina = null;
                        //}
                        //if (tituloAnterior != "")
                        //{
                        //    if (totalGastosOficinaAdministrativoCapitulo != 0 || totalGastosOficinaComercialCapitulo != 0)
                        //    {
                        //        dondeVa = "Gastos Oficina Administrativo y Comercial";
                        //        filaValores = dtValores.NewRow();
                        //        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                        //        filaValores[dtValores_CONCEPTO] = tituloAnterior;
                        //        filaValores[dtValores_IMPORTE] = (totalGastosOficinaAdministrativoCapitulo + totalGastosOficinaComercialCapitulo).ToString("#,##0.00");
                        //        filaValores[dtValores_PORCENTAJE] = "0.00";
                        //        dtValores.Rows.Add(filaValores);
                        //        filaValores = null;
                        //    }

                        //    if (totalGastosOficinaDToCapitulo != 0)
                        //    {
                        //        dondeVa = "Gastos Oficina Tecnico";
                        //        filaValores = dtValores.NewRow();
                        //        filaValores[dtValores_ETIQUETA] = "GASTOS_VARIABLIES_TECNICO";
                        //        filaValores[dtValores_CONCEPTO] = tituloAnterior;
                        //        filaValores[dtValores_IMPORTE] = ((-1) * totalGastosOficinaDToCapitulo).ToString("#,##0.00");
                        //        filaValores[dtValores_PORCENTAJE] = "0.00";
                        //        dtValores.Rows.Add(filaValores);
                        //        filaValores = null;
                        //    }
                        //}
                        dtArticulos.Dispose();

                        pintarArbol(ref dtValores, false, false);

                        oItemResultados = dtResultados.NewRow();
                        oItemResultados["TIPO"] = "OFERTA";
                        oItemResultados["EMPRESA"] = empresa;
                        oItemResultados["NUMERO"] = numeroOferta;

                        total = 0;
                        total = dtValores.AsEnumerable()
                            .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                            .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                        oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                        total = dtValores.AsEnumerable()
                           .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                            .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                        oItemResultados["COSTE"] = total.ToString("#,##0.00");

                        total = dtValores.AsEnumerable()
                            .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                            .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                        oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                        oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                        oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                        oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                        //oItemResultados["ERROR"] = "timeout" + " // Usuario: " + usuario;
                        oItemResultados["ERROR"] = "Usuario: " + usuario;
                        dtResultados.Rows.Add(oItemResultados);
                        oItemResultados = null;

                        dtValores.Clear();
                        dtValores = new System.Data.DataTable();
                        dtValores.Columns.Add("ETIQUETA");
                        dtValores.Columns.Add("CONCEPTO");
                        dtValores.Columns.Add("IMPORTE");
                        dtValores.Columns.Add("PORCENTAJE");
                    }
                   
                    dondeVa = "finalizó";
                    //proxy_1.Close();
                    horaTotal_2 = DateTime.Now.Subtract(horaTotal_1);

                    listaArticulosSinFicha.Clear();
                    listaArticulosPedido.Clear();
                    listaFechasPedido.Clear();
                    listaOfertas.Clear();
                    listaFechasOferta.Clear();
                }
                
                hora_2 = DateTime.Now.Subtract(hora_1);
                horaProcesar_2 = DateTime.Now.Subtract(horaProcesar_1);

                //dondeVa = "nombre del doc";
                //nombreInforme = Server.MapPath("~/Ficheros excel/" + cmbConcepto.Text + "_" + numero + "_" + DateTime.Now.ToString("yyyy_MM_dd") + ".xlsx");
                //dondeVa = "nuevo doc";
                //SLDocument sl = new SLDocument();
                //dondeVa = "importar tabla";
                //sl.ImportDataTable(1, 1, dtTaximetro, true);
                //dondeVa = "salvar tabla";
                //sl.SaveAs(nombreInforme);
                //btnAbrirExcel.Visible = true;

                ////conexiones.crearConexion();
                ////conexiones.comando = conexiones.conexion.CreateCommand();
                ////conexiones.comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                ////conexiones.comando.CommandTimeout = 240000;
                ////conexiones.comando.CommandType = CommandType.StoredProcedure;
                ////conexiones.comando.Parameters.AddWithValue("@usuario", usuario);
                ////conexiones.comando.ExecuteNonQuery();
                ////conexiones.comando.Dispose();
                ////conexiones.conexion.Close();
                ////conexiones.conexion.Dispose();

                //conexion = new SqlConnection(strConexion);
                //conexion.Open();
                //comando = conexion.CreateCommand();
                //comando.CommandText = "ROP_DatosArticulosFamiliasSubfamiliasEliminar";
                //comando.CommandTimeout = 240000;
                //comando.CommandType = CommandType.StoredProcedure;
                //comando.Parameters.AddWithValue("@usuario", usuario);
                //comando.ExecuteNonQuery();
                //comando.Dispose();
                //conexion.Close();
                //conexion.Dispose();

                //pintarArbol(ref dtValores, false, false);

                //oItemResultados = dtResultados.NewRow();
                // oItemResultados["TIPO"] = "OFERTA";
                //oItemResultados["EMPRESA"] = empresa;
                //oItemResultados["NUMERO"] = numeros;

                //total = 0;
                ////total = dtValores.AsEnumerable()
                ////    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION")
                ////    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                //oItemResultados["FACTURACION"] = total.ToString("#,##0.00");

                ////total = dtValores.AsEnumerable()
                ////   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_COSTES")
                ////    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                //oItemResultados["COSTE"] = total.ToString("#,##0.00");

                ////total = dtValores.AsEnumerable()
                ////    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN")
                ////    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                //oItemResultados["MARGEN"] = total.ToString("#,##0.00");

                //oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                //oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                //oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                ////oItemResultados["ERROR"] = "timeout" + " // Usuario: " + usuario;
                //oItemResultados["ERROR"] = "Usuario: " + usuario;
                //dtResultados.Rows.Add(oItemResultados);
                //oItemResultados = null;
            }
            catch (Exception ex)
            {
                hora_2 = DateTime.Now.Subtract(hora_1);
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular oferta // " + dondeVa + " // " + ex.Message;
                oItemResultados = dtResultados.NewRow();
                //oItemResultados["HILO"] = cual.ToString();
                oItemResultados["TIPO"] = "OFERTA";
                oItemResultados["EMPRESA"] = empresa;
                oItemResultados["NUMERO"] = numeroOferta;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["TIEMPO PROCESAMIENTO"] = horaProcesar_2.Minutes.ToString("00") + ":" + horaProcesar_2.Seconds.ToString("00") + ":" + horaProcesar_2.Milliseconds.ToString("00");
                oItemResultados["TIEMPO"] = hora_2.Minutes.ToString("00") + ":" + hora_2.Seconds.ToString("00") + ":" + hora_2.Milliseconds.ToString("00");
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void pintarArbol(ref DataTable dtValores, bool inicial, bool totalesCalculados)
        {
            decimal importe_Facturacion = 0;
            decimal totalFacturacion = 0;
            System.Data.DataTable dtArbol = new System.Data.DataTable();
            decimal total = 0;
            DataRow filaValores;
   
            try
            {
                if (inicial)
                {
                    dtValores = new System.Data.DataTable();
                    dtValores.Columns.Add("ETIQUETA");
                    dtValores.Columns.Add("CONCEPTO");
                    dtValores.Columns.Add("IMPORTE");
                    dtValores.Columns.Add("PORCENTAJE");
                }

                if (!totalesCalculados)
                {
                    // --- INICIO TOTALES ---
                    // FACTURACIÓN: TOTAL ALQUILERES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ALQUILERES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ALQUILERES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL TAXIMETRO NO CONSUMIBLE
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TAXIMETRO_NO_CONSUMIBLE")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_TAXIMETRO_NO_CONSUMIBLE";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: ABONO MPO TNC
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ABONO_MPO_TNC")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ABONO_MPO_TNC";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL TAXIMETRO NO CONSUMIBLE + ABONO MPO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TAXIMETRO_NO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "ABONO_MPO_TNC")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_TAXIMETRO_ABONO_NO_CONSUMIBLE";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL TAXIMETRO AJUSTE CONSUMIBLE
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TAXIMETRO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "AJUSTE_TAXIMETRO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "ABONO_BUEN_TRATO" || y.Field<string>("ETIQUETA") == "ABONO_MPO_TC")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_TAXIMETRO_AJUSTE_CONSUMIBLE";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL TAXIMETRO CONSUMIBLE
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TAXIMETRO_CONSUMIBLE")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_TAXIMETRO_CONSUMIBLE";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL AJUSTE CONSUMIBLE
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "AJUSTE_TAXIMETRO_CONSUMIBLE")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_AJUSTE_TAXIMETRO_CONSUMIBLE";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL ABONO BUEN TRATO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ABONO_BUEN_TRATO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ABONO_BUEN_TRATO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL ABONO MPO TC
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ABONO_MPO_TC")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ABONO_MPO_TC";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL TAXIMETROS
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_TAXIMETRO_ABONO_NO_CONSUMIBLE" || y.Field<string>("ETIQUETA") == "TOTAL_TAXIMETRO_CONSUMIBLE")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_TAXIMETROS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN ALQUILER
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_ALQUILER")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_ALQUILER";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL VENTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_VENTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE VENTAS 
                     total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO" || y.Field<string>("ETIQUETA") == "COSTE_MPO" || y.Field<string>("ETIQUETA") == "COSTE_CHATARRA" || y.Field<string>("ETIQUETA") == "COSTE_MONTAJES" || y.Field<string>("ETIQUETA") == "COSTE_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "COSTE_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "COSTE_UNE_CIF" || y.Field<string>("ETIQUETA") == "COSTE_OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_DE_VENTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN VENTAS 
                     total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_VENTAS" || y.Field<string>("ETIQUETA") == "TOTAL_COSTE_DE_VENTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_VENTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL VENTAS DIRECTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE VENTAS DIRECTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_VENTAS_DIRECTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN VENTAS DIRECTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_DIRECTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL PRODUCTOS
                     total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_PRODUCTOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE PRODUCTOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO" || y.Field<string>("ETIQUETA") == "COSTE_MPO" || y.Field<string>("ETIQUETA") == "COSTE_CHATARRA")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));


                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_PRODUCTOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN PRODUCTOS
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_PRODUCTOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE MATERIAL ALQUILADO Y VENDIDO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_MATERIAL_ALQUILADO_Y_VENDIDO" || y.Field<string>("ETIQUETA") == "COSTE_MPO" || y.Field<string>("ETIQUETA") == "COSTE_CHATARRA")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_MATERIAL_ALQUILADO_Y_VENDIDO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN VENTAS MATERIAL ALQUILADO Y LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));
                    
                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE MPO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_MPO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MPO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;


                    // COSTES: TOTAL CHATARRA
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_CHATARRA")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_CHATARRA";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN VENTAS LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_VENTAS_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_VENTAS_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL MONTAJES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MONTAJES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE MONTAJES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_MONTAJES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN MONTAJES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_MONTAJES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL DEPARTAMENTO TÉCNICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE DEPARTAMENTO TECNICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_DEPARTAMENTO_TECNICO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN DEPARTAMENTO TÉCNICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_DEPARTAMENTO_TECNICO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL FENÓLICO NUEVO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE FENOLICO NUEVO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_FENOLICO_NUEVO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN FENÓLICO NUEVO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_FENOLICO_NUEVO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL SVP/CIF
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "SVP_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE UNE CIF
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN_UNE/CIF
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL OTROS_SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_OTROS_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE OTROS_SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_OTROS_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN_OTROS_SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_OTROS_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MONTAJES" || y.Field<string>("ETIQUETA") == "DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "FENÓLICO_NUEVO" || y.Field<string>("ETIQUETA") == "SVP_CIF" || y.Field<string>("ETIQUETA") == "OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_MONTAJES" || y.Field<string>("ETIQUETA") == "COSTE_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "COSTE_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "COSTE_UNE_CIF" || y.Field<string>("ETIQUETA") == "COSTE_OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_MONTAJES" || y.Field<string>("ETIQUETA") == "MARGEN_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "MARGEN_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "MARGEN_UNE_CIF" || y.Field<string>("ETIQUETA") == "MARGEN_OTROS_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL FACTURACION PORTES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "FACTURACION_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_FACTURACION_PORTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTE PORTE
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "COSTE_PORTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTE_PORTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN PORTES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "MARGEN_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN_PORTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // FACTURACIÓN: TOTAL FACTURACION
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_ALQUILERES" || y.Field<string>("ETIQUETA") == "TOTAL_VENTAS" || y.Field<string>("ETIQUETA") == "TOTAL_FACTURACION_PORTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    totalFacturacion = total;
                    importe_Facturacion = total;

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_FACTURACION";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "100.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // COSTES: TOTAL COSTES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_TAXIMETROS" || y.Field<string>("ETIQUETA") == "TOTAL_COSTE_DE_VENTAS" || y.Field<string>("ETIQUETA") == "TOTAL_COSTE_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_COSTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // MARGEN: TOTAL MARGEN
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_MARGEN_ALQUILER" || y.Field<string>("ETIQUETA") == "TOTAL_MARGEN_VENTAS" || y.Field<string>("ETIQUETA") == "TOTAL_MARGEN_PORTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_MARGEN";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    if (importe_Facturacion != 0)
                        filaValores[dtValores_PORCENTAJE] = ((Convert.ToDecimal(total) * 100) / importe_Facturacion).ToString("##0.00"); // "0.00";
                    else
                        filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS VARIABLES ENTREGA/DEVOLUCIÓN
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_VARIABLES_ENTREGA_DEVOLUCION")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_VARIABLES_ENTREGA_DEVOLUCION";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS VARIABLES CLASIFICACIÓN/REPARACIÓN
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_VARIABLES_CLASIFICACION_REPARACION")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_VARIABLES_CLASIFICACION_REPARACION";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS VARIABLES PATIO
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_VARIABLES_ENTREGA_DEVOLUCION" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_VARIABLES_CLASIFICACION_REPARACION")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTA_GASTOS_VARIABLES_PATIO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL_GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL_GASTOS_VARIABLES_TECNICO
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_VARIABLIES_TECNICO")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_VARIABLES_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS VARIABLES OFICINA
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_VARIABLES_ADMINISTRATIVO_COMERCIAL" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_VARIABLES_TECNICO")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_VARIABLES_OFICINA";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS VARIABLES 
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTA_GASTOS_VARIABLES_PATIO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_VARIABLES_OFICINA")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_VARIABLES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // -- GASTOS FIJOS BU --
                    // TOTAL GASTOS FIJOS BU ALQUILER
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_ALQUILER")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_ALQUILER";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU VENTAS DIRECTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_VENTAS_DIRECTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU VENTAS MATERIAL ALQUILADO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU VENTAS LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_VENTAS_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_VENTAS_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU VENTAS MATERIAL ALQUILADO Y LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_VENTAS_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU PRODUCTOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_PRODUCTOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU MONTAJES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_MONTAJES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU DEPARTAMENTO TÉCNICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU FENÓLICO NUEVO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_FENOLICO_NUEVO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU VARIABLES SVP/CIF
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_MONTAJES" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU VENTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_PRODUCTOS" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_VENTA";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU PORTES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_BU_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU_PORTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS BU 
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_ALQUILER" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_VENTA" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_BU";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // -- GASTOS FIJOS CENTRALES --
                    // TOTAL GASTOS FIJOS CENTRALES ALQUILER
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_ALQUILER")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_ALQUILER";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES VENTAS DIRECTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES VENTAS MATERIAL ALQUILADO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_ALQUILADO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_ALQUILADO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES VENTAS LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_VENTAS_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES VENTAS MATERIAL ALQUILADO Y LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_ALQUILADO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_ALQUILADO_LIQUIDADO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES PRODUCTOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_VENTAS_MATERIAL_ALQUILADO_LIQUIDADO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_PRODUCTOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES MONTAJES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_MONTAJES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES DEPARTAMENTO TÉCNICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES FENÓLICO NUEVO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES VARIABLES SVP/CIF
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_MONTAJES" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES VENTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_PRODUCTOS" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_VENTA";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES PORTES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "GASTOS_FIJOS_CENTRALES_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES_PORTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS CENTRALES 
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_ALQUILER" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_VENTA" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS_CENTRALES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL GASTOS FIJOS  
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_BU" || y.Field<string>("ETIQUETA") == "TOTAL_GASTOS_FIJOS_CENTRALES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_GASTOS_FIJOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // -- ROP BÁSICO --
                    // TOTAL ROP BASICO ALQUILER
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_ALQUILER")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_ALQUILER";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO VENTAS DIRECTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_VENTAS_DIRECTAS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_VENTAS_DIRECTAS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO VENTAS MATERIAL ALQUILADO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_VENTAS_MATERIAL_ALQUILADO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_VENTAS_MATERIAL_ALQUILADO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO VENTAS LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_VENTAS_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_VENTAS_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO VENTAS MATERIAL ALQUILADO Y LIQUIDACIONES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_VENTAS_LIQUIDACIONES" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_VENTAS_MATERIAL_ALQUILADO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO PRODUCTOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_VENTAS_DIRECTAS" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_VENTAS_MATERIAL_ALQUILADO_LIQUIDACIONES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_PRODUCTOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO MONTAJES
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_MONTAJES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_MONTAJES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO DEPARTAMENTO TÉCNICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_DEPARTAMENTO_TECNICO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_DEPARTAMENTO_TECNICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO FENÓLICO NUEVO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_FENOLICO_NUEVO")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_FENOLICO_NUEVO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP_BASICOUNE/CIF
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_UNE_CIF";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO SERVICIOS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_MONTAJES" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_DEPARTAMENTO_TECNICO" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_FENOLICO_NUEVO" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_UNE_CIF")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_SERVICIOS";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO VENTAS
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_PRODUCTOS" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_SERVICIOS")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_VENTA";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO PORTES
                    total = dtValores.AsEnumerable()
                   .Where(y => y.Field<string>("ETIQUETA") == "ROP_BASICO_PORTES")
                   .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO_PORTES";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    // TOTAL ROP BASICO
                    total = dtValores.AsEnumerable()
                    .Where(y => y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_ALQUILER" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_VENTA" || y.Field<string>("ETIQUETA") == "TOTAL_ROP_BASICO_PORTES")
                    .Sum(x => Convert.ToDecimal(x.Field<string>("IMPORTE")));

                    filaValores = dtValores.NewRow();
                    filaValores[dtValores_ETIQUETA] = "TOTAL_ROP_BASICO";
                    filaValores[dtValores_CONCEPTO] = "";
                    filaValores[dtValores_IMPORTE] = total.ToString("#,##0.00");
                    filaValores[dtValores_PORCENTAJE] = "0.00";
                    dtValores.Rows.Add(filaValores);
                    filaValores = null;

                    totalesCalculados = true;
                    // --- FIN TOTALES ---
                }
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Pintar árbol" + " // " + ex.Message;
            }
        }

        protected void CambioVersionSeleccion(object sender, EventArgs e)
        {
            conexiones.crearConexion();
            conexiones.comando = conexiones.conexion.CreateCommand();
            conexiones.comando.CommandText = "sp_ROP_ConfiguracionVersionUsoActual";
            conexiones.comando.CommandTimeout = 240000;
            conexiones.comando.CommandType = CommandType.StoredProcedure;
            conexiones.comando.Parameters.AddWithValue("@version", cmbVersion.Text);
            conexiones.comando.ExecuteNonQuery();
            conexiones.comando.Dispose();
            conexiones.conexion.Close();
            conexiones.conexion.Dispose();

            lblVersionUtilizada.Text = "";
        }

         protected void btnSubirDatos_Click(object sender, EventArgs e)
        {
            try
            {
                DataTable dtDatosProcesar;
                string directorio;
                String fichero;

                dataDatos.Columns.Clear();
                dataDatos.DataSource = null;
                dataDatos.DataBind();
                dataDatos.Visible = false;

                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";

                dataResultados.DataSource = null;
                dataResultados.DataBind();
                dataResultados.Columns.Clear();
                dataResultados.Visible = false;


                directorio = Server.MapPath("~/Ficheros excel/");

                if (ficheroSeleccionado.HasFile)
                {
                    DataRow oItemDatosProcesar;
                    dtDatosProcesar = new DataTable();
                    dtDatosProcesar.Columns.Add("TIPO");
                    dtDatosProcesar.Columns.Add("EMPRESA");
                    dtDatosProcesar.Columns.Add("NUMERO");

                    fichero = ficheroSeleccionado.FileName;
                    directorio += fichero;
                    ficheroSeleccionado.SaveAs(directorio);
                    int fila;
                   
                    SLDocument sl = new SLDocument(directorio, "Configuracion general");

                    fila = 1;
                    while (sl.GetCellValueAsString(fila, 1) != "")
                    {
                        oItemDatosProcesar = dtDatosProcesar.NewRow();
                        oItemDatosProcesar["TIPO"] = sl.GetCellValueAsString(fila, 1);
                        oItemDatosProcesar["EMPRESA"] = sl.GetCellValueAsString(fila, 2);
                        oItemDatosProcesar["NUMERO"] = sl.GetCellValueAsString(fila, 3);
                        dtDatosProcesar.Rows.Add(oItemDatosProcesar);

                        fila = fila + 1;
                    }
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "Datos listos para procesar";

                    dataDatos.DataSource = null;
                    dataDatos.DataBind();
                    dataDatos.Columns.Clear();
                    dataDatos.Visible = true;
                    dataDatos.DataSource = dtDatosProcesar;
                    dataDatos.DataBind();
                }
                else
                {
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "Debe indicar el fichero a importar.";
                }
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "btnSubirDatos_Click // " + ex.Message;

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.Visible = false;
            }
        }

        protected void btnBuscarInformacion_Click(object sender, EventArgs e)
        {
            string dondeVa = "";
            DataTable dtResultados = new DataTable();
            DataTable dtDatosProcesarNew = new DataTable();

            try
            {
                dondeVa = "iniciar";
                DateTime hora_inicio = default(DateTime);
                TimeSpan hora_final = default(TimeSpan);
                DataRow oItemResultados;

                int i = 0;
                hora_inicio = DateTime.Now;

                if (dataDatos.HeaderRow != null)
                {
                    for (i = 0; i < dataDatos.HeaderRow.Cells.Count; i++)
                    {
                        dtDatosProcesarNew.Columns.Add(dataDatos.HeaderRow.Cells[i].Text);
                    }
                }

                //  add each of the data rows to the table
                foreach (GridViewRow row in dataDatos.Rows)
                {
                    DataRow dr;
                    dr = dtDatosProcesarNew.NewRow();

                    for (i = 0; i < row.Cells.Count; i++)
                    {
                        dr[i] = row.Cells[i].Text.Replace(" ", "");
                    }
                    dtDatosProcesarNew.Rows.Add(dr);
                }

                dondeVa = "tabla de resultados";
                dtResultados.Clear();
                dtResultados = new DataTable();
                //dtResultados.Columns.Add("HILO");
                dtResultados.Columns.Add("TIPO");
                dtResultados.Columns.Add("EMPRESA");
                dtResultados.Columns.Add("NUMERO");
                dtResultados.Columns.Add("TIEMPO LLAMADA WS");
                dtResultados.Columns.Add("TIEMPO PROCESAMIENTO");
                dtResultados.Columns.Add("FACTURACION");
                dtResultados.Columns.Add("COSTE");
                dtResultados.Columns.Add("MARGEN");
                dtResultados.Columns.Add("ERROR");
                dtResultados.Columns.Add("TIEMPO");

                //dataDatos.DataSource = null;
                //dataDatos.DataBind();
                //dataDatos.Columns.Clear();
                //dataDatos.Visible = true;
                //dataDatos.DataSource = dtDatosProcesar;
                //dataDatos.DataBind();

                nombreInforme = "";
                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                
                //dataTiempos.DataSource = null;
                //dataTiempos.DataBind();
                //dataTiempos.Columns.Clear();
                //dataTiempos.Visible = false;

                dataResultados.DataSource = null;
                dataResultados.DataBind();
                dataResultados.Columns.Clear();
                dataResultados.Visible = false;

                //dtValores = new System.Data.DataTable();
                //dtValores.Columns.Add("ETIQUETA");
                //dtValores.Columns.Add("CONCEPTO");
                //dtValores.Columns.Add("IMPORTE");
                //dtValores.Columns.Add("PORCENTAJE");

                i = 0;
                List<Thread> hilosCreados = new List<Thread>();
                //if (!chkParalelos.Checked)
                if (!paralelo)
                {
                    foreach(DataRow fila in dtDatosProcesarNew.Rows)
                    {
                        dondeVa = "lanzar hilo " + i.ToString();
                        if (fila["TIPO"].ToString().ToUpper() == "OFERTA")
                        {
                            Thread Hilo = new Thread(new ThreadStart(() => calcularOferta(ref dtResultados, i, fila["EMPRESA"].ToString(), fila["NUMERO"].ToString())));
                            Hilo.IsBackground = false;
                            Hilo.Start();
                            hilosCreados.Add(Hilo);
                        }

                        if (fila["TIPO"].ToString().ToUpper() == "PEDIDO")
                        {
                            Thread Hilo = new Thread(new ThreadStart(() => calcularPedido(ref dtResultados, i, fila["EMPRESA"].ToString(), fila["NUMERO"].ToString())));
                            Hilo.IsBackground = false;
                            Hilo.Start();
                            hilosCreados.Add(Hilo);
                        }

                        if (fila["TIPO"].ToString().ToUpper() == "FICHA")
                        {
                            Thread Hilo = new Thread(new ThreadStart(() => calcularFicha(ref dtResultados, i, fila["EMPRESA"].ToString(), fila["NUMERO"].ToString())));
                            Hilo.IsBackground = false;
                            Hilo.Start();
                            hilosCreados.Add(Hilo);
                        }

                        //Thread Hilo = new Thread(new ThreadStart(() => probarHilos(i, fila["EMPRESA"].ToString(), fila["NUMERO"].ToString())));
                        //Hilo.IsBackground = true;
                        //Hilo.Start();
                        //hilosCreados.Add(Hilo);
                        i = i + 1;
                    }
                }
                else
                {
                    Parallel.ForEach(dtDatosProcesarNew.Rows.Cast<DataRow>(), filaParalela =>
                    {
                        dondeVa = "lanzar hilo " + i.ToString();
                        if (filaParalela["TIPO"].ToString().ToUpper() == "OFERTA")
                        {
                            Thread Hilo = new Thread(new ThreadStart(() => calcularOferta(ref dtResultados, i, filaParalela["EMPRESA"].ToString(), filaParalela["NUMERO"].ToString())));
                            Hilo.IsBackground = false;
                            Hilo.Start();
                            hilosCreados.Add(Hilo);
                            Hilo = null;
                        }

                        if (filaParalela["TIPO"].ToString().ToUpper() == "PEDIDO")
                        {
                            Thread Hilo = new Thread(new ThreadStart(() => calcularPedido(ref dtResultados, i, filaParalela["EMPRESA"].ToString(), filaParalela["NUMERO"].ToString())));
                            Hilo.IsBackground = false;
                            Hilo.Start();
                            hilosCreados.Add(Hilo);
                            Hilo = null;
                        }

                        if (filaParalela["TIPO"].ToString().ToUpper() == "FICHA")
                        {
                            Thread Hilo = new Thread(new ThreadStart(() => calcularFicha(ref dtResultados, i, filaParalela["EMPRESA"].ToString(), filaParalela["NUMERO"].ToString())));
                            Hilo.IsBackground = false;
                            Hilo.Start();
                            hilosCreados.Add(Hilo);
                            Hilo = null;
                        }

                        i = i + 1;
                    });
                }

                foreach (Thread thread in hilosCreados)
                {
                    dondeVa = "esperando finalicen los hilos";
                    if (thread is null)
                        dondeVa = "esperando finalicen los hilos es null";
                    else
                        thread.Join();
                }

                dondeVa = "finalizando";
                hora_final = DateTime.Now.Subtract(hora_inicio);
                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIEMPO"] = hora_final.Minutes.ToString("00") + ":" + hora_final.Seconds.ToString("00") + ":" + hora_final.Milliseconds.ToString("00");
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                DataView dv = dtResultados.DefaultView;
                dv.Sort = "EMPRESA, NUMERO, TIPO";
                DataTable sortedtable1 = dv.ToTable();

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.DataSource = dtResultados;
                dataResultados.DataBind();
                dataResultados.Visible = true;

                //dataTiempos.DataSource = null;
                //dataTiempos.DataBind();
                //dataTiempos.Columns.Clear();
                //dataTiempos.Visible = false;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "btnBuscarInformacion_Click  (" + dondeVa + ") //" + ex.Message;

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.DataSource = dtResultados;
                dataResultados.DataBind();
                dataResultados.Visible = true;
            }
        }

        protected void btnCalcularPaquetes_Click(object sender, EventArgs e)
        {
            DataTable dtResultados = new DataTable();
            DataTable dtDatosProcesarNew = new DataTable();
            DataRow oItemResultados;

            string dondeVa = "";
            string empresaOfertas = "";
            string empresaPedidos = "";
            //string empresaFichas = "";
            string numerosOfertas = "";
            string numerosPedidos= "";
            //string numerosFichas= "";
            int numOfertas = 0;
            int numPedidos = 0;
            //int numFichas = 0;
            int numHilo = 0;
            
            try
            {
                dondeVa = "iniciar";
                DateTime hora_inicio = default(DateTime);
                TimeSpan hora_final = default(TimeSpan);
                items = Convert.ToInt32(txtpaquete.InnerText);

                // COPIAR LOS DATOS SUBIDOS A UN DATATABLE
                if (dataDatos.HeaderRow != null)
                {
                    for (int i = 0; i < dataDatos.HeaderRow.Cells.Count; i++)
                    {
                        dtDatosProcesarNew.Columns.Add(dataDatos.HeaderRow.Cells[i].Text);
                    }
                }
                foreach (GridViewRow row in dataDatos.Rows)
                {
                    DataRow dr;
                    dr = dtDatosProcesarNew.NewRow();

                    for (int i = 0; i < row.Cells.Count; i++)
                    {
                        dr[i] = row.Cells[i].Text.Replace(" ", "");
                    }
                    dtDatosProcesarNew.Rows.Add(dr);
                }

                dondeVa = "tabla de resultados";
                dtResultados.Clear();
                dtResultados = new DataTable();
                dtResultados.Columns.Add("TIPO");
                dtResultados.Columns.Add("EMPRESA");
                dtResultados.Columns.Add("NUMERO");
                dtResultados.Columns.Add("TIEMPO LLAMADA WS");
                dtResultados.Columns.Add("TIEMPO PROCESAMIENTO");
                dtResultados.Columns.Add("FACTURACION");
                dtResultados.Columns.Add("COSTE");
                dtResultados.Columns.Add("MARGEN");
                dtResultados.Columns.Add("ERROR");
                dtResultados.Columns.Add("TIEMPO");

                nombreInforme = "";
                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";

                dataResultados.DataSource = null;
                dataResultados.DataBind();
                dataResultados.Columns.Clear();
                dataResultados.Visible = false;

                DataTable dtProcesar;
                DataRow odtProcesar;

                List<string> lista = new List<string>();
                List<string> listaNumerosOfertas = new List<string>();
                List<string> listaNumerosPedidos = new List<string>();
                List<string> listaNumerosFichas = new List<string>();
                List<Thread> hilosCreados = new List<Thread>();

                hora_inicio = DateTime.Now;

                reintentar = Convert.ToInt32(txtReintentar.InnerText);
                while (reintentar >= 0)
                {
                    dtProcesar = new DataTable();
                    dtProcesar.Columns.Add("TIPO", typeof(string));
                    dtProcesar.Columns.Add("EMPRESA", typeof(string));
                    dtProcesar.Columns.Add("NUMERO", typeof(List<string>));

                    numOfertas = 0;
                    listaNumerosOfertas.Clear();
                    foreach (DataRow fila in dtDatosProcesarNew.Rows)
                    {
                        // Armar paquetes
                        if (items > 0)
                        {
                            if (fila["TIPO"].ToString().ToUpper() == "OFERTA")
                            {
                                empresaOfertas = fila["EMPRESA"].ToString();
                                listaNumerosOfertas.Add(fila["NUMERO"].ToString());
                                numerosOfertas = numerosOfertas + " / " + fila["NUMERO"].ToString();
                                numOfertas = numOfertas + 1;
                                if (numOfertas == items)
                                {
                                    odtProcesar = dtProcesar.NewRow();
                                    odtProcesar["TIPO"] = "OFERTA";
                                    odtProcesar["EMPRESA"] = empresaOfertas;
                                    odtProcesar["NUMERO"] = listaNumerosOfertas;
                                    dtProcesar.Rows.Add(odtProcesar);
                                    odtProcesar = null;
                                    numOfertas = 0;
                                    listaNumerosOfertas.Clear();
                                }
                            }
                            if (fila["TIPO"].ToString().ToUpper() == "PEDIDO")
                            {
                                empresaPedidos= fila["EMPRESA"].ToString();
                                listaNumerosPedidos.Add(fila["NUMERO"].ToString());
                                numerosPedidos = numerosPedidos + " / " + fila["NUMERO"].ToString();
                                numPedidos = numPedidos + 1;
                                if (numPedidos == items)
                                {
                                    odtProcesar = dtProcesar.NewRow();
                                    odtProcesar["TIPO"] = "PEDIDO";
                                    odtProcesar["EMPRESA"] = empresaPedidos;
                                    odtProcesar["NUMERO"] = listaNumerosPedidos;
                                    dtProcesar.Rows.Add(odtProcesar);
                                    odtProcesar = null;
                                    numOfertas = 0;
                                    listaNumerosPedidos.Clear();
                                }
                            }
                        }
                        // Pasar todo como un único paquete
                        else
                        {
                            if (fila["TIPO"].ToString().ToUpper() == "OFERTA")
                            {
                                empresaOfertas = fila["EMPRESA"].ToString();
                                listaNumerosOfertas.Add(fila["NUMERO"].ToString());
                                numerosOfertas = numerosOfertas + " / " + fila["NUMERO"].ToString();
                            }
                            if (fila["TIPO"].ToString().ToUpper() == "PEDIDO")
                            {
                                empresaPedidos = fila["EMPRESA"].ToString();
                                listaNumerosPedidos.Add(fila["NUMERO"].ToString());
                                numerosPedidos = numerosPedidos + " / " + fila["NUMERO"].ToString();
                            }
                        }
                    }
                    if (listaNumerosOfertas.Count > 0)
                    {
                        odtProcesar = dtProcesar.NewRow();
                        odtProcesar["TIPO"] = "OFERTA";
                        odtProcesar["EMPRESA"] = empresaOfertas;
                        odtProcesar["NUMERO"] = listaNumerosOfertas;
                        dtProcesar.Rows.Add(odtProcesar);
                        odtProcesar = null;
                    }
                    if (listaNumerosPedidos.Count > 0)
                    {
                        odtProcesar = dtProcesar.NewRow();
                        odtProcesar["TIPO"] = "PEDIDO";
                        odtProcesar["EMPRESA"] = empresaPedidos;
                        odtProcesar["NUMERO"] = listaNumerosPedidos;
                        dtProcesar.Rows.Add(odtProcesar);
                        odtProcesar = null;
                    }
                    numHilo = 0;
                    if (!paralelo)
                    {
                        foreach (DataRow fila in dtProcesar.Rows)
                        {
                            dondeVa = "lanzar hilo " + numHilo.ToString();

                            if (fila["TIPO"].ToString().ToUpper() == "OFERTA")
                            {
                                Thread Hilo = new Thread(new ThreadStart(() => calcularOfertaMasivo(ref dtResultados, numHilo, fila["EMPRESA"].ToString(), (List<string>)fila["NUMERO"])));
                                Hilo.IsBackground = false;
                                Hilo.Start();
                                hilosCreados.Add(Hilo);
                            }
                            if (fila["TIPO"].ToString().ToUpper() == "PEDIDO")
                            {
                                Thread Hilo = new Thread(new ThreadStart(() => calcularPedidoMasivo(ref dtResultados, numHilo, fila["EMPRESA"].ToString(), (List<string>)fila["NUMERO"])));
                                Hilo.IsBackground = false;
                                Hilo.Start();
                                hilosCreados.Add(Hilo);
                            }
                            numHilo = numHilo + 1;
                        }
                    }
                    else
                    {
                        Parallel.ForEach(dtProcesar.Rows.Cast<DataRow>(), filaParalela =>
                        {
                            dondeVa = "lanzar hilo " + numHilo.ToString();

                            if (filaParalela["TIPO"].ToString().ToUpper() == "OFERTA")
                            {
                                Thread Hilo = new Thread(new ThreadStart(() => calcularOfertaMasivo(ref dtResultados, numHilo, filaParalela["EMPRESA"].ToString(), (List<string>)filaParalela["NUMERO"])));
                                Hilo.IsBackground = false;
                                Hilo.Start();
                                hilosCreados.Add(Hilo);
                                Hilo = null;
                            }
                            if (filaParalela["TIPO"].ToString().ToUpper() == "PEDIDO")
                            {
                                Thread Hilo = new Thread(new ThreadStart(() => calcularPedidoMasivo(ref dtResultados, numHilo, filaParalela["EMPRESA"].ToString(), (List<string>)filaParalela["NUMERO"])));
                                Hilo.IsBackground = false;
                                Hilo.Start();
                                hilosCreados.Add(Hilo);
                                Hilo = null;
                            }
                            numHilo = numHilo + 1;
                        });
                    }

                    foreach (Thread thread in hilosCreados)
                    {
                        dondeVa = "esperando finalicen los hilos";
                        thread.Join();
                    }

                    if (reintentar > 0)
                    {
                        dtDatosProcesarNew.Clear();
                        dtDatosProcesarNew = new DataTable();
                        dtDatosProcesarNew.Columns.Add("TIPO", typeof(string));
                        dtDatosProcesarNew.Columns.Add("EMPRESA", typeof(string));
                        dtDatosProcesarNew.Columns.Add("NUMERO", typeof(string));
                        foreach (DataRow fila in dtResultados.Rows)
                        {
                            if (fila["ERROR"].ToString().ToUpper().IndexOf("TIMEOUT") >= 0)
                            {
                                string[] numeros = fila["NUMERO"].ToString().Trim().Split('/');
                                foreach (string numero in numeros)
                                {
                                    if (numero.Trim() != "")
                                    {
                                        odtProcesar = dtDatosProcesarNew.NewRow();
                                        odtProcesar["TIPO"] = "OFERTA";
                                        odtProcesar["EMPRESA"] = empresaOfertas;
                                        odtProcesar["NUMERO"] = numero;
                                        dtDatosProcesarNew.Rows.Add(odtProcesar);
                                        odtProcesar = null;
                                    }
                                }
                            }
                        }
                        items = items / 2;
                        if (items == 0)
                            items = 1;
                        dtProcesar.Clear();
                    }
                    reintentar = reintentar - 1;
                }

                dondeVa = "finalizando";
                hora_final = DateTime.Now.Subtract(hora_inicio);
                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIEMPO"] = hora_final.Minutes.ToString("00") + ":" + hora_final.Seconds.ToString("00") + ":" + hora_final.Milliseconds.ToString("00");
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.DataSource = dtResultados;
                dataResultados.DataBind();
                dataResultados.Visible = true;

            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "btnCalcularPaquetes_Click  (" + dondeVa + ") //" + ex.Message;

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.DataSource = dtResultados;
                dataResultados.DataBind();
                dataResultados.Visible = true;
            }
        }

        protected void btnPruebas_Click(object sender, EventArgs e)
        {
            DataTable dtResultados = new DataTable();
            DataTable dtDatosProcesarNew = new DataTable();

            string dondeVa = "";
            string empresaOfertas = "";
            string empresaPedidos = "";
            string empresaFichas = "";
            string numerosOfertas = "";
            string numerosPedidos = "";
            string numerosFichas = "";
         
            try
            {
                dondeVa = "iniciar";
                DateTime hora_inicio = default(DateTime);
                TimeSpan hora_final = default(TimeSpan);

                if (dataDatos.HeaderRow != null)
                {
                    for (int i = 0; i < dataDatos.HeaderRow.Cells.Count; i++)
                    {
                        dtDatosProcesarNew.Columns.Add(dataDatos.HeaderRow.Cells[i].Text);
                    }
                }

                //  add each of the data rows to the table
                foreach (GridViewRow row in dataDatos.Rows)
                {
                    DataRow dr;
                    dr = dtDatosProcesarNew.NewRow();

                    for (int i = 0; i < row.Cells.Count; i++)
                    {
                        dr[i] = row.Cells[i].Text.Replace(" ", "");
                    }
                    dtDatosProcesarNew.Rows.Add(dr);
                }

                int hilo = 0;
                DataRow oItemResultados;

                dondeVa = "tabla de resultados";
                dtResultados.Clear();
                dtResultados = new DataTable();
                //dtResultados.Columns.Add("HILO");
                dtResultados.Columns.Add("TIPO");
                dtResultados.Columns.Add("EMPRESA");
                dtResultados.Columns.Add("NUMERO");
                dtResultados.Columns.Add("TIEMPO LLAMADA WS");
                dtResultados.Columns.Add("TIEMPO PROCESAMIENTO");
                dtResultados.Columns.Add("FACTURACION");
                dtResultados.Columns.Add("COSTE");
                dtResultados.Columns.Add("MARGEN");
                dtResultados.Columns.Add("ERROR");
                dtResultados.Columns.Add("TIEMPO");

                //dataDatos.DataSource = null;
                //dataDatos.DataBind();
                //dataDatos.Columns.Clear();
                //dataDatos.Visible = true;
                //dataDatos.DataSource = dtDatosProcesar;
                //dataDatos.DataBind();

                nombreInforme = "";
                imgWarning.Visible = false;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";

                dataResultados.DataSource = null;
                dataResultados.DataBind();
                dataResultados.Columns.Clear();
                dataResultados.Visible = false;

                DataTable dtProcesar;
                DataRow odtProcesar;
                dtProcesar = new DataTable();
                dtProcesar.Columns.Add("EMPRESA", typeof(string));
                dtProcesar.Columns.Add("NUMERO", typeof(List<string>));

                List<string> listaNumerosOfertasTotal = new List<string>();
                List<string> listaNumerosPedidosTotal = new List<string>();
                List<string> listaNumerosFichasTotal = new List<string>();
                List<string> listaNumerosOfertas = new List<string>();
                List<string> listaNumerosPedidos = new List<string>();
                List<string> listaNumerosFichas = new List<string>();
                List<Thread> hilosCreados = new List<Thread>();

                hora_inicio = DateTime.Now;
                //if (!chkParalelos.Checked)
                //{
                //    foreach (DataRow fila in dtDatosProcesarNew.Rows)
                //    {
                //        dondeVa = "lanzar hilo " + i.ToString();

                //        if (fila["TIPO"].ToString().ToUpper() == "OFERTA")
                //        {
                //            Thread Hilo = new Thread(new ThreadStart(() => calcular(i, fila["EMPRESA"].ToString(), fila["NUMERO"].ToString(), null)));
                //            Hilo.IsBackground = true;
                //            Hilo.Start();
                //            hilosCreados.Add(Hilo);

                //            empresa = fila["EMPRESA"].ToString();
                //            listaNumeros.Add(fila["NUMERO"].ToString());
                //            numeros = numeros + " / " + fila["NUMERO"].ToString();
                //        }
                //        i = i + 1;
                //    }
                //}
                //else
                //{
                //    Parallel.ForEach(dtDatosProcesarNew.Rows.Cast<DataRow>(), filaParalela =>
                //    {
                //        dondeVa = "lanzar hilo " + i.ToString();

                //        if (filaParalela["TIPO"].ToString().ToUpper() == "OFERTA")
                //        {
                //            Thread Hilo = new Thread(new ThreadStart(() => calcular(i, filaParalela["EMPRESA"].ToString(), filaParalela["NUMERO"].ToString(), null)));
                //            Hilo.IsBackground = true;
                //            Hilo.Start();
                //            hilosCreados.Add(Hilo);

                //            empresa = filaParalela["EMPRESA"].ToString();
                //            listaNumeros.Add(filaParalela["NUMERO"].ToString());
                //            numeros = numeros + " / " + filaParalela["NUMERO"].ToString();
                //        }
                //        i = i + 1;
                //    });
                //}

                //foreach (Thread thread in hilosCreados)
                //{
                //    dondeVa = "esperando finalicen los hilos";
                //    thread.Join();
                //}


                foreach (DataRow fila in dtDatosProcesarNew.Rows)
                {
                    if (fila["TIPO"].ToString().ToUpper() == "OFERTA")
                    {
                        empresaOfertas = fila["EMPRESA"].ToString();
                        listaNumerosOfertasTotal.Add(fila["NUMERO"].ToString());
                        numerosOfertas = numerosOfertas + " / " + fila["NUMERO"].ToString();
                    }
                    if (fila["TIPO"].ToString().ToUpper() == "PEDIDO")
                    {
                        empresaPedidos = fila["EMPRESA"].ToString();
                        listaNumerosPedidosTotal.Add(fila["NUMERO"].ToString());
                        numerosPedidos = numerosPedidos + " / " + fila["NUMERO"].ToString();
                    }
                    if (fila["TIPO"].ToString().ToUpper() == "FICHA")
                    {
                        empresaFichas = fila["EMPRESA"].ToString();
                        listaNumerosFichasTotal.Add(fila["NUMERO"].ToString());
                        numerosFichas = numerosFichas + " / " + fila["NUMERO"].ToString();
                    }
                }
               
                if (listaNumerosOfertasTotal.Count > 0)
                {
                    Thread Hilo = new Thread(new ThreadStart(() => calcularOfertasGrupo(ref dtResultados, hilo, empresaOfertas, "", listaNumerosOfertasTotal)));
                    Hilo.IsBackground = false;
                    Hilo.Start();
                    hilosCreados.Add(Hilo);
                }
                if (listaNumerosPedidosTotal.Count > 0)
                {
                    Thread Hilo = new Thread(new ThreadStart(() => calcularPedidosGrupo(ref dtResultados, hilo, empresaPedidos, "", listaNumerosPedidosTotal)));
                    Hilo.IsBackground = false;
                    Hilo.Start();
                    hilosCreados.Add(Hilo);
                }
                if (listaNumerosFichasTotal.Count > 0)
                {
                    Thread Hilo = new Thread(new ThreadStart(() => calcularFichasGrupo(ref dtResultados, hilo, empresaFichas, "", listaNumerosFichasTotal)));
                    Hilo.IsBackground = false;
                    Hilo.Start();
                    hilosCreados.Add(Hilo);
                }

                foreach (Thread thread in hilosCreados)
                {
                    dondeVa = "esperando finalicen los hilos";
                    thread.Join();
                }

                dondeVa = "finalizando";
                hora_final = DateTime.Now.Subtract(hora_inicio);
                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIEMPO"] = hora_final.Minutes.ToString("00") + ":" + hora_final.Seconds.ToString("00") + ":" + hora_final.Milliseconds.ToString("00");
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.DataSource = dtResultados;
                dataResultados.DataBind();
                dataResultados.Visible = true;

            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "btnPruebas_Click  (" + dondeVa + ") //" + ex.Message;

                dataResultados.DataSource = null;
                dataResultados.Columns.Clear();
                dataResultados.DataSource = dtResultados;
                dataResultados.DataBind();
                dataResultados.Visible = true;
            }
        }

        protected void calcularOfertasGrupo(ref DataTable dtResultados, int cual, string empresa, string numero, List<string> listaNumeros)
        {
            string dondeVa = "";
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DataRow oItemResultados;
            string numeros = "";
    
            try
            {
                string usuario = User.Identity.Name.ToString() + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();
                if (usuario == "")
                    usuario = "diana" + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();

                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();
           
                lblVersionUtilizada.Text = "";
                imgWarning.Visible = true;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "SalesQuotationMasterTable";
                tablaOfertas.CallContext contexto_1 = new tablaOfertas.CallContext();
                contexto_1.Company = empresa;

                dondeVa = "SalesQuotationMasterTable criterios";
                tablaOfertas.QueryCriteria criterio_1 = new tablaOfertas.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "SalesQuotationMasterTable 1 solo criterio";
                    criterio_1.CriteriaElement = new tablaOfertas.CriteriaElement[1];

                    criterio_1.CriteriaElement[0] = new tablaOfertas.CriteriaElement();
                    criterio_1.CriteriaElement[0].FieldName = "QuotationId";
                    criterio_1.CriteriaElement[0].DataSourceName = "SalesQuotationMasterTable";
                    criterio_1.CriteriaElement[0].Operator = tablaOfertas.Operator.Equal;
                    criterio_1.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "SalesQuotationMasterTable muchos criterios";

                    criterio_1.CriteriaElement = new tablaOfertas.CriteriaElement[listaNumeros.Count];
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_1.CriteriaElement[numOferta] = new tablaOfertas.CriteriaElement();
                        criterio_1.CriteriaElement[numOferta].FieldName = "QuotationId";
                        criterio_1.CriteriaElement[numOferta].DataSourceName = "SalesQuotationMasterTable";
                        criterio_1.CriteriaElement[numOferta].Operator = tablaOfertas.Operator.Equal;
                        criterio_1.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " +  numeroOferta;
                    }
                }

                dondeVa = "SalesQuotationMasterTable proxy";
                tablaOfertas.SalesQuotationsServiceClient proxy_1 = new tablaOfertas.SalesQuotationsServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;
                tablaOfertas.AxdSalesQuotations axdTablaOfertas_1 = proxy_1.find(contexto_1, criterio_1);

                dondeVa = "SalesQuotationMasterTable proxy find";

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdTablaOfertas_1.SalesQuotationMasterTable is null)
                {
                    dondeVa = "SalesQuotationMasterTable proxy close porque no devolvió datos";

                    proxy_1.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO se ha encontrado la oferta indicada";
                    return;
                }
                proxy_1.Close();

                dondeVa = "SalesQuotationMasterTable incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "OFERTA";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular oferta // " + dondeVa + " // " + ex.Message;
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "OFERTA";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularPedidosGrupo(ref DataTable dtResultados, int cual, string empresa, string numero, List<string> listaNumeros)
        {
            string dondeVa = "";
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DataRow oItemResultados;
            string numeros = "";

            try
            {
                string usuario = User.Identity.Name.ToString() + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();
                if (usuario == "")
                    usuario = "diana" + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();

                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();

                lblVersionUtilizada.Text = "";
                imgWarning.Visible = true;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "SalesTable";
                tablaPedidos.CallContext contexto_1 = new tablaPedidos.CallContext();
                contexto_1.Company = empresa;

                dondeVa = "SalesTable criterios";
                tablaPedidos.QueryCriteria criterio_1 = new tablaPedidos.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "SalesTable 1 solo criterio";
                    criterio_1.CriteriaElement = new tablaPedidos.CriteriaElement[1];

                    criterio_1.CriteriaElement[0] = new tablaPedidos.CriteriaElement();
                    criterio_1.CriteriaElement[0].FieldName = "SalesID";
                    criterio_1.CriteriaElement[0].DataSourceName = "SalesTable";
                    criterio_1.CriteriaElement[0].Operator = tablaPedidos.Operator.Equal;
                    criterio_1.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "SalesTable muchos criterios";

                    criterio_1.CriteriaElement = new tablaPedidos.CriteriaElement[listaNumeros.Count];
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_1.CriteriaElement[numOferta] = new tablaPedidos.CriteriaElement();
                        criterio_1.CriteriaElement[numOferta].FieldName = "SalesID";
                        criterio_1.CriteriaElement[numOferta].DataSourceName = "SalesTable";
                        criterio_1.CriteriaElement[numOferta].Operator = tablaPedidos.Operator.Equal;
                        criterio_1.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "SalesTable proxy";
                tablaPedidos.SalesOrdersServiceClient proxy_1 = new tablaPedidos.SalesOrdersServiceClient();
                proxy_1.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_1.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_1.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;
                tablaPedidos.AxdSalesOrders axdtablaPedidos = proxy_1.find(contexto_1, criterio_1);

                dondeVa = "SalesTable proxy find";

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdtablaPedidos.SalesTable is null)
                {
                    dondeVa = "SalesTable proxy close porque no devolvió datos";

                    proxy_1.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = "NO se ha encontrado el pedido indicado";
                    return;
                }
                proxy_1.Close();

                dondeVa = "SalesTable incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "PEDIDO";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular pedido // " + dondeVa + " // " + ex.Message;
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                oItemResultados = dtResultados.NewRow();
               oItemResultados["TIPO"] = "PEDIDO";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        protected void calcularFichasGrupo(ref DataTable dtResultados, int cual, string empresa, string numero, List<string> listaNumeros)
        {
            string dondeVa = "";
            DateTime horaLlamada_1 = default(DateTime);
            TimeSpan horaLlamada_2 = default(TimeSpan);
            DataRow oItemResultados;
            string numeros = "";

            try
            {
                string usuario = User.Identity.Name.ToString() + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();
                if (usuario == "")
                    usuario = "diana" + "_" + DateTime.Now.Minute.ToString("00") + "_" + DateTime.Now.Second.ToString("00") + "_" + DateTime.Now.Millisecond.ToString("00") + "_" + new Random().Next(0, 5000000).ToString();

                string strConexion;
                strConexion = ConfigurationManager.ConnectionStrings["SQL_ROP"].ToString();

                lblVersionUtilizada.Text = "";
                imgWarning.Visible = true;
                lblMensajeError.Visible = false;
                lblMensajeError.Text = "";
                datosGenerales = "";
                // tablaObras
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaObras";
                tablaObras.CallContext contexto_Obra = new tablaObras.CallContext();
                contexto_Obra.Company = empresa;

                dondeVa = "tablaObras criterios";
                tablaObras.QueryCriteria criterio_Obra = new tablaObras.QueryCriteria();

                if (numero != "")
                {
                    dondeVa = "tablaObras 1 solo criterio";
                    criterio_Obra.CriteriaElement = new tablaObras.CriteriaElement[1];

                    criterio_Obra.CriteriaElement[0] = new tablaObras.CriteriaElement();
                    criterio_Obra.CriteriaElement[0].DataSourceName = "ObraTable_1";
                    criterio_Obra.CriteriaElement[0].FieldName = "ObraId";
                    criterio_Obra.CriteriaElement[0].Operator = tablaObras.Operator.Equal;
                    criterio_Obra.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaObras muchos criterios";
                    criterio_Obra.CriteriaElement = new tablaObras.CriteriaElement[listaNumeros.Count];
                   
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_Obra.CriteriaElement[numOferta] = new tablaObras.CriteriaElement();
                        criterio_Obra.CriteriaElement[numOferta].DataSourceName = "ObraTable_1";
                        criterio_Obra.CriteriaElement[numOferta].FieldName = "ObraId";
                        criterio_Obra.CriteriaElement[numOferta].Operator = tablaObras.Operator.Equal;
                        criterio_Obra.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaObras credenciales";
                tablaObras.ObrasServiceClient proxy_Obra = new tablaObras.ObrasServiceClient();
                proxy_Obra.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_Obra.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_Obra.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "tablaObras proxy";
                tablaObras.AxdObras axdtablaObras_1 = proxy_Obra.find(contexto_Obra, criterio_Obra);

                dondeVa = "tablaObras is null";
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdtablaObras_1.ObraTable_1 is null)
                {
                    dondeVa = "tablaObras proxy close porque no devolvió datos";

                    proxy_Obra.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaObras: NO se ha encontrado la ficha indicada";
                }
                proxy_Obra.Close();

                dondeVa = "tablaObras incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaObras";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaInventario
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                tablaInventario.CallContext contexto_inventario = new tablaInventario.CallContext();
                contexto_inventario.Company = empresa;

                tablaInventario.QueryCriteria criterio_inventario = new tablaInventario.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaInventario 1 solo criterio";
                    criterio_inventario.CriteriaElement = new tablaInventario.CriteriaElement[1];

                    criterio_inventario.CriteriaElement[0] = new tablaInventario.CriteriaElement();
                    criterio_inventario.CriteriaElement[0].DataSourceName = "InventTrans_1";
                    criterio_inventario.CriteriaElement[0].FieldName = "obraid";
                    criterio_inventario.CriteriaElement[0].Operator = tablaInventario.Operator.Equal;
                    criterio_inventario.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaInventario muchos criterios";
                    criterio_inventario.CriteriaElement = new tablaInventario.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_inventario.CriteriaElement[numOferta] = new tablaInventario.CriteriaElement();
                        criterio_inventario.CriteriaElement[numOferta].DataSourceName = "InventTrans_1";
                        criterio_inventario.CriteriaElement[numOferta].FieldName = "obraid";
                        criterio_inventario.CriteriaElement[numOferta].Operator = tablaInventario.Operator.Equal;
                        criterio_inventario.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaInventario proxy";
                tablaInventario.InventTransOriginServiceClient proxy_inventario = new tablaInventario.InventTransOriginServiceClient();
                proxy_inventario.ClientCredentials.Windows.ClientCredential.Domain = "ALSINA";
                proxy_inventario.ClientCredentials.Windows.ClientCredential.UserName = "cromlec3";
                proxy_inventario.ClientCredentials.Windows.ClientCredential.Password = "CroAls19";

                dondeVa = "tablaInventario proxy find";
                tablaInventario.AxdInventTrans AxdInventTrans = proxy_inventario.find(contexto_inventario, criterio_inventario);

                dondeVa = "tablaInventario InventTrans_1 is null";
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (AxdInventTrans.InventTrans_1 is null)

                {
                    dondeVa = "tablaInventario proxy close porque no devolvió datos";

                    proxy_inventario.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaInventario: NO se ha encontrado la ficha indicada";
                }
                proxy_inventario.Close();

                dondeVa = "tablaInventario incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaInventario";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaValesTransporte
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaValesTransporte";
                tablaValesTransporte.CallContext contexto_VT = new tablaValesTransporte.CallContext();
                contexto_VT.Company = empresa;

                dondeVa = "tablaValesTransporte criterios";
                tablaValesTransporte.QueryCriteria criterio_VT = new tablaValesTransporte.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaValesTransporte 1 solo criterio";
                    criterio_VT.CriteriaElement = new tablaValesTransporte.CriteriaElement[1];

                    criterio_VT.CriteriaElement[0] = new tablaValesTransporte.CriteriaElement();
                    criterio_VT.CriteriaElement[0].DataSourceName = "TransportTicketTable";
                    criterio_VT.CriteriaElement[0].FieldName = "obraid";
                    criterio_VT.CriteriaElement[0].Operator = tablaValesTransporte.Operator.Equal;
                    criterio_VT.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaValesTransporte muchos criterios";

                    criterio_VT.CriteriaElement = new tablaValesTransporte.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_VT.CriteriaElement[numOferta] = new tablaValesTransporte.CriteriaElement();
                        criterio_VT.CriteriaElement[numOferta].DataSourceName = "TransportTicketTable";
                        criterio_VT.CriteriaElement[numOferta].FieldName = "obraid";
                        criterio_VT.CriteriaElement[numOferta].Operator = tablaValesTransporte.Operator.Equal;
                        criterio_VT.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaValesTransporte proxy";
                tablaValesTransporte.TransportTicketServiceClient proxy_VT = new tablaValesTransporte.TransportTicketServiceClient();
                proxy_VT.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_VT.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_VT.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "tablaValesTransporte proxy find";
                tablaValesTransporte.AxdTransportTicket AxdTransportTicket = proxy_VT.find(contexto_VT, criterio_VT);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (AxdTransportTicket.TransportTicketTable is null)
                {
                    dondeVa = "tablaValesTransporte proxy close porque no devolvió datos";

                    proxy_VT.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaValesTransporte: NO se ha encontrado la ficha indicada";
                }
                proxy_VT.Close();

                dondeVa = "tablaValesTransporte incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaValesTransporte";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaPedidos
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaPedidos";
                tablaPedidos.CallContext contexto_Pedido = new tablaPedidos.CallContext();
                contexto_Pedido.Company = empresa;

                dondeVa = "tablaPedidos criterios";
                tablaPedidos.QueryCriteria criterio_Pedido = new tablaPedidos.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaPedidos 1 solo criterio";
                    criterio_Pedido.CriteriaElement = new tablaPedidos.CriteriaElement[1];

                    criterio_Pedido.CriteriaElement[0] = new tablaPedidos.CriteriaElement();
                    criterio_Pedido.CriteriaElement[0].DataSourceName = "SalesTable";
                    criterio_Pedido.CriteriaElement[0].FieldName = "OBRAID";
                    criterio_Pedido.CriteriaElement[0].Operator = tablaPedidos.Operator.Equal;
                    criterio_Pedido.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaPedidos muchos criterios";
                    criterio_Pedido.CriteriaElement = new tablaPedidos.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_Pedido.CriteriaElement[numOferta] = new tablaPedidos.CriteriaElement();
                        criterio_Pedido.CriteriaElement[numOferta].DataSourceName = "SalesTable";
                        criterio_Pedido.CriteriaElement[numOferta].FieldName = "OBRAID";
                        criterio_Pedido.CriteriaElement[numOferta].Operator = tablaPedidos.Operator.Equal;
                        criterio_Pedido.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaPedidos proxy";
                tablaPedidos.SalesOrdersServiceClient proxy_Pedido = new tablaPedidos.SalesOrdersServiceClient();
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_Pedido.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;
                dondeVa = "tablaPedidos proxy find";
                tablaPedidos.AxdSalesOrders axdtablaPedidos_Pedido = proxy_Pedido.find(contexto_Pedido, criterio_Pedido);
               
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdtablaPedidos_Pedido.SalesTable is null)
                {
                    dondeVa = "tablaPedidos proxy close porque no devolvió datos";

                    proxy_Pedido.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaPedidos: NO se ha encontrado la ficha indicada";
                }
                proxy_Pedido.Close();

                dondeVa = "tablaPedidos incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaPedidos";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaAlbaranesEntrega
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaAlbaranesEntrega";
                tablaAlbaranesEntrega.CallContext contexto_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.CallContext();
                contexto_AlbaranEntrega_Coste.Company = empresa;

                dondeVa = "tablaAlbaranesEntrega criterios";
                tablaAlbaranesEntrega.QueryCriteria criterio_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaAlbaranesEntrega 1 solo criterio";
                    criterio_AlbaranEntrega_Coste.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[1];

                    criterio_AlbaranEntrega_Coste.CriteriaElement[0] = new tablaAlbaranesEntrega.CriteriaElement();
                    criterio_AlbaranEntrega_Coste.CriteriaElement[0].DataSourceName = "CustPackingSlipTrans";
                    criterio_AlbaranEntrega_Coste.CriteriaElement[0].FieldName = "ObraId";
                    criterio_AlbaranEntrega_Coste.CriteriaElement[0].Operator = tablaAlbaranesEntrega.Operator.Equal;
                    criterio_AlbaranEntrega_Coste.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaAlbaranesEntrega muchos criterios";
                    criterio_AlbaranEntrega_Coste.CriteriaElement = new tablaAlbaranesEntrega.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_AlbaranEntrega_Coste.CriteriaElement[numOferta] = new tablaAlbaranesEntrega.CriteriaElement();
                        criterio_AlbaranEntrega_Coste.CriteriaElement[numOferta].DataSourceName = "CustPackingSlipTrans";
                        criterio_AlbaranEntrega_Coste.CriteriaElement[numOferta].FieldName = "ObraId";
                        criterio_AlbaranEntrega_Coste.CriteriaElement[numOferta].Operator = tablaAlbaranesEntrega.Operator.Equal;
                        criterio_AlbaranEntrega_Coste.CriteriaElement[numOferta].Value1 = numeroOferta;

                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaAlbaranesEntrega proxy";
                tablaAlbaranesEntrega.CustPackingServiceClient proxy_AlbaranEntrega_Coste = new tablaAlbaranesEntrega.CustPackingServiceClient();
                proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_AlbaranEntrega_Coste.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "tablaAlbaranesEntrega proxy find";
                tablaAlbaranesEntrega.AxdCustPacking AxdCustPacking_Coste = proxy_AlbaranEntrega_Coste.find(contexto_AlbaranEntrega_Coste, criterio_AlbaranEntrega_Coste);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (AxdCustPacking_Coste.CustPackingSlipTrans is null)
                {
                    dondeVa = "tablaAlbaranesEntrega proxy close porque no devolvió datos";

                    proxy_AlbaranEntrega_Coste.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaAlbaranesEntrega: NO se ha encontrado la ficha indicada";
                }
                proxy_AlbaranEntrega_Coste.Close();

                dondeVa = "tablaAlbaranesEntrega incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaAlbaranesEntrega";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaCabeceraFacturas
                // CABECERA
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaCabeceraFacturas";
                tablaCabeceraFacturas.CallContext contexto_facturasCabecera = new tablaCabeceraFacturas.CallContext();
                contexto_facturasCabecera.Company = empresa;

                dondeVa = "tablaCabeceraFacturas criterios";
                tablaCabeceraFacturas.QueryCriteria criterio_facturasCabecera = new tablaCabeceraFacturas.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaCabeceraFacturas 1 solo criterio";
                    criterio_facturasCabecera.CriteriaElement = new tablaCabeceraFacturas.CriteriaElement[1];
                    criterio_facturasCabecera.CriteriaElement[0] = new tablaCabeceraFacturas.CriteriaElement();
                    criterio_facturasCabecera.CriteriaElement[0].DataSourceName = "CustInvoiceJour";
                    criterio_facturasCabecera.CriteriaElement[0].FieldName = "ObraId";
                    criterio_facturasCabecera.CriteriaElement[0].Operator = tablaCabeceraFacturas.Operator.Equal;
                    criterio_facturasCabecera.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaCabeceraFacturas muchos criterios";

                    criterio_facturasCabecera.CriteriaElement = new tablaCabeceraFacturas.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_facturasCabecera.CriteriaElement[numOferta] = new tablaCabeceraFacturas.CriteriaElement();
                        criterio_facturasCabecera.CriteriaElement[numOferta].DataSourceName = "CustInvoiceJour";
                        criterio_facturasCabecera.CriteriaElement[numOferta].FieldName = "ObraId";
                        criterio_facturasCabecera.CriteriaElement[numOferta].Operator = tablaCabeceraFacturas.Operator.Equal;
                        criterio_facturasCabecera.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaCabeceraFacturas proxy";
                tablaCabeceraFacturas.DiarioFacturasServiceClient proxy_facturasCabacera = new tablaCabeceraFacturas.DiarioFacturasServiceClient();
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_facturasCabacera.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "tablaCabeceraFacturas proxy find";
                tablaCabeceraFacturas.AxdDiarioFacturas axdtablaCabeceraFacturas_1 = proxy_facturasCabacera.find(contexto_facturasCabecera, criterio_facturasCabecera);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdtablaCabeceraFacturas_1.CustInvoiceJour is null)
                {
                    dondeVa = "tablaCabeceraFacturas proxy close porque no devolvió datos";

                    proxy_facturasCabacera.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaCabeceraFacturas: NO se ha encontrado la ficha indicada";
                }
                proxy_facturasCabacera.Close();

                dondeVa = "tablaCabeceraFacturas incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaCabeceraFacturas";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaLineasFacturas
                // Lineas
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaLineasFacturas";
                tablaLineasFacturas.CallContext contexto_facturas = new tablaLineasFacturas.CallContext();
                contexto_facturas.Company = empresa;

                dondeVa = "tablaLineasFacturas criterios";
                tablaLineasFacturas.QueryCriteria criterio_facturas = new tablaLineasFacturas.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaLineasFacturas 1 solo criterio";
                    criterio_facturas.CriteriaElement = new tablaLineasFacturas.CriteriaElement[1];
                    criterio_facturas.CriteriaElement[0] = new tablaLineasFacturas.CriteriaElement();
                    criterio_facturas.CriteriaElement[0].DataSourceName = "CustInvoiceTrans";
                    criterio_facturas.CriteriaElement[0].FieldName = "ObraId";
                    criterio_facturas.CriteriaElement[0].Operator = tablaLineasFacturas.Operator.Equal;
                    criterio_facturas.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaLineasFacturas muchos criterios";

                    criterio_facturas.CriteriaElement = new tablaLineasFacturas.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_facturas.CriteriaElement[numOferta] = new tablaLineasFacturas.CriteriaElement();
                        criterio_facturas.CriteriaElement[numOferta].DataSourceName = "CustInvoiceTrans";
                        criterio_facturas.CriteriaElement[numOferta].FieldName = "ObraId";
                        criterio_facturas.CriteriaElement[numOferta].Operator = tablaLineasFacturas.Operator.Equal;
                        criterio_facturas.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaLineasFacturas proxy";
                tablaLineasFacturas.LineasFacturasServiceClient proxy_facturas = new tablaLineasFacturas.LineasFacturasServiceClient();
                proxy_facturas.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_facturas.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_facturas.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "tablaLineasFacturas proxy find";
                tablaLineasFacturas.AxdLineasFacturas axdtablaFacturas_1 = proxy_facturas.find(contexto_facturas, criterio_facturas);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdtablaFacturas_1.CustInvoiceTrans is null)
                {
                    dondeVa = "tablaLineasFacturas proxy close porque no devolvió datos";

                    proxy_facturas.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text +  " / tablaLineasFacturas: NO se ha encontrado la ficha indicada";
                }
                proxy_facturas.Close();

                dondeVa = "tablaLineasFacturas incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaLineasFacturas";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;

                // tablaHojasTrabajoLineas
                // Lineas
                horaLlamada_1 = DateTime.Now;
                dondeVa = "tablaHojasTrabajoLineas";
                tablaHojasTrabajoLineas.CallContext contexto_HojasTrabajoLineas = new tablaHojasTrabajoLineas.CallContext();
                contexto_HojasTrabajoLineas.Company = empresa;

                dondeVa = "tablaHojasTrabajoLineas criterios";
                tablaHojasTrabajoLineas.QueryCriteria criterio_HojasTrabajoLineas = new tablaHojasTrabajoLineas.QueryCriteria();
                if (numero != "")
                {
                    dondeVa = "tablaHojasTrabajoLineas 1 solo criterio";
                    criterio_HojasTrabajoLineas.CriteriaElement = new tablaHojasTrabajoLineas.CriteriaElement[1];
                    criterio_HojasTrabajoLineas.CriteriaElement[0] = new tablaHojasTrabajoLineas.CriteriaElement();
                    criterio_HojasTrabajoLineas.CriteriaElement[0].DataSourceName = "WorkPaperPaletTable";
                    criterio_HojasTrabajoLineas.CriteriaElement[0].FieldName = "ObraId";
                    criterio_HojasTrabajoLineas.CriteriaElement[0].Operator = tablaHojasTrabajoLineas.Operator.Equal;
                    criterio_HojasTrabajoLineas.CriteriaElement[0].Value1 = numero;
                }
                else
                {
                    dondeVa = "tablaHojasTrabajoLineas muchos criterios";

                    criterio_HojasTrabajoLineas.CriteriaElement = new tablaHojasTrabajoLineas.CriteriaElement[listaNumeros.Count];
                    numeros = "";
                    int numOferta = 0;
                    foreach (string numeroOferta in listaNumeros)
                    {
                        criterio_HojasTrabajoLineas.CriteriaElement[numOferta] = new tablaHojasTrabajoLineas.CriteriaElement();
                        criterio_HojasTrabajoLineas.CriteriaElement[numOferta].DataSourceName = "WorkPaperPaletTable";
                        criterio_HojasTrabajoLineas.CriteriaElement[numOferta].FieldName = "ObraId";
                        criterio_HojasTrabajoLineas.CriteriaElement[numOferta].Operator = tablaHojasTrabajoLineas.Operator.Equal;
                        criterio_HojasTrabajoLineas.CriteriaElement[numOferta].Value1 = numeroOferta;
                        numOferta = numOferta + 1;
                        numeros = numeros + " / " + numeroOferta;
                    }
                }

                dondeVa = "tablaHojasTrabajoLineas proxy";
                tablaHojasTrabajoLineas.WorkPaperLinesServiceClient proxy_HojasTrabajoLineas = new tablaHojasTrabajoLineas.WorkPaperLinesServiceClient();
                proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.Domain = WSDominio;
                proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.UserName = WSUsuario;
                proxy_HojasTrabajoLineas.ClientCredentials.Windows.ClientCredential.Password = WSContrasena;

                dondeVa = "tablaHojasTrabajoLineas proxy find";
                tablaHojasTrabajoLineas.AxdWorkPaperLines axdtablaHojasTrabajoLineas_1 = proxy_HojasTrabajoLineas.find(contexto_HojasTrabajoLineas, criterio_HojasTrabajoLineas);

                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                if (axdtablaHojasTrabajoLineas_1.WorkPaperPaletTable is null)
                {
                    dondeVa = "tablaHojasTrabajoLineas proxy close porque no devolvió datos";

                    proxy_HojasTrabajoLineas.Close();
                    imgWarning.Visible = true;
                    lblMensajeError.Visible = true;
                    lblMensajeError.Text = lblMensajeError.Text + " / tablaHojasTrabajoLineas: NO se ha encontrado la ficha indicada";
                }
                proxy_HojasTrabajoLineas.Close();

                dondeVa = "tablaHojasTrabajoLineas incluir datos al resultado";

                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA // tablaHojasTrabajoLineas";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
            catch (Exception ex)
            {
                imgWarning.Visible = true;
                lblMensajeError.Visible = true;
                lblMensajeError.Text = "Calcular ficha // " + dondeVa + " // " + ex.Message;
                horaLlamada_2 = DateTime.Now.Subtract(horaLlamada_1);
                oItemResultados = dtResultados.NewRow();
                oItemResultados["TIPO"] = "FICHA";
                oItemResultados["EMPRESA"] = empresa;
                if (numero != "")
                    oItemResultados["NUMERO"] = numero;
                else
                    oItemResultados["NUMERO"] = numeros;
                oItemResultados["TIEMPO LLAMADA WS"] = horaLlamada_2.Minutes.ToString("00") + ":" + horaLlamada_2.Seconds.ToString("00") + ":" + horaLlamada_2.Milliseconds.ToString("00"); ;
                oItemResultados["ERROR"] = dondeVa + " // " + ex.Message;
                dtResultados.Rows.Add(oItemResultados);
                oItemResultados = null;
            }
        }

        //protected void txtHilos_TextChanged(object sender, EventArgs e)
        //{
        //    int numero = Convert.ToInt32(txtHilos.Text.Replace(".", "").Replace(",",""));
        //    txtHilos.Text = numero.ToString("N0");
        //}
    }
}